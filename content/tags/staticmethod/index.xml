<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>staticmethod on The Child is Father of the Man</title>
    <link>/tags/staticmethod/</link>
    <description>Recent content in staticmethod on The Child is Father of the Man</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/staticmethod/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decorators - Object Oriented Programming</title>
      <link>/posts/2016/05/2016-05-30-decorators-object-oriented-programming/</link>
      <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/posts/2016/05/2016-05-30-decorators-object-oriented-programming/</guid>
      <description>_D_ecorators are wrapper functions (or classes) that wrap and modify another function (or class), and change it&amp;rsquo;s behavior as required. Decorators help to modify your code without actually modifying the working function/class itself.
There are several inbuilt Decorators in Python, such as @classmethodÂ and @staticmethod. Examples on these are due for another post.
Decorators are called to act upon a function or class, by mentioning the Decorator name just above the function/class.</description>
    </item>
    
  </channel>
</rss>
