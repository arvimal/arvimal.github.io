Mutable and Immutable objects - Python
######################################
:date: 2017-06-30 10:39
:author: arvimal
:category: Programming, Python
:slug: 2041
:status: draft

**O**\ bjects can either be mutable or immutable, depending on the class from which the object is instantiated.

Immutable objects cannot be changed while immutable objects can be.

For example, objects instantiated from the ``int`` class as well as the those instantiated from the ``bool``, ``float``, ``str``, ``tuple`` classes are immutable. Objects instantiated from classes such as ``list``, ``dict``, ``set`` are mutable.

Let's see a few examples.

| [code language="python"]
| In [9]: a = 10

| In [10]: id(10)
| Out[10]: 140355945240384

In [11]: a = 100

| In [12]: id(a)
| Out[12]: 140355945243264

In [13]: b = [1,2,3]

| In [14]: id(b)
| Out[14]: 140355692963656

In [15]: b.append(10)

| In [16]: id(b)
| Out[16]: 140355692963656

| In [10]: id(10)
| Out[10]: 140355945240384

In [11]: a = 100

| In [12]: id(a)
| Out[12]: 140355945243264
| [/code]

A very detailed explanation of this along with lot of other valuable information can be seen at:

#. `Python v3 Data Model
    <https://docs.python.org/3/reference/datamodel.html>`__
#. `Python v2 Data Model <https://docs.python.org/2/reference/datamodel.html>`__

 
