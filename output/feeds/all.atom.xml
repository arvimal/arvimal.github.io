<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>arvimal.github.io</title><link href="https://arvimal.github.io/" rel="alternate"></link><link href="https://arvimal.github.io/feeds/all.atom.xml" rel="self"></link><id>https://arvimal.github.io/</id><updated>2017-08-09T00:00:00+02:00</updated><entry><title>"Callables in Python"</title><link href="https://arvimal.github.io/callables-in-python.html" rel="alternate"></link><published>2017-08-09T00:00:00+02:00</published><updated>2017-08-09T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2017-08-09:/callables-in-python.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"callable"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"python-objects"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;callable&lt;/code&gt; is an object in Python that can be called / executed when called with parantheses &lt;code&gt;( )&lt;/code&gt;. Classes and functions are callable.&lt;/p&gt;
&lt;p&gt;Callables can be a class, a function, or an instance of a class. In simple terms, a class/function/instance/builtin is …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"callable"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"python-objects"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;callable&lt;/code&gt; is an object in Python that can be called / executed when called with parantheses &lt;code&gt;( )&lt;/code&gt;. Classes and functions are callable.&lt;/p&gt;
&lt;p&gt;Callables can be a class, a function, or an instance of a class. In simple terms, a class/function/instance/builtin is callable if it gets executed while being called with the parantheses &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Example 1:&lt;/h4&gt;
&lt;p&gt;[code language="bash"]&lt;/p&gt;
&lt;p&gt;In [1]: help() Welcome to Python 3.6's help utility! -- content omitted -- -------- In [2]: int() Out[2]: 0&lt;/p&gt;
&lt;p&gt;In [3]: callable(int) Out[3]: True&lt;/p&gt;
&lt;p&gt;-------- In [4]: callable(help) Out[4]: True&lt;/p&gt;
&lt;p&gt;-------- In [5]: def hello(): ..: print("Howdy!!")&lt;/p&gt;
&lt;p&gt;In [6]: hello() Howdy!!&lt;/p&gt;
&lt;p&gt;In [7]: callable(hello) Out[7]: True [/code] In &lt;em&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/em&gt;, we can see that the builtins like &lt;code&gt;help()&lt;/code&gt;, a pre-defined type such as &lt;code&gt;int()&lt;/code&gt;, and a custom function &lt;code&gt;hello()&lt;/code&gt; are all callable. These can be executed while being called with parantheses.&lt;/p&gt;
&lt;h2&gt;The __call__() method&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;callable()&lt;/code&gt; builtin helps to determine if an object is callable or not. Internally, it translates to the magic method &lt;code&gt;__call__()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In short:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;my_object(*args)&lt;/code&gt; translates to &lt;code&gt;my_object.__call__(*args)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All classes and functions are callable, as well as &lt;em&gt;instances of classes&lt;/em&gt; with the &lt;code&gt;__call__&lt;/code&gt; magic method. An instance of a class/function is usually not callable (even though the class/function itself is), unless the class carries a &lt;code&gt;__call__&lt;/code&gt; magic method.&lt;/p&gt;
&lt;p&gt;In other words, an instance is callable only if the class it is instantiated from contains the &lt;code&gt;__call__&lt;/code&gt; magic method.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The inbuilt documentation on &lt;code&gt;callable&lt;/code&gt; states:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="text"] In [1]: print(callable.__doc__) Return whether the object is callable (i.e., some kind of function).&lt;/p&gt;
&lt;p&gt;Note that classes are callable, as are instances of classes with a __call__() method. [/code]&lt;/p&gt;
&lt;h4&gt;Example 2:&lt;/h4&gt;
&lt;p&gt;[code language="python"]&lt;/p&gt;
&lt;p&gt;In [5]: def hello(): ...: print("Howdy!!")&lt;/p&gt;
&lt;p&gt;In [6]: hello() Howdy!!&lt;/p&gt;
&lt;p&gt;In [7]: hello.__call__() Howdy!!&lt;/p&gt;
&lt;p&gt;In [8]: callable(hello) Out[8]: True [/code] &lt;em&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/em&gt; shows that a function when called with the parantheses (including any required arguments) is equivalent to calling the &lt;code&gt;__call__()&lt;/code&gt; magic method. ie.. calling a function/class with parantheses translates to calling the &lt;code&gt;__call__()&lt;/code&gt; magic method.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/em&gt; Read more on &lt;a href="https://arvimal.blog/2016/06/02/magic-methods-in-python/"&gt;Magic methods in Python&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Example 3: Non-callable Instances&lt;/h4&gt;
&lt;p&gt;[code language="bash"]&lt;/p&gt;
&lt;p&gt;In [1]: type(1) Out[1]: int&lt;/p&gt;
&lt;p&gt;In [2]: callable(1) Out[2]: False&lt;/p&gt;
&lt;p&gt;In [3]: x = 1&lt;/p&gt;
&lt;p&gt;In [4]: type(x) Out[4]: int&lt;/p&gt;
&lt;p&gt;In [5]: callable(int) Out[5]: True&lt;/p&gt;
&lt;p&gt;In [6]: callable(x) Out[6]: False [/code] &lt;em&gt;&lt;strong&gt;Example 3&lt;/strong&gt;&lt;/em&gt; above shows that even though the &lt;code&gt;int&lt;/code&gt; class is callable, the instances created from the &lt;code&gt;int&lt;/code&gt; class are not.&lt;/p&gt;
&lt;p&gt;Remember that instances will only be callable if the class from which it was instantiated contains a &lt;code&gt;__call__&lt;/code&gt; method. Inspecting the methods of &lt;code&gt;class int&lt;/code&gt; reveals that it does not have a &lt;code&gt;__call__&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can view the methods of the &lt;code&gt;int&lt;/code&gt; class using &lt;code&gt;help(int)&lt;/code&gt; or &lt;code&gt;dir(int)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 4: Another example with Classes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[code language="bash"]&lt;/p&gt;
&lt;p&gt;In [52]: class tell: ...: def __call__(self): ...: pass&lt;/p&gt;
&lt;p&gt;In [53]: telling = tell()&lt;/p&gt;
&lt;p&gt;In [54]: callable(tell) Out[54]: True&lt;/p&gt;
&lt;p&gt;In [55]: callable(telling) Out[55]: True&lt;/p&gt;
&lt;p&gt;--------&lt;/p&gt;
&lt;p&gt;In [56]: class test: ...: pass&lt;/p&gt;
&lt;p&gt;In [57]: testing = test()&lt;/p&gt;
&lt;p&gt;In [58]: callable(test) Out[58]: True&lt;/p&gt;
&lt;p&gt;In [59]: callable(testing) Out[59]: False [/code] Since all classes are by default callable, both the classes &lt;code&gt;tell&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; in &lt;em&gt;&lt;strong&gt;Example 4&lt;/strong&gt;&lt;/em&gt; are callable. But the instances of these classes necessarily need not be so. Since the class &lt;code&gt;tell&lt;/code&gt; has the magic method &lt;code&gt;__call__&lt;/code&gt;, the instance &lt;code&gt;telling&lt;/code&gt; is callable. But the instance &lt;code&gt;testing&lt;/code&gt; instantiated from the class &lt;code&gt;test&lt;/code&gt; is not since the class does not have the magic method. Another set of examples.&lt;/p&gt;
&lt;h4&gt;Example 5: Non-callable instance of a class&lt;/h4&gt;
&lt;p&gt;[code language="bash"]&lt;/p&gt;
&lt;p&gt;In [1]: class new: ...: def foo(self): ...: print("Hello")&lt;/p&gt;
&lt;p&gt;In [2]: n = new()&lt;/p&gt;
&lt;p&gt;In [3]: n() ------------------ TypeError Traceback (most recent call last) in module() ----&amp;gt; 1 n()&lt;/p&gt;
&lt;p&gt;TypeError: 'new' object is not callable [/code]&lt;/p&gt;
&lt;h4&gt;Example 6: Callable instance of the same class&lt;/h4&gt;
&lt;p&gt;[code language="bash"] In [4]: class new: ...: def __call__(self): ...: print("I'm callable!")&lt;/p&gt;
&lt;p&gt;In [5]: n = new()&lt;/p&gt;
&lt;p&gt;In [6]: n Out[6]: __main__.new at 0x7f7a614b1f98&lt;/p&gt;
&lt;p&gt;In [7]: n() I'm callable! [/code] &lt;em&gt;&lt;strong&gt;Example 5&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;Example 6&lt;/strong&gt;&lt;/em&gt; shows how a class is itself callable, but unless it carries a &lt;code&gt;__call__()&lt;/code&gt; method, the instances spawned out of it are not so.&lt;/p&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/3/library/functions.html#callable"&gt;http://docs.python.org/3/library/functions.html#callable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eli.thegreenplace.net/2012/03/23/python-internals-how-callables-work/"&gt;http://eli.thegreenplace.net/2012/03/23/python-internals-how-callables-work/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__call__"&gt;https://docs.python.org/3/reference/datamodel.html#object.__call__&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Writing a minimalistic kernel module in Linux - Part 1"</title><link href="https://arvimal.github.io/writing-a-minimalistic-kernel-module-in-linux-part-1.html" rel="alternate"></link><published>2017-07-27T00:00:00+02:00</published><updated>2017-07-27T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2017-07-27:/writing-a-minimalistic-kernel-module-in-linux-part-1.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"linux"&lt;/li&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"kernel"&lt;/li&gt;
&lt;li&gt;"module"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;_&lt;strong&gt;L&lt;/strong&gt;_oadable Kernel Modules (LKM) are object code that can be loaded into memory, often used for supporting hardware or enable specific features. Kernel modules enable the core kernel to be minimal and have features to be loaded as required.&lt;/p&gt;
&lt;p&gt;A kernel module …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"linux"&lt;/li&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"kernel"&lt;/li&gt;
&lt;li&gt;"module"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;_&lt;strong&gt;L&lt;/strong&gt;_oadable Kernel Modules (LKM) are object code that can be loaded into memory, often used for supporting hardware or enable specific features. Kernel modules enable the core kernel to be minimal and have features to be loaded as required.&lt;/p&gt;
&lt;p&gt;A kernel module is a normal file usually suffixed with &lt;code&gt;.ko&lt;/code&gt; denoting it's a kernel object file. It contains compiled code from one or more source files, gets linked to the kernel when loaded, and runs in kernel space. It can dynamically adds functionality to a running kernel, without requiring a reboot.&lt;/p&gt;
&lt;p&gt;Linux kernel modules are written in C (not sure if anything else like C++ is possible), and is compiled for a specific kernel version. This is the ideal practice since kernel data structures may change across versions, and using a module compiled for a specific version may break for another.&lt;/p&gt;
&lt;p&gt;Since kernel modules can be loaded and unloaded at will, it is pretty easy to unload an older version and load a newer one. This helps immensely in testing out new features since it is easy to change the source code, re-compile, unload the older version, load the newer version, and test the functionality.&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;Modules are expected to be under &lt;code&gt;/lib/modules/$(uname -r)/&lt;/code&gt; within directories specified according to use case.&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 3.10.0-514.26.2.el7.x86_64]# ls -l total 2940 lrwxrwxrwx. 1 root root 43 Jul 8 05:10 build -&amp;gt; /usr/src/kernels/3.10.0-514.26.2.el7.x86_64 drwxr-xr-x. 2 root root 6 Jul 4 11:17 extra drwxr-xr-x. 12 root root 128 Jul 8 05:10 kernel -rw-r--r--. 1 root root 762886 Jul 8 05:11 modules.alias -rw-r--r--. 1 root root 735054 Jul 8 05:11 modules.alias.bin -rw-r--r--. 1 root root 1326 Jul 4 11:17 modules.block -rw-r--r--. 1 root root 6227 Jul 4 11:15 modules.builtin -rw-r--r--. 1 root root 8035 Jul 8 05:11 modules.builtin.bin -rw-r--r--. 1 root root 240071 Jul 8 05:11 modules.dep -rw-r--r--. 1 root root 343333 Jul 8 05:11 modules.dep.bin -rw-r--r--. 1 root root 361 Jul 8 05:11 modules.devname -rw-r--r--. 1 root root 132 Jul 4 11:17 modules.drm -rw-r--r--. 1 root root 110 Jul 4 11:17 modules.modesetting -rw-r--r--. 1 root root 1580 Jul 4 11:17 modules.networking -rw-r--r--. 1 root root 90643 Jul 4 11:15 modules.order -rw-r--r--. 1 root root 89 Jul 8 05:11 modules.softdep -rw-r--r--. 1 root root 350918 Jul 8 05:11 modules.symbols -rw-r--r--. 1 root root 432831 Jul 8 05:11 modules.symbols.bin lrwxrwxrwx. 1 root root 5 Jul 8 05:10 source -&amp;gt; build drwxr-xr-x. 2 root root 6 Jul 4 11:17 updates drwxr-xr-x. 2 root root 95 Jul 8 05:10 vdso drwxr-xr-x. 2 root root 6 Jul 4 11:17 weak-updates [/code]&lt;/p&gt;
&lt;p&gt;As we can see, there are several files that deals with the inter-dependencies of modules, which is used by &lt;code&gt;modprobe&lt;/code&gt; to understand which modules to load before the one being actually requested to load.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;modules.block&lt;/code&gt; lists the modules for block devices&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modules.networking&lt;/code&gt; lists the ones for network devices.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modules.builtin&lt;/code&gt; lists the path of modules included in the kernel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modules.devname&lt;/code&gt; lists the ones that would be loaded automatically if a particular device is created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The kernel folder contains modules divided according to their use cases.&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 3.10.0-514.26.2.el7.x86_64]# ls -l kernel/ total 16 drwxr-xr-x. 3 root root 17 Jul 8 05:10 arch drwxr-xr-x. 3 root root 4096 Jul 8 05:10 crypto drwxr-xr-x. 67 root root 4096 Jul 8 05:10 drivers drwxr-xr-x. 26 root root 4096 Jul 8 05:10 fs drwxr-xr-x. 3 root root 19 Jul 8 05:10 kernel drwxr-xr-x. 5 root root 222 Jul 8 05:10 lib drwxr-xr-x. 2 root root 32 Jul 8 05:10 mm drwxr-xr-x. 33 root root 4096 Jul 8 05:10 net drwxr-xr-x. 11 root root 156 Jul 8 05:10 sound drwxr-xr-x. 3 root root 17 Jul 8 05:10 virt [/code]&lt;/p&gt;
&lt;p&gt;Each directory within kernel contains modules depending on the area they're used for. For example, &lt;code&gt;kernel/fs/&lt;/code&gt; contains filesystem drivers.&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 3.10.0-514.26.2.el7.x86_64]# ls -l kernel/fs total 48 -rw-r--r--. 1 root root 21853 Jul 4 11:51 binfmt_misc.ko drwxr-xr-x. 2 root root 22 Jul 8 05:10 btrfs drwxr-xr-x. 2 root root 27 Jul 8 05:10 cachefiles drwxr-xr-x. 2 root root 21 Jul 8 05:10 ceph drwxr-xr-x. 2 root root 21 Jul 8 05:10 cifs drwxr-xr-x. 2 root root 23 Jul 8 05:10 cramfs drwxr-xr-x. 2 root root 20 Jul 8 05:10 dlm drwxr-xr-x. 2 root root 23 Jul 8 05:10 exofs drwxr-xr-x. 2 root root 21 Jul 8 05:10 ext4 drwxr-xr-x. 2 root root 51 Jul 8 05:10 fat drwxr-xr-x. 2 root root 24 Jul 8 05:10 fscache drwxr-xr-x. 2 root root 36 Jul 8 05:10 fuse drwxr-xr-x. 2 root root 21 Jul 8 05:10 gfs2 drwxr-xr-x. 2 root root 22 Jul 8 05:10 isofs drwxr-xr-x. 2 root root 21 Jul 8 05:10 jbd2 drwxr-xr-x. 2 root root 22 Jul 8 05:10 lockd -rw-r--r--. 1 root root 19597 Jul 4 11:51 mbcache.ko drwxr-xr-x. 6 root root 128 Jul 8 05:10 nfs drwxr-xr-x. 2 root root 40 Jul 8 05:10 nfs_common drwxr-xr-x. 2 root root 21 Jul 8 05:10 nfsd drwxr-xr-x. 2 root root 4096 Jul 8 05:10 nls drwxr-xr-x. 2 root root 24 Jul 8 05:10 overlayfs drwxr-xr-x. 2 root root 24 Jul 8 05:10 pstore drwxr-xr-x. 2 root root 25 Jul 8 05:10 squashfs drwxr-xr-x. 2 root root 20 Jul 8 05:10 udf drwxr-xr-x. 2 root root 20 Jul 8 05:10 xfs [/code]&lt;/p&gt;
&lt;h2&gt;depmod, and related commands&lt;/h2&gt;
&lt;p&gt;Modules can export the features it carry, called &lt;code&gt;symbols&lt;/code&gt; which can be used by other modules. If module &lt;code&gt;A&lt;/code&gt; depends on a symbol exported by module &lt;code&gt;B&lt;/code&gt;, module &lt;code&gt;B&lt;/code&gt; should be loaded first followed by module &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;depmod&lt;/code&gt; creates a list of symbol dependencies each module has, so that &lt;code&gt;modprobe&lt;/code&gt; can go ahead and load the modules serving the symbols, prior loading the actual module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;depmod&lt;/code&gt; works by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating a list of symbols each module exports.&lt;/li&gt;
&lt;li&gt;Creating a list of symbol dependencies each module has.&lt;/li&gt;
&lt;li&gt;Dumping the list of symbols each module exports, to &lt;code&gt;lib/modules/$(uname -r)/modules.symbols.bin&lt;/code&gt; and &lt;code&gt;/lib/modules/$(uname -r)/modules.symbols&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dumping the module dependency information to &lt;code&gt;/lib/modules/$(uname -r)/modules.dep.bin&lt;/code&gt; and &lt;code&gt;/lib/modules/$(uname -r)/modules.dep&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Creating &lt;code&gt;/lib/modules/$(uname -r)/modules.devnames&lt;/code&gt; which contains the device file information (device type, major:minor number) that gets created at boot for this module to function properly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;modprobe&lt;/code&gt; refers &lt;code&gt;/lib/modules/$(uname -r)/modules.dep.bin&lt;/code&gt; to understand the dependencies each module require. A human-readable version of this file is maintained at &lt;code&gt;/lib/modules/$(uname -r)/modules.dep&lt;/code&gt; but &lt;code&gt;modprobe&lt;/code&gt; does not refer this.&lt;/li&gt;
&lt;li&gt;The binary file &lt;code&gt;modules.symbols.bin&lt;/code&gt; carry the symbols exported (if any) by each module, one symbol per line. A human-readable version of the same is kept at &lt;code&gt;modules.symbols&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A sneak peek into &lt;code&gt;modules.symbols&lt;/code&gt; and &lt;code&gt;modules.dep&lt;/code&gt;:&lt;/p&gt;
&lt;h4&gt;modules.symbols&lt;/h4&gt;
&lt;p&gt;[code language="bash"] [root@centos7 3.10.0-514.26.2.el7.x86_64]# head modules.symbols # Aliases for symbols, used by symbol_request(). alias symbol:cfg80211_report_obss_beacon cfg80211 alias symbol:drm_dp_link_train_channel_eq_delay drm_kms_helper alias symbol:__twofish_setkey twofish_common alias symbol:mlx4_db_free mlx4_core alias symbol:nf_send_unreach nf_reject_ipv4 alias symbol:sdhci_remove_host sdhci alias symbol:videobuf_dma_init_kernel videobuf_dma_sg alias symbol:ar9003_paprd_is_done ath9k_hw alias symbol:cxgbi_ep_disconnect libcxgbi [/code]&lt;/p&gt;
&lt;h4&gt;modules.dep&lt;/h4&gt;
&lt;p&gt;[code language="bash"] [root@centos7 3.10.0-514.26.2.el7.x86_64]# head modules.dep kernel/arch/x86/kernel/cpu/mcheck/mce-inject.ko: kernel/arch/x86/kernel/test_nx.ko: kernel/arch/x86/kernel/iosf_mbi.ko: kernel/arch/x86/crypto/ablk_helper.ko: kernel/crypto/cryptd.ko kernel/arch/x86/crypto/glue_helper.ko: kernel/arch/x86/crypto/camellia-x86_64.ko: kernel/crypto/xts.ko kernel/crypto/lrw.ko kernel/crypto/gf128mul.ko kernel/arch/x86/crypto/glue_helper.ko kernel/arch/x86/crypto/blowfish-x86_64.ko: kernel/crypto/blowfish_common.ko kernel/arch/x86/crypto/twofish-x86_64.ko: kernel/crypto/twofish_common.ko kernel/arch/x86/crypto/twofish-x86_64-3way.ko: kernel/arch/x86/crypto/twofish-x86_64.ko kernel/crypto/twofish_common.ko kernel/crypto/xts.ko kernel/crypto/lrw.ko kernel/crypto/gf128mul.ko kernel/arch/x86/crypto/glue_helper.ko kernel/arch/x86/crypto/salsa20-x86_64.ko: [/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; is a parser that reads through &lt;code&gt;/proc/modules&lt;/code&gt; and presents it in an easy-to-read format.&lt;/p&gt;
&lt;p&gt;Note how &lt;code&gt;lsmod&lt;/code&gt; parse throug the content of &lt;code&gt;/proc/modules&lt;/code&gt; below:&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 3.10.0-514.26.2.el7.x86_64]# head /proc/modules test 12498 0 - Live 0xffffffffa0492000 (POE) binfmt_misc 17468 1 - Live 0xffffffffa048c000 uhid 17369 0 - Live 0xffffffffa0486000 ipt_MASQUERADE 12678 2 - Live 0xffffffffa0481000 nf_nat_masquerade_ipv4 13412 1 ipt_MASQUERADE, Live 0xffffffffa0451000 xt_addrtype 12676 2 - Live 0xffffffffa044c000 br_netfilter 22209 0 - Live 0xffffffffa0468000 dm_thin_pool 65565 1 - Live 0xffffffffa046f000 dm_persistent_data 67216 1 dm_thin_pool, Live 0xffffffffa0456000 dm_bio_prison 15907 1 dm_thin_pool, Live 0xffffffffa043f000&lt;/p&gt;
&lt;p&gt;[root@centos7 3.10.0-514.26.2.el7.x86_64]# lsmod | head Module Size Used by test 12498 0 binfmt_misc 17468 1 uhid 17369 0 ipt_MASQUERADE 12678 2 nf_nat_masquerade_ipv4 13412 1 ipt_MASQUERADE xt_addrtype 12676 2 br_netfilter 22209 0 dm_thin_pool 65565 1 dm_persistent_data 67216 1 dm_thin_pool [/code] &lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first field lists the module name.&lt;/li&gt;
&lt;li&gt;The second field lists the size of the module in memory.&lt;/li&gt;
&lt;li&gt;The third field lists the number of times the module is in use. `0` means the module is not used despite it being loaded.&lt;/li&gt;
&lt;li&gt;The fourth field lists the modules which uses this module as their dependency.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Creating a dummy module&lt;/h2&gt;
&lt;p&gt;The steps for creating a kernel module includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Writing the module file.&lt;/li&gt;
&lt;li&gt;Writing the &lt;code&gt;Makefile&lt;/code&gt; for the module.&lt;/li&gt;
&lt;li&gt;Compile the module file using &lt;code&gt;make&lt;/code&gt; , which will refer the &lt;code&gt;Makefile&lt;/code&gt; to build it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The module file and its corresponding Makefile are put in a separate directory so as to keep the kernel module directory clean. Once the module code and the Makefile are ready, the following &lt;code&gt;make&lt;/code&gt; command is used to build the module, the &lt;code&gt;$(PWD)&lt;/code&gt; being the directory where the module code and its Makefile is present.&lt;/p&gt;
&lt;p&gt;# make -C /lib/modules/$(uname -r)/build M=$PWD modules&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;make&lt;/code&gt; command above does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change to the path mentioned after &lt;code&gt;-C&lt;/code&gt;, ie.. to the location where the kernel Makefile is present. (&lt;code&gt;/lib/modules/$(uname -r)/build/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Use the kernel Makefile's macro &lt;code&gt;M&lt;/code&gt; which denotes the location from which the code should be compiled, ie.. in this case, the PWD where the module code/Makefile is present.&lt;/li&gt;
&lt;li&gt;Use the target &lt;code&gt;modules&lt;/code&gt; which tells &lt;code&gt;make&lt;/code&gt; to build the module.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hence, the above command is trying to build a module in the current working directory, using the kernel Makefile at &lt;code&gt;/lib/modules/$(uname -r)/build/Makefile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If we have a module file named &lt;code&gt;test.c&lt;/code&gt; and its corresponding Makefile in &lt;code&gt;$(PWD)&lt;/code&gt;, the &lt;code&gt;make&lt;/code&gt; command would follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt; calls the &lt;code&gt;modules&lt;/code&gt; target and refers to the kernel &lt;code&gt;Makefile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The kernel Makefile looks for the module Makefile in $PWD.&lt;/li&gt;
&lt;li&gt;The kernel Makefile read the module's Makefile and gets a list of the objects assigned to the macro &lt;code&gt;obj-m&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;make&lt;/code&gt; command builds modules for each object assigned to the macro &lt;code&gt;obj-m&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Writing a simple module&lt;/h2&gt;
&lt;p&gt;The following is a very simple module, which prints a message while loading, and another one while unloading.&lt;/p&gt;
&lt;p&gt;[code language="C"] #include #include #include&lt;/p&gt;
&lt;p&gt;int test_module(void) {     printk("Loading the test module!\n");     return 0; }&lt;/p&gt;
&lt;p&gt;void unload_test(void) {     printk("Unloading the test module!\n"); }&lt;/p&gt;
&lt;p&gt;module_init(test_module) module_exit(unload_test) [/code] This has two functions, &lt;code&gt;test_module()&lt;/code&gt; and &lt;code&gt;unload_test()&lt;/code&gt; which simply prints a text banner upon loading and unloading respectively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;module_init()&lt;/code&gt; is used to load the module, and can call whatever functions that needs to initialize the module. We load our &lt;code&gt;test_module()&lt;/code&gt; function into &lt;code&gt;module_init()&lt;/code&gt; so that it gets initialized when the module is loaded.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;module_exit()&lt;/code&gt; is called whenever the module has to be unloaded, and it can take in whatever functions are required to do a proper cleanup (if required) prior the module being unloaded. We load our &lt;code&gt;unload_test()&lt;/code&gt; function in &lt;code&gt;module_exit()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Writing a Makefile&lt;/h2&gt;
&lt;p&gt;Since the kernel Makefile will look in for the &lt;code&gt;obj-m&lt;/code&gt; macro in the module Makefile with the object filename as its argument, add the following in the Makefile:&lt;/p&gt;
&lt;p&gt;[code language="text"] obj-m := test.o [/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; will create an object file &lt;code&gt;test.o&lt;/code&gt; from &lt;code&gt;test.c&lt;/code&gt;, and then create a kernel object file &lt;code&gt;test.ko&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Compiling the module with `make`&lt;/h2&gt;
&lt;p&gt;Let's compile the module&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 test]# pwd /lib/modules/3.10.0-514.26.2.el7.x86_64/test [root@centos7 test]# ls Makefile test.c [root@centos7 test]# make -C /lib/modules/$(uname -r)/build M=$PWD modules make: Entering directory `/usr/src/kernels/3.10.0-514.26.2.el7.x86_64' CC [M] /lib/modules/3.10.0-514.26.2.el7.x86_64/test/test.o Building modules, stage 2. MODPOST 1 modules CC /lib/modules/3.10.0-514.26.2.el7.x86_64/test/test.mod.o LD [M] /lib/modules/3.10.0-514.26.2.el7.x86_64/test/test.ko make: Leaving directory `/usr/src/kernels/3.10.0-514.26.2.el7.x86_64' [/code] Listing the contents show lot of new files, including the module code, the Makefile, the object file &lt;code&gt;test.o&lt;/code&gt; created from &lt;code&gt;test.c&lt;/code&gt;, the kernel object file &lt;code&gt;test.ko&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test.mod.c&lt;/code&gt; contains code which should be the one ultimately being built to &lt;code&gt;test.ko&lt;/code&gt;, but that should be for another post since much more is yet to be read/learned on what's happening there.&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 test]# ls -l total 292 -rw-r--r--. 1 root root 16 Jul 27 11:52 Makefile -rw-r--r--. 1 root root 60 Jul 27 11:57 modules.order -rw-r--r--. 1 root root 0 Jul 27 11:57 Module.symvers -rw-r--r--. 1 root root 281 Jul 27 11:53 test.c -rw-r--r--. 1 root root 137768 Jul 27 11:57 test.ko -rw-r--r--. 1 root root 787 Jul 27 11:57 test.mod.c -rw-r--r--. 1 root root 52912 Jul 27 11:57 test.mod.o -rw-r--r--. 1 root root 87776 Jul 27 11:57 test.o [/code]&lt;/p&gt;
&lt;h2&gt;Loading/Unloading the module&lt;/h2&gt;
&lt;p&gt;Loading and unloading the module should print the messages passed via &lt;code&gt;printk&lt;/code&gt; in &lt;code&gt;dmesg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 test]# insmod ./test.ko [root@centos7 test]# lsmod | grep test test 12498 0 [root@centos7 test]# rmmod test [/code]&lt;/p&gt;
&lt;p&gt;Checking &lt;code&gt;dmesg&lt;/code&gt; shows the informational messages in the module code:&lt;/p&gt;
&lt;p&gt;[code language="bash"] [root@centos7 test]# dmesg | tail [35889.187282] test: loading out-of-tree module taints kernel. [35889.187288] test: module license 'unspecified' taints kernel. [35889.187290] Disabling lock debugging due to kernel taint [35889.187338] test: module verification failed: signature and/or required key missing - tainting kernel [35889.187548] Loading the test module! [35899.216954] Unloading the test module! [/code] Note the messages about the module &lt;code&gt;test&lt;/code&gt; tainting the kernel. Read more on how a module can taint the kernel, at &lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/tainted-kernels.html"&gt;https://www.kernel.org/doc/html/latest/admin-guide/tainted-kernels.html.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More on customizing the Makefile in another post.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Recursion - Algorithm Study"</title><link href="https://arvimal.github.io/recursion-algorithm-study.html" rel="alternate"></link><published>2017-06-27T00:00:00+02:00</published><updated>2017-06-27T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2017-06-27:/recursion-algorithm-study.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"recursion"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;R&lt;/strong&gt;_ecursion is a technique by which a function calls itself until a condition is met.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Loops or repetitive execution based on certain conditions are inevitable in programs. Usual loops include &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops. &lt;code&gt;Recursion&lt;/code&gt; is an entirely …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"recursion"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;R&lt;/strong&gt;_ecursion is a technique by which a function calls itself until a condition is met.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Loops or repetitive execution based on certain conditions are inevitable in programs. Usual loops include &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops. &lt;code&gt;Recursion&lt;/code&gt; is an entirely different way to deal with such situations, and in many cases, easier.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Recursion&lt;/code&gt; is a when a function calls itself in each iteration till a condition is met. Ideally, the data set in each iteration gets smaller until it reach the required condition, after which the recursive function exists.&lt;/p&gt;
&lt;p&gt;A typical example of recursion is a &lt;code&gt;factorial&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;How does Recursion work?&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;recursive&lt;/code&gt; function ideally contains a &lt;code&gt;Base&lt;/code&gt; case and a &lt;code&gt;Recursive&lt;/code&gt; case.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Recursive&lt;/code&gt; case is when the function calls itself, until the &lt;code&gt;Base&lt;/code&gt; case is met. Each level of iteration in the &lt;code&gt;Recursive&lt;/code&gt; case moves the control to the next level.&lt;/p&gt;
&lt;p&gt;Once a specific level finishes execution, the control is passed back to the previous level of execution. A &lt;code&gt;Recursive&lt;/code&gt; function can go several layers deep until the &lt;code&gt;Base&lt;/code&gt; condition is met. In short, a &lt;code&gt;Recursive&lt;/code&gt; case is a loop in which the function calls itself.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Base&lt;/code&gt; case is required so that the function doesn't continue running in the &lt;code&gt;Recursive&lt;/code&gt; loop forever. Once the &lt;code&gt;Base&lt;/code&gt; case is met, the control moves out of the &lt;code&gt;Recursive&lt;/code&gt; case, executes the conditions in the &lt;code&gt;Base&lt;/code&gt; case (if any), and exits.&lt;/p&gt;
&lt;p&gt;As mentioned in the &lt;code&gt;Introduction&lt;/code&gt;, a factorial function can be seen as an example of recursion.&lt;/p&gt;
&lt;h3&gt;NOTE:&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Base&lt;/code&gt; case for a factorial function is when &lt;code&gt;n == 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Consider &lt;code&gt;n!&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n!&lt;/code&gt; can be written as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n x (n - 1) x (n - 2) x (n - 3) x .... x 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n!&lt;/code&gt; can also be represented as:&lt;/p&gt;
&lt;p&gt;[code language="bash"] n! = n * (n - 1)! ---&amp;gt; [Step 1] (n - 1)! = (n - 1) * (n - 2)! ---&amp;gt; [Step 2] (n - 2)! = (n - 2) * (n - 3)! ---&amp;gt; [Step 3] . .. ... (n - (n - 1)) = 1 ---&amp;gt; [Base case] [/code]&lt;/p&gt;
&lt;p&gt;Each level/step is a product of a value and all the levels below it. Hence, &lt;code&gt;Step 1&lt;/code&gt; will end up moving to &lt;code&gt;Step 2&lt;/code&gt; to get the factorial of elements below it, then to &lt;code&gt;Step 3&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;ie.. the control of execution move as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Step 1] -&amp;gt; [Step 2] -&amp;gt; [Step 3] -&amp;gt; ..... [Step n]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a much easier-to-grasp example, a &lt;code&gt;5!&lt;/code&gt; would be:&lt;/p&gt;
&lt;p&gt;[code language="bash"] 5! = 5 * 4! ---&amp;gt; [Step 1] 4! = 4 * 3! ---&amp;gt; [Step 2] 3! = 3 * 2! ---&amp;gt; [Step 3] 2! = 2 * 1! ---&amp;gt; [Step 4] 1! = 1 ---&amp;gt; [Step 5] / [Base case] [/code]&lt;/p&gt;
&lt;p&gt;The order of execution will be :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Step 1] -&amp;gt; [Step 2] -&amp;gt; [Step 3] -&amp;gt; [Step 4] -&amp;gt; [Step 5]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As we know, in &lt;code&gt;Recursion&lt;/code&gt;, each layer pause itself and pass the control to the next level. Once it reach the end or the &lt;code&gt;Base&lt;/code&gt; case, it returns the result back to the previous level one by one until it reaches where it started off.&lt;/p&gt;
&lt;p&gt;In this example, once the control of execution reaches &lt;code&gt;Step 5 / Base case&lt;/code&gt; ,  the control is returned back to its previous level &lt;code&gt;Step 4&lt;/code&gt; . This level returns the result back to &lt;code&gt;Step 3&lt;/code&gt; which completes its execution and returns to &lt;code&gt;Step 2&lt;/code&gt; , so on and so forth until it reach  &lt;code&gt;Step 1&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;The return control flow would be as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Base case / Step 5] -&amp;gt; [Step 4] -&amp;gt; [Step 3] -&amp;gt; [Step 2] -&amp;gt; [Step 1] -&amp;gt; Result.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This can be summed up using an awesome pictorial representation, from the book &lt;code&gt;Grokking Algorithms&lt;/code&gt; by Adit. Please check out the &lt;code&gt;References&lt;/code&gt; section for the link for more information about this awesome book.&lt;/p&gt;
&lt;p&gt;&lt;img alt="factorial_recursion" src="images/factorial_recursion.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 1: Recursion, Recursive case and Base case (Copyright Manning Publications, drawn by adit.io)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;h3&gt;Example 1:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;factorial&lt;/code&gt; function in a &lt;code&gt;while&lt;/code&gt; loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] def fact(n): factorial = 1 while n &amp;gt; 1: factorial = factorial * n n = n - 1 return factorial&lt;/p&gt;
&lt;p&gt;print("Factorial of {0} is {1}".format(10, fact(10))) print("Factorial of {0} is {1}".format(20, fact(20))) [/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same function above, in a &lt;code&gt;recursive&lt;/code&gt; loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1)&lt;/p&gt;
&lt;p&gt;print("Factorial of {0} is {1}".format(10, factorial(10))) print("Factorial of {0} is {1}".format(20, factorial(20))) [/code]&lt;/p&gt;
&lt;h3&gt;Example 2:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A function to sum numbers in a normal &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] def my_sum(my_list): num = 0 for i in my_list: num += i return num&lt;/p&gt;
&lt;p&gt;print(my_sum([10, 23, 14, 12, 11, 94, 20])) [/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same function to add numbers, in a &lt;code&gt;recursive&lt;/code&gt; loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] def my_sum(my_list): if my_list == []: return 0 else: return my_list[0] + my_sum(my_list[1:])&lt;/p&gt;
&lt;p&gt;print(my_sum([10, 23, 14, 12, 11, 94, 20])) [/code]&lt;/p&gt;
&lt;h2&gt;Code explanation&lt;/h2&gt;
&lt;p&gt;Both &lt;code&gt;Example 1&lt;/code&gt; and &lt;code&gt;Example 2&lt;/code&gt; are represented as an iterative function as well as a recursive function.&lt;/p&gt;
&lt;p&gt;The iterative function calls the &lt;code&gt;next()&lt;/code&gt; function on the iterator &lt;code&gt;sum.__iter__()&lt;/code&gt; magic method iterate over the entire data set. The recursive function calls itself to reach a base case and return the result.&lt;/p&gt;
&lt;h2&gt;Observations:&lt;/h2&gt;
&lt;p&gt;While a recursive function does not necessarily give you an edge on performance, it is much easier to understand and the code is cleaner.&lt;/p&gt;
&lt;p&gt;Recursion has a disadvantage though, for large data sets. Each loop is put on a call stack until it reaches a &lt;code&gt;Base&lt;/code&gt; case. Once the &lt;code&gt;Base&lt;/code&gt; case is met, the call stack is rewound back to reach where it started, executing each of the previous levels on the way. The examples above showed a &lt;code&gt;sum&lt;/code&gt; function and a &lt;code&gt;factorial&lt;/code&gt; function. In large data sets, this can lead to a large call stack which in turns take a lot of memory.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.amazon.in/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1486811444&amp;amp;sr=1-1&amp;amp;keywords=grokking+algorithms"&gt;Grokking Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/812656217X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1487126103&amp;amp;sr=8-1&amp;amp;keywords=data+structures+and+algorithms+in+python"&gt;Data Structures and Algorithms in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Selection Sort - Algorithm Study"</title><link href="https://arvimal.github.io/selection-sort-algorithm-study.html" rel="alternate"></link><published>2017-02-11T00:00:00+01:00</published><updated>2017-02-11T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2017-02-11:/selection-sort-algorithm-study.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"algorithms"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;S&lt;/strong&gt;_election Sort is a sorting algorithm used to sort a data set either in incremental or decremental order.&lt;/p&gt;
&lt;p&gt;It goes through the entire elements one by one and hence it's not a very efficient algorithm to work on large data sets.&lt;/p&gt;
&lt;h2&gt;How …&lt;/h2&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"algorithms"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;S&lt;/strong&gt;_election Sort is a sorting algorithm used to sort a data set either in incremental or decremental order.&lt;/p&gt;
&lt;p&gt;It goes through the entire elements one by one and hence it's not a very efficient algorithm to work on large data sets.&lt;/p&gt;
&lt;h2&gt;How does Selection sort work?&lt;/h2&gt;
&lt;p&gt;Selection sort starts with an unsorted data set. With each iteration, it builds up a sub dataset with the sorted data.&lt;/p&gt;
&lt;p&gt;By the end of the sorting process, the sub dataset contains the entire elements in a sorted order.&lt;/p&gt;
&lt;p&gt;1. Iterate through the data set one element at a time. 2. Find the biggest element in the data set (Append it to another if needed) 3. Reduce the sample space by the biggest element just found. The new data set becomes `n - 1` compared to the previous iteration. 4. Start over the iteration again, on the reduced sample space. 5. Continue till we have a sorted data set, either incremental or decremental&lt;/p&gt;
&lt;h2&gt;How does the data sample change in each iteration?&lt;/h2&gt;
&lt;p&gt;Consider the data set [10, 4, 9, 3, 6, 19, 8]&lt;/p&gt;
&lt;p&gt;[10, 4, 9, 3, 6, 19, 8]      - Data set [10, 4, 9, 3, 6, 8] - [19] - After Iteration 1 [4, 9, 3, 6, 8] - [10, 19] - After Iteration 2 [4, 3, 6, 8] - [9, 10, 19] - After Iteration 3 [4, 3, 6] - [8, 9, 10, 19] - After Iteration 4 [4, 3] - [6, 8, 9, 10, 19] - After Iteration 5 [3] - [4, 6, 8, 9, 10, 19] - After Iteration 6 [3, 4, 6, 8, 9, 10, 19]      - After Iteration 7 - Sorted data set&lt;/p&gt;
&lt;p&gt;Let's check what the Selection Sort algorithm has to go through in each iteration.&lt;/p&gt;
&lt;p&gt;Dataset - [10, 4, 9, 3, 6, 19, 8] Iter 1 - [10, 4, 9, 3, 6, 8] Iter 2 - [4, 9, 3, 6, 8] Iter 3 - [4, 3, 6, 8] Iter 4 - [4, 3, 6] Iter 5 - [4, 3] Iter 6 - [3]&lt;/p&gt;
&lt;p&gt;Sorted Dataset - [3, 4, 6, 8, 9, 10, 19]&lt;/p&gt;
&lt;h2&gt;Performance / Time Complexity&lt;/h2&gt;
&lt;p&gt;Selection Sort has to go through all the elements in the data set, no matter what.&lt;/p&gt;
&lt;p&gt;Hence, the Worst case, Best case and Average Time Complexity would be O(n^2).&lt;/p&gt;
&lt;p&gt;Since `Selection Sort` takes in `n` elements while starting, and goes through the data set `n` times (each step reducing the data set size by 1 member), the iterations would be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;n + [ (n - 1) + (n - 2) + (n - 3) + (n - 4) + ... + 2 + 1 ]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We are more interested in the worse-case scenario. In a very large data set, an `n - 1`, `n - 2` etc.. won't make a difference.&lt;/p&gt;
&lt;p&gt;Hence we can re-write the above iterations as:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;n + [n + n + n + n ..... n]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or also as:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;n * n = (n^2)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;[code language="python"] def find_smallest(my_list): smallest = my_list[0] smallest_index = 0&lt;/p&gt;
&lt;p&gt;for i in range(1, len(my_list)): if my_list[i] &amp;lt; smallest: smallest = my_list[i] smallest_index = i return smallest_index&lt;/p&gt;
&lt;p&gt;def selection_sort(my_list): new_list = [] for i in range(len(my_list)): smallest = find_smallest(my_list) new_list.append(my_list.pop(smallest)) return new_list [/code]&lt;/p&gt;
&lt;h2&gt;Observations:&lt;/h2&gt;
&lt;p&gt;1.Selection Sort is an algorithm to sort a data set, but it is not particularly fast. 2. It takes `n` iterations in each step to find the biggest element in that iteration. 3. The next iteration has to run on a data set of `n - 1` elements compared to the previous iteration. 4. For `n` elements in a sample space, Selection Sort takes `n x n` iterations to sort the data set.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;p&gt;1. &lt;a href="https://en.wikipedia.org/wiki/Selection_sort"&gt;https://en.wikipedia.org/wiki/Selection_sort&lt;/a&gt; 2. &lt;a href="http://bigocheatsheet.com"&gt;http://bigocheatsheet.com&lt;/a&gt; 3. &lt;a href="https://github.com/egonschiele/grokking_algorithms"&gt;https://github.com/egonschiele/grokking_algorithms&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Binary Search - Algorithm Study"</title><link href="https://arvimal.github.io/binary-search-algorithm-study.html" rel="alternate"></link><published>2017-01-16T00:00:00+01:00</published><updated>2017-01-16T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2017-01-16:/binary-search-algorithm-study.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;B&lt;/em&gt;&lt;/strong&gt;inary Search is a search method used to find an object in a data set. This is much faster compared to the Linear Search algorithm we saw in a &lt;a href="https://arvimal.wordpress.com/2017/01/15/linear-search-algorithm-study/"&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This algorithm works on the &lt;code&gt;Divide and Conquer&lt;/code&gt; principle. Binary Search gets its speed …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;B&lt;/em&gt;&lt;/strong&gt;inary Search is a search method used to find an object in a data set. This is much faster compared to the Linear Search algorithm we saw in a &lt;a href="https://arvimal.wordpress.com/2017/01/15/linear-search-algorithm-study/"&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This algorithm works on the &lt;code&gt;Divide and Conquer&lt;/code&gt; principle. Binary Search gets its speed by essentially dividing the list/array in half in each iteration, thus reducing the dataset size for the next iteration.&lt;/p&gt;
&lt;p&gt;Imagine searching for an element in a rather large dataset. Searching for an element one by one using &lt;code&gt;Linear Search&lt;/code&gt; would take &lt;code&gt;n&lt;/code&gt; iterations. In a worst case scenario, if the element being searched is not present in the dataset or is at the end of the dataset, the time taken to find the object/element would be proportional to the size of the dataset.&lt;/p&gt;
&lt;p&gt;The element of interest is returned if it is present in the dataset, else a NULL/None value is.&lt;/p&gt;
&lt;h4&gt;Note:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Binary search will only work effectively on a &lt;em&gt;&lt;strong&gt;Sorted&lt;/strong&gt;&lt;/em&gt; collection.&lt;/li&gt;
&lt;li&gt;The code implementation will need minor changes depending on how the dataset is sorted, ie.. either in an increasing order or in a decreasing order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;h3&gt;1. Worst-case performance: log(n)&lt;/h3&gt;
&lt;p&gt;As discussed in the post on, &lt;code&gt;Linear Search&lt;/code&gt; a worst-case analysis is done with the upper bound of the running time of the algorithm. ie.. the case when the maximum number of operations are needed/executed to find/search the element of interest in the dataset.&lt;/p&gt;
&lt;p&gt;Of course, the worst-case scenario for any search algorithms is when the element of interest is not present in the dataset. The maximum number of searches has to be done in such a case, and it still ends up with no fruitful result. A similar but less worse case is when the element is found in the final (or somewhere near the last) iteration.&lt;/p&gt;
&lt;p&gt;Due to the divide-and-conquer method, the maximum number of iterations needed for a dataset of &lt;code&gt;n&lt;/code&gt; elements is, &lt;code&gt;log(n)&lt;/code&gt; where the log base is &lt;code&gt;2.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hence, for a data set of 10240 elements, Binary Search takes a maximum of &lt;code&gt;13&lt;/code&gt; iterations.&lt;/p&gt;
&lt;p&gt;[code language="python"] In [1]: import math&lt;/p&gt;
&lt;p&gt;In [2]: math.log(10240, 2) Out[2]: 13.321928094887364 [/code] For a data set of 50,000 elements, Binary Search takes &lt;code&gt;16&lt;/code&gt; iterations in the worst case scenario while a Linear Search may take 50,000 iterations in a similar case.&lt;/p&gt;
&lt;p&gt;[code language="python"] In [1]: import math&lt;/p&gt;
&lt;p&gt;In [2]: math.log(50000, 2) Out[2]: 15.609640474436812 [/code] ie.. the Worst case for Binary search takes &lt;code&gt;log(n)&lt;/code&gt; iterations to find the element.&lt;/p&gt;
&lt;h3&gt;2. Best-case performance: O(1)&lt;/h3&gt;
&lt;p&gt;The best case scenario is when the element of interest is found in the first iteration itself. Hence the best-case would be where the search finishes in one iteration.&lt;/p&gt;
&lt;p&gt;ie.. The best-case scenario would be &lt;code&gt;O(1)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How does Binary Search work?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Imagine a sorted dataset of &lt;code&gt;100&lt;/code&gt; numbers and we're searching for  &lt;code&gt;98&lt;/code&gt; is in the list. A simple search would start from index &lt;code&gt;0&lt;/code&gt; , moves to the element at index &lt;code&gt;1&lt;/code&gt;, progresses element by element until the one in interest is found. Since we're searching for &lt;code&gt;98&lt;/code&gt;, it'll take &lt;code&gt;n&lt;/code&gt; iterations depending on the number of elements between the first element in the dataset and &lt;code&gt;98&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Binary Search uses the following method, provided the dataset is sorted.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the length of the data set.&lt;/li&gt;
&lt;li&gt;Find the lowest (index &lt;code&gt;0&lt;/code&gt;), highest (index &lt;code&gt;n&lt;/code&gt;), and the middle index of the dataset.&lt;/li&gt;
&lt;li&gt;Find the subsequent elements residing in the first, last, and middle index.&lt;/li&gt;
&lt;li&gt;Check if the element of interest is the middle element.&lt;/li&gt;
&lt;li&gt;If not, check if the element-of-interest is higher or lower than the middle element.&lt;/li&gt;
&lt;li&gt;If it is higher, assuming the dataset is sorted in an increasing order, move the lower index to one &lt;strong&gt;above&lt;/strong&gt; the middle index.&lt;/li&gt;
&lt;li&gt;if it is lower, move the highest index to one &lt;strong&gt;below&lt;/strong&gt; the middle index.&lt;/li&gt;
&lt;li&gt;Check if the element of interest is the middle element in the new/shorter dataset.&lt;/li&gt;
&lt;li&gt;Continue till the element of interest is found.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id="attachment_2310" align="alignnone" width="1280"]&lt;img alt="binary_search_depiction-svg" src="images/binary_search_depiction-svg.png"&gt; Binary Search - Source: Wikipedia[/caption]&lt;/p&gt;
&lt;p&gt;The figure above shows how Binary Search works on a dataset of 16 elements, to find the element &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index &lt;code&gt;0&lt;/code&gt; , Index &lt;code&gt;16&lt;/code&gt;, and the middle index are noted.&lt;/li&gt;
&lt;li&gt;Subsequent values/elements at these indices are found out as well.&lt;/li&gt;
&lt;li&gt;Check if the element of interest &lt;code&gt;7&lt;/code&gt; is equal to, lower, or higher than the middle element &lt;code&gt;14&lt;/code&gt; at index &lt;code&gt;8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since it's lower and the dataset is sorted in an increasing order, the search moves to the left of the middle index, ie.. from index &lt;code&gt;0&lt;/code&gt; to index &lt;code&gt;7&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;----&lt;/li&gt;
&lt;li&gt;The lower index is now &lt;code&gt;0&lt;/code&gt;, the higher index is now &lt;code&gt;7&lt;/code&gt;, and the middle index is now &lt;code&gt;3&lt;/code&gt;, the element in the middle index is &lt;code&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Check if the element of interest &lt;code&gt;7&lt;/code&gt; is lower or higher than the middle element &lt;code&gt;6&lt;/code&gt; at index &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since it's higher and the dataset is sorted in an increasing order, the search moves to the right of the middle index, ie.. from index &lt;code&gt;4&lt;/code&gt; to index 7.&lt;/li&gt;
&lt;li&gt;----&lt;/li&gt;
&lt;li&gt;So on and so forth.. till we arrive at the element of interest, ie.. &lt;code&gt;7&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As noted earlier, the data set is divided into half in each iteration. A numeric representation on how Binary search progress can be seen as:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;100 elements -&amp;gt; 50 elements -&amp;gt; 25 elements -&amp;gt; 12 elements -&amp;gt; 6 elements - 3 elements -&amp;gt; 1 element&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;h3&gt;Example 1 : (Data set sorted in Increasing order)&lt;/h3&gt;
&lt;p&gt;[code language="python"] def binary_search(my_list, item): low_position = 0 high_position = len(my_list) - 1&lt;/p&gt;
&lt;p&gt;while low_position = high_position: mid_position = (low_position + high_position) // 2 mid_element = my_list[mid_position]&lt;/p&gt;
&lt;p&gt;if mid_element == item: print("\nYour search item {0} is at index {1}".format( item, mid_position)) return mid_element&lt;/p&gt;
&lt;p&gt;elif mid_element &amp;lt;= item: high_position = mid_position - 1&lt;/p&gt;
&lt;p&gt;else: low_position = mid_position + 1 return None&lt;/p&gt;
&lt;p&gt;if __name__ == "__main__": my_list = [1, 2, 3, 4, 5, 6] binary_search(my_list, 3) [/code]&lt;/p&gt;
&lt;h3&gt;Example 2 : (Same as above, with statements on how the search progresses)&lt;/h3&gt;
&lt;p&gt;[code language="python"] def binary_search(my_list, item):&lt;/p&gt;
&lt;p&gt;# Find and set the low and high positions of the data set # Note that these are not the values, but just positions. low_position = 0 high_position = len(my_list) - 1&lt;/p&gt;
&lt;p&gt;# Calculate the Complexity import math complexity = math.ceil(math.log(len(my_list), 2))&lt;/p&gt;
&lt;p&gt;# Print some info on the dataset print("\nDataset size : {0} elements".format(len(my_list))) print("Element of interest : {0}".format(item)) print("Maximum number of iterations to find {0} : {1}\n".format( item, complexity))&lt;/p&gt;
&lt;p&gt;while low_position &amp;lt;= high_position:&lt;/p&gt;
&lt;p&gt;# Find the middle position from the low and high positions mid_position = (low_position + high_position) // 2&lt;/p&gt;
&lt;p&gt;# Find the element residing in the middle position of the data set. mid_element = my_list[mid_position]&lt;/p&gt;
&lt;p&gt;print("Element at min index : {0}".format(my_list[low_position])) print("Element at max index : {1}".format(high_position, my_list[high_position])) print("Element at mid index {0} : {1}".format(mid_position, mid_element))&lt;/p&gt;
&lt;p&gt;if mid_element == item: print("\nYour search item {0} is at index {1}".format( item, mid_position)) return mid_element&lt;/p&gt;
&lt;p&gt;elif mid_element &amp;gt; item: high_position = mid_position - 1 print("{0} in the left subset, omitting the right subset\n".format(item))&lt;/p&gt;
&lt;p&gt;else: low_position = mid_position + 1 print("{0} in the right subset, omitting the left subset\n".format(item))&lt;/p&gt;
&lt;p&gt;print("Element of interest not in dataset\n") return None&lt;/p&gt;
&lt;p&gt;if __name__ == "__main__": my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] binary_search(my_list, 13) [/code]&lt;/p&gt;
&lt;h3&gt;Observations:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Binary Search needs a Sorted dataset to work, either increasing or decreasing.&lt;/li&gt;
&lt;li&gt;It finds the element of interest in logarithmic time, hence is also known as, &lt;code&gt;Logarithmic Search&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Binary Search searches through a dataset of &lt;code&gt;n&lt;/code&gt; elements in &lt;code&gt;log(n)&lt;/code&gt; iterations, in the worst case scenario.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;NOTE:&lt;/h3&gt;
&lt;p&gt;All the examples used in this blog are available at  &lt;a href="https://github.com/arvimal/DataStructures-and-Algorithms-in-Python"&gt;https://github.com/arvimal/DataStructures-and-Algorithms-in-Python&lt;/a&gt;, with more detailed notes.&lt;/p&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;https://en.wikipedia.org/wiki/Binary_search_algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://quiz.geeksforgeeks.org/binary-search/"&gt;http://quiz.geeksforgeeks.org/binary-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerearth.com/practice/algorithms/searching/binary-search/tutorial/"&gt;https://www.hackerearth.com/practice/algorithms/searching/binary-search/tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://research.cs.queensu.ca/home/cisc121/2006s/webnotes/search.html"&gt;http://research.cs.queensu.ca/home/cisc121/2006s/webnotes/search.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Linear Search - Algorithm Study"</title><link href="https://arvimal.github.io/linear-search-algorithm-study.html" rel="alternate"></link><published>2017-01-15T00:00:00+01:00</published><updated>2017-01-15T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2017-01-15:/linear-search-algorithm-study.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;_&lt;strong&gt;L&lt;/strong&gt;_inear Search is an way to search a data set for an element of interest. It is one of the many search algorithms available and is also the most direct and simple of the lot.&lt;/p&gt;
&lt;p&gt;Linear search looks for the element of interest in …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;_&lt;strong&gt;L&lt;/strong&gt;_inear Search is an way to search a data set for an element of interest. It is one of the many search algorithms available and is also the most direct and simple of the lot.&lt;/p&gt;
&lt;p&gt;Linear search looks for the element of interest in a dataset starting from the first element and moves on to the consecutive elements till it finds the one we're interested in. Due to this behaviour, it's not the fastest search algorithm around.&lt;/p&gt;
&lt;p&gt;In the worst case, when the element of interest is the last (or near-last) in the data set, linear-search has to sift through till the end. Hence, in a worst-case scenario, the larger the data set is, the more the iterations it take to find the element of interest. Hence, the performance of Linear search takes a toll as the data set grows.&lt;/p&gt;
&lt;p&gt;Linear search works on sorted and unsorted data sets equally, since it has to go through the elements one by one and so doesn't mind if the data is ordered or not.&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;h3&gt;1. Worst-case performance: O(n)&lt;/h3&gt;
&lt;p&gt;A worst-case analysis is done with the upper bound of the running time of the algorithm. ie.. the case when the maximum number of operations are executed.&lt;/p&gt;
&lt;p&gt;The worst-case scenario for a linear search happens when the element-of-interest is not present in the dataset. A near worst-case scenario is when the element-of-interest is the last element of the dataset. In the first case, the search has to go through each element only to find that the element is not present in the dataset. In the second scenario, the search has to be done till the last element, which still takes &lt;code&gt;n&lt;/code&gt; iterations.&lt;/p&gt;
&lt;p&gt;In the worst-case, the performance is O(n), where  &lt;code&gt;n&lt;/code&gt;  is the number of elements in the dataset.&lt;/p&gt;
&lt;h3&gt;2. Best-case performance: O(1)&lt;/h3&gt;
&lt;p&gt;In the best-case, where the element-of-interest is the first element in the dataset, only one search/lookup is needed. Hence the performance is denoted as &lt;code&gt;O(1)&lt;/code&gt;, for &lt;code&gt;n&lt;/code&gt; elements.&lt;/p&gt;
&lt;h3&gt;3. Average performance: O(n/2)&lt;/h3&gt;
&lt;p&gt;On an average, the performance can be denoted as &lt;code&gt;O(n/2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Observations:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linear Search iterates through every element in the dataset until it finds the match.&lt;/li&gt;
&lt;li&gt;In Linear Search, the number of iterations grows linearly if the data set grows in size.&lt;/li&gt;
&lt;li&gt;This algorithm is called  &lt;code&gt;Linear Search&lt;/code&gt;  due to this linear increase in the complexity depending on the dataset.&lt;/li&gt;
&lt;li&gt;The best case scenario is when the first iteration finds the element.&lt;/li&gt;
&lt;li&gt;The Worst case is when the element of interest is not present in the dataset.&lt;/li&gt;
&lt;li&gt;A very near worse case is when the element of interest is the last one in the dataset.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How does Linear Search work?&lt;/h2&gt;
&lt;p&gt;Linear search progresses as following:&lt;/p&gt;
&lt;p&gt;1. Takes in a dataset as well as an element of interest. 2. Checks if the first element is the element of interest. 3. If yes, returns the element. 4. If not, move to the next element in the dataset. 5. Iterate till the dataset is exhausted. 6. Return  &lt;code&gt;None&lt;/code&gt; if the element of interest is not present in the dataset.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;[code language="python"] def linear_search(my_list, item): """Linear search"""&lt;/p&gt;
&lt;p&gt;low_position = 0 high_position = len(my_list) - 1&lt;/p&gt;
&lt;p&gt;while low_position &amp;lt; high_position:&lt;/p&gt;
&lt;p&gt;if my_list[low_position] == item: print("Your search item {0} is at position {1}".format( item, low_position)) return low_position else: low_position += 1&lt;/p&gt;
&lt;p&gt;if __name__ == "__main__": my_list = [1, 2, 3, 4, 5, 6] linear_search(my_list, 5) [/code]&lt;/p&gt;
&lt;h3&gt;Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://quiz.geeksforgeeks.org/linear-search/"&gt;http://quiz.geeksforgeeks.org/linear-search/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://research.cs.queensu.ca/home/cisc121/2006s/webnotes/search.html"&gt;http://research.cs.queensu.ca/home/cisc121/2006s/webnotes/search.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Accessor and Mutator methods - Python"</title><link href="https://arvimal.github.io/accessor-and-mutator-methods-python.html" rel="alternate"></link><published>2016-12-18T00:00:00+01:00</published><updated>2016-12-18T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-12-18:/accessor-and-mutator-methods-python.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt; method defined within a class can either be an Accessor or a Mutator method.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;Accessor&lt;/code&gt; method returns the information about the object, but do not change the state or the object.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Mutator&lt;/code&gt; method, also called an &lt;code&gt;Update&lt;/code&gt; method, can change the state …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt; method defined within a class can either be an Accessor or a Mutator method.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;Accessor&lt;/code&gt; method returns the information about the object, but do not change the state or the object.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Mutator&lt;/code&gt; method, also called an &lt;code&gt;Update&lt;/code&gt; method, can change the state of the object.&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;p&gt;[code language="python"] In [10]: a = [1,2,3,4,5]&lt;/p&gt;
&lt;p&gt;In [11]: a.count(1) Out[11]: 1&lt;/p&gt;
&lt;p&gt;In [12]: a.index(2) Out[12]: 1&lt;/p&gt;
&lt;p&gt;In [13]: a Out[13]: [1, 2, 3, 4, 5]&lt;/p&gt;
&lt;p&gt;In [14]: a.append(6)&lt;/p&gt;
&lt;p&gt;In [15]: a Out[15]: [1, 2, 3, 4, 5, 6] [/code]&lt;/p&gt;
&lt;p&gt;The methods &lt;code&gt;a.count()&lt;/code&gt; and &lt;code&gt;a.index()&lt;/code&gt; are both &lt;code&gt;Accessor&lt;/code&gt; methods since it doesn't alter the object &lt;code&gt;a&lt;/code&gt; in any sense, but only pulls the relevant information.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;a.append()&lt;/code&gt; is a mutator method, since it effectively changes the object (list &lt;code&gt;a&lt;/code&gt;) to a new one.&lt;/p&gt;
&lt;p&gt;In short, knowing the behavior of a method is helpful to understand how it alters the objects it acts upon.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Python, Objects, and some more.."</title><link href="https://arvimal.github.io/python-objects-and-some-more.html" rel="alternate"></link><published>2016-10-20T00:00:00+02:00</published><updated>2016-10-20T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-10-20:/python-objects-and-some-more.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"namespace"&lt;/li&gt;
&lt;li&gt;"objects"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python-namespace"&lt;/li&gt;
&lt;li&gt;"python-objects"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;E&lt;/strong&gt;_verything in Python is an object, what does that mean? This post tries to discuss some very basic concepts.&lt;/p&gt;
&lt;p&gt;What does the following assignment do?&lt;/p&gt;
&lt;p&gt;[code language="python"]&lt;/p&gt;
&lt;p&gt;a = 1 [/code] Of course, anyone dabbled in code knows this. The …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"namespace"&lt;/li&gt;
&lt;li&gt;"objects"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python-namespace"&lt;/li&gt;
&lt;li&gt;"python-objects"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;E&lt;/strong&gt;_verything in Python is an object, what does that mean? This post tries to discuss some very basic concepts.&lt;/p&gt;
&lt;p&gt;What does the following assignment do?&lt;/p&gt;
&lt;p&gt;[code language="python"]&lt;/p&gt;
&lt;p&gt;a = 1 [/code] Of course, anyone dabbled in code knows this. The statement above creates a container `a` and stores the value `1` in it.&lt;/p&gt;
&lt;p&gt;But it seem that's not exactly what's happening, at least from Python's view-point.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;a = 1&lt;/code&gt; is entered or executed by the python interpreter, the following happens in the backend, seemingly unknown to the user.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Python interpreter evaluates the literal &lt;code&gt;1&lt;/code&gt; and tries to understand what data type can be assigned for it.&lt;ul&gt;
&lt;li&gt;There are several in-built data types such as &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; etc..&lt;/li&gt;
&lt;li&gt;Builtin types are &lt;strong&gt;classes&lt;/strong&gt; implemented in the python core.&lt;/li&gt;
&lt;li&gt;For a full list of types and explanation, read the python help at &lt;code&gt;python&lt;/code&gt;-&amp;gt; &lt;code&gt;help()&lt;/code&gt;-&amp;gt; &lt;code&gt;topics&lt;/code&gt; -&amp;gt; &lt;code&gt;TYPES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read the help sections for builtin types, eg.. &lt;code&gt;help(int)&lt;/code&gt;, &lt;code&gt;help(list)&lt;/code&gt; etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The interpreter finds the appropriate builtin type for the literal. Since the literal &lt;code&gt;1&lt;/code&gt; fits the type &lt;code&gt;int&lt;/code&gt;, the interpreter creates an instance from &lt;code&gt;class int()&lt;/code&gt; in memory.&lt;ul&gt;
&lt;li&gt;This instance is called an &lt;code&gt;object&lt;/code&gt; since it's just a &lt;code&gt;blob&lt;/code&gt; with some metadata.&lt;/li&gt;
&lt;li&gt;This object has a memory address, a value, a name in one or more namespace, some metadata etc..&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type(a)&lt;/code&gt; helps in understanding the instance type.&lt;/li&gt;
&lt;li&gt;In short, an assignment statement simply creates an instance in memory from a pre-defined class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The interpreter reads the LHS (Left hand side) of the statement &lt;code&gt;a = 1&lt;/code&gt;, and creates the name &lt;code&gt;a&lt;/code&gt; in the current namespace.&lt;ul&gt;
&lt;li&gt;The name in the namespace is a reference to the object in memory.&lt;/li&gt;
&lt;li&gt;Through this reference, we can access the data portion as well as the attributes of that object.&lt;/li&gt;
&lt;li&gt;A single object can have multiple names (references).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The name &lt;code&gt;a&lt;/code&gt; created in the current namespace is linked to the corresponding object in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a name that's already defined is entered at the python prompt, the interpreter reads the namespace, finds the name (reference), goes to the memory location it's referring to, and pull the value of the object, and prints it on-screen.&lt;/p&gt;
&lt;h4&gt;Every object has the following features:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A single value, available in its data section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] In [1]: a = 1&lt;/p&gt;
&lt;p&gt;In [2]: a Out[2]: 1 [/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single type, since the object is an instance of a pre-defined type class such as &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] In [3]: type(a) Out[3]: int [/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attributes either inherited from the parent type class or defined by the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] In [10]: dir(a) Out[10]: ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', ...[content omitted] '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] [/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One or more base classes. All &lt;a href="https://www.python.org/doc/newstyle/"&gt;new-stlye classes&lt;/a&gt; in Python ultimately inherits from the &lt;code&gt;object&lt;/code&gt; class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] In [4]: type(a) Out[4]: int&lt;/p&gt;
&lt;p&gt;In [5]: int.mro() Out[5]: [int, object] [/code]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;a&lt;/code&gt; is an instance of the &lt;code&gt;int&lt;/code&gt; class, and &lt;code&gt;int&lt;/code&gt; inturn inherits from the &lt;code&gt;object&lt;/code&gt; class. Read more on &lt;a href="https://arvimal.wordpress.com/2016/05/30/method-resolution-order-object-oriented-programming/"&gt;Method Resolution Order&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;A unique ID representing the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] In [6]: id(a) Out[6]: 140090033476640 [/code]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zero, One, or more names.&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;dir()&lt;/code&gt; to check the current namespace.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;dir(&amp;lt;object-name&amp;gt;)&lt;/code&gt; to refer the indirect namespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Several other builtins are available in the default namespace without defining them specifically, possible due to the inclusion of the &lt;code&gt;builtin&lt;/code&gt; module available under the reference &lt;code&gt;__builtin__&lt;/code&gt; in the current namespace.&lt;/p&gt;
&lt;p&gt;For a full list of the pre-defined variables, refer &lt;code&gt;dir(__builtins__)&lt;/code&gt;, &lt;code&gt;help(__builtin__)&lt;/code&gt; or &lt;code&gt;help(builtins)&lt;/code&gt; after an &lt;code&gt;import builtins&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;A few questions and observations:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Q1.&lt;/strong&gt; How can an assignment have zero names in the namespace?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ans&lt;/strong&gt;: An assignment such as &lt;code&gt;a = 1&lt;/code&gt; creates an object in memory and creates a corresponding name (&lt;code&gt;a&lt;/code&gt; in our case) in the namespace. &lt;code&gt;a&lt;/code&gt; acts as a reference to the object in memory.&lt;/p&gt;
&lt;p&gt;But, simply entering &lt;code&gt;1&lt;/code&gt; at the python prompt creates an object in memory which is an instance of a type class, without creating the reference in the namespace.&lt;/p&gt;
&lt;p&gt;Objects which don't have a reference from the current namespace are usually garbage-collected due to lack of references. Hence, an object which doesn't have a reference (a name), or had multiple references (more than one names) but had them deleted (for example, &lt;code&gt;del()&lt;/code&gt; gets garbage-collected by python.&lt;/p&gt;
&lt;p&gt;If the assignment &lt;code&gt;1&lt;/code&gt; happens to be at a python prompt, it echoes the literal back after creating the object and reference since the prompt is essentially a &lt;code&gt;REPL&lt;/code&gt; (Read Eval Print loop)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2.&lt;/strong&gt; Can an object have more than one name references?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ans:&lt;/strong&gt; It's perfectly fine to have more than one reference to a single object. The example below should explain things very well.&lt;/p&gt;
&lt;p&gt;[code language="python"] In [1]: a = 5000&lt;/p&gt;
&lt;p&gt;In [2]: id(a) Out[2]: 140441367080400&lt;/p&gt;
&lt;p&gt;In [3]: b = a&lt;/p&gt;
&lt;p&gt;In [4]: b Out[4]: 5000&lt;/p&gt;
&lt;p&gt;In [5]: id(b) Out[5]: 140441367080400&lt;/p&gt;
&lt;p&gt;In [6]: c = 5000&lt;/p&gt;
&lt;p&gt;In [7]: id(c) Out[7]: 140441367080432&lt;/p&gt;
&lt;p&gt;In [8]: a is b Out[8]: True&lt;/p&gt;
&lt;p&gt;In [9]: a == b Out[9]: True&lt;/p&gt;
&lt;p&gt;In [10]: a is c Out[10]: False&lt;/p&gt;
&lt;p&gt;In [11]: a == c Out[11]: True [/code]&lt;/p&gt;
&lt;p&gt;The example shown above creates an object with value &lt;code&gt;5000&lt;/code&gt; and assign it a name &lt;code&gt;a&lt;/code&gt; in the current namespace. We checked the identifier of the object using &lt;code&gt;id(a)&lt;/code&gt; and found out it to be &lt;code&gt;140441367080400&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As the next step, we created another name in the namespace, ie.. &lt;code&gt;b&lt;/code&gt; which takes in whatever &lt;code&gt;a&lt;/code&gt; points to. Hence, &lt;code&gt;b&lt;/code&gt; would default to &lt;code&gt;5000&lt;/code&gt; and it will have the same identifier as &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This shows that an object in memory can have multiple references in a namespace.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Another object of value &lt;code&gt;5000&lt;/code&gt; is created with a name &lt;code&gt;c&lt;/code&gt; , but we can see that the identifier differs from what &lt;code&gt;id(a)&lt;/code&gt; and &lt;code&gt;id(b)&lt;/code&gt; is. This shows that &lt;code&gt;c&lt;/code&gt; points to an entirely different object in memory.&lt;/p&gt;
&lt;p&gt;To test if &lt;code&gt;a&lt;/code&gt; is exactly the same object as &lt;code&gt;b&lt;/code&gt;, use the keyword &lt;code&gt;is&lt;/code&gt;. Meanwhile, if you want to test if two objects contain the same value, use the equality &lt;code&gt;==&lt;/code&gt; symbol.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Max file-name length in an EXT4 file system."</title><link href="https://arvimal.github.io/max-file-name-length-in-an-ext4-file-system.html" rel="alternate"></link><published>2016-07-21T00:00:00+02:00</published><updated>2016-07-21T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-07-21:/max-file-name-length-in-an-ext4-file-system.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"dentry"&lt;/li&gt;
&lt;li&gt;"directory-entry-structure"&lt;/li&gt;
&lt;li&gt;"ext4"&lt;/li&gt;
&lt;li&gt;"ext4_dir_entry"&lt;/li&gt;
&lt;li&gt;"ext4_dir_entry_2"&lt;/li&gt;
&lt;li&gt;"file-systems"&lt;/li&gt;
&lt;li&gt;"filesystem"&lt;/li&gt;
&lt;li&gt;"name_len"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt; recent discussion at work brought up the question "What can be the length of a file name in EXT4". Or in other words, what would be the maximum character length of the name for a file in EXT4?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_file_systems"&gt;Wikipedia …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"dentry"&lt;/li&gt;
&lt;li&gt;"directory-entry-structure"&lt;/li&gt;
&lt;li&gt;"ext4"&lt;/li&gt;
&lt;li&gt;"ext4_dir_entry"&lt;/li&gt;
&lt;li&gt;"ext4_dir_entry_2"&lt;/li&gt;
&lt;li&gt;"file-systems"&lt;/li&gt;
&lt;li&gt;"filesystem"&lt;/li&gt;
&lt;li&gt;"name_len"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt; recent discussion at work brought up the question "What can be the length of a file name in EXT4". Or in other words, what would be the maximum character length of the name for a file in EXT4?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_file_systems"&gt;Wikipedia&lt;/a&gt; states that it's &lt;em&gt;&lt;strong&gt;255 Bytes&lt;/strong&gt;&lt;/em&gt;, but how does that come to be? Is it 255 Bytes or 255 characters?&lt;/p&gt;
&lt;p&gt;In the kernel source for the 2.6 kernel series (the question was for a RHEL6/EXT4 combination), in  &lt;a href="https://access.redhat.com/labs/psb/versions/kernel-2.6.32-573.el6/fs/ext4/ext4.h"&gt;fs/ext4/ext4.h&lt;/a&gt;, we'd be able to see the following:&lt;/p&gt;
&lt;p&gt;[code language="c"]&lt;/p&gt;
&lt;h1&gt;define EXT4_NAME_LEN 255&lt;/h1&gt;
&lt;p&gt;struct ext4_dir_entry { __le32 inode; /* Inode number */ __le16 rec_len; /* Directory entry length */ __le16 name_len; /* Name length */ char name[EXT4_NAME_LEN]; /* File name */ };&lt;/p&gt;
&lt;p&gt;/* * The new version of the directory entry. Since EXT4 structures are * stored in intel byte order, and the name_len field could never be * bigger than 255 chars, it's safe to reclaim the extra byte for the * file_type field. */&lt;/p&gt;
&lt;p&gt;struct ext4_dir_entry_2 { __le32 inode; /* Inode number */ __le16 rec_len; /* Directory entry length */ __u8 name_len; /* Name length */ __u8 file_type; char name[EXT4_NAME_LEN]; /* File name */ }; [/code] This shows that there are two versions of the directory entry structure, ie.. &lt;code&gt;ext4_dir_entry&lt;/code&gt; and &lt;code&gt;ext4_dir_entry_2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A directory entry structure carries the file/folder name and the corresponding inode number under every directory.&lt;/p&gt;
&lt;p&gt;Both structs use an element named &lt;code&gt;name_len&lt;/code&gt; to denote the length of the file/folder name.&lt;/p&gt;
&lt;p&gt;If the EXT filesystem feature &lt;code&gt;filetype&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; set, the directory entry structure falls to the first method &lt;code&gt;ext4_dir_entry&lt;/code&gt;, else it's the second, ie.. &lt;code&gt;ext4_dir_entry_2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, the file system feature &lt;code&gt;filetype&lt;/code&gt; is set, hence the directory entry structure is &lt;code&gt;ext4_dir_entry_2&lt;/code&gt; . As seen above, in this case, the &lt;code&gt;name_len&lt;/code&gt; field is set to 8 bits.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__u8&lt;/code&gt; represents an unsigned 8-bit integer in C, and can store values from 0 to 255.&lt;/p&gt;
&lt;p&gt;ie.. &lt;em&gt;&lt;strong&gt;2^8 = 255 (0 t0 255 == 256)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ext4_dir_entry&lt;/code&gt; has a &lt;code&gt;name_len&lt;/code&gt; of &lt;code&gt;__le16&lt;/code&gt;, but it seems that the file-name length can only go to a max of 256.&lt;/p&gt;
&lt;h3&gt;Observations:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The maximum name length is 255 characters on Linux machines.&lt;/li&gt;
&lt;li&gt;The actual name length of a file/folder is stored in &lt;code&gt;name_len&lt;/code&gt; in each directory entry, under its parent folder. So if the file name length is 5 characters, 5 would be the value set for &lt;code&gt;name_len&lt;/code&gt; for that particular file. ie.. the actual length.&lt;/li&gt;
&lt;li&gt;A character will consume a byte of storage, so the number of characters in a file name will map to the respective number bytes. If so, a file with a &lt;code&gt;name_len&lt;/code&gt; of 5 will be using 5 bytes of memory to store the name.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hence, &lt;code&gt;name_len&lt;/code&gt; denotes the &lt;strong&gt;number&lt;/strong&gt; of characters that a file can have. Since U8 is 8-bits, &lt;code&gt;name_len&lt;/code&gt; can store a file name with upto 255 chars.&lt;/p&gt;
&lt;p&gt;Now the actual memory being consumed for storing these characters &lt;strong&gt;is not&lt;/strong&gt; denoted by &lt;code&gt;name_len&lt;/code&gt;. Since the size of a character translates to a byte, the maximum size wrt memory that a file name can have is 255 Bytes.&lt;/p&gt;
&lt;h3&gt;NOTE:&lt;/h3&gt;
&lt;p&gt;The initial dir entry structure &lt;code&gt;ext4_dir_entry&lt;/code&gt; had &lt;code&gt;__le16&lt;/code&gt; for &lt;code&gt;name_len&lt;/code&gt;, it was later re-sized to &lt;code&gt;__u8&lt;/code&gt; in &lt;code&gt;ext4_dir_entry_2&lt;/code&gt; , by culling 8 bits from the existing 16 bits of &lt;code&gt;name_len&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The remaining free space culled from &lt;code&gt;name_len&lt;/code&gt; was assigned to store the file type, in &lt;code&gt;ext4_dir_entry_2&lt;/code&gt;. It was named &lt;code&gt;file_type&lt;/code&gt; with size &lt;code&gt;__u8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file_type&lt;/code&gt; helps to identity the file types such as regular files, sockets, character devices, block devices etc..&lt;/p&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://access.redhat.com/labs/psb/versions/kernel-2.6.32-573.el6/fs/ext4/ext4.h"&gt;RHEL6 kernel-2.6.32-573.el6 EXT4 header file (ext4.h)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout"&gt;EXT4 Wiki - Disk layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs"&gt;http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Inheritance and super() - Object Oriented Programming"</title><link href="https://arvimal.github.io/inheritance-and-super-object-oriented-programming.html" rel="alternate"></link><published>2016-07-01T00:00:00+02:00</published><updated>2016-07-01T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-07-01:/inheritance-and-super-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"inheritance"&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"super"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;s&lt;/strong&gt;_uper() is a feature through which inherited methods can be accessed, which has been overridden in a class. It can also help with the MRO lookup order in case of multiple inheritance. This may not be obvious first, but a few …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"inheritance"&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"super"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;s&lt;/strong&gt;_uper() is a feature through which inherited methods can be accessed, which has been overridden in a class. It can also help with the MRO lookup order in case of multiple inheritance. This may not be obvious first, but a few examples should help to drive the point home.&lt;/p&gt;
&lt;p&gt;Inheritance and method overloading was discussed in a previous &lt;a href="https://arvimal.wordpress.com/2016/06/29/inheritance-and-method-overloading-object-oriented-programming/"&gt;post&lt;/a&gt;, where we saw how inherited methods can be overloaded or enhanced in the child classes.&lt;/p&gt;
&lt;p&gt;In many scenarios, it's needed to overload an inherited method, but also call the actual method defined in the Parent class.&lt;/p&gt;
&lt;p&gt;Let's start off with a simple example based on Inheritance, and build from there.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm being called from the Parent class!")&lt;/p&gt;
&lt;p&gt;class ChildClass(MyClass): pass&lt;/p&gt;
&lt;p&gt;my_instance_1 = ChildClass() my_instance_1.func() [/code] This outputs:&lt;/p&gt;
&lt;p&gt;[code language="python"] In [18]: %run /tmp/super-1.py I'm being called from the Parent class [/code] In &lt;em&gt;&lt;strong&gt;Example 0&lt;/strong&gt;&lt;/em&gt;, we have two classes, &lt;code&gt;MyClass&lt;/code&gt; and &lt;code&gt;ChildClass&lt;/code&gt;. The latter inherits from the former, and the parent class &lt;code&gt;MyClass&lt;/code&gt; has a method named &lt;code&gt;func&lt;/code&gt; defined.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;ChildClass&lt;/code&gt; inherits from &lt;code&gt;MyClass&lt;/code&gt;, the child class has access to the methods defined in the parent class. An instance is created &lt;code&gt;my_instance_2&lt;/code&gt;, for &lt;code&gt;ChildClass.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;my_instance_1.func()&lt;/code&gt; will print the statement from the Parent class, due to the inheritance.&lt;/p&gt;
&lt;p&gt;Building up on the first example:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm being called from the Parent class")&lt;/p&gt;
&lt;p&gt;class ChildClass(MyClass):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm being called from the Child class")&lt;/p&gt;
&lt;p&gt;my_instance_1 = MyClass() my_instance_2 = ChildClass()&lt;/p&gt;
&lt;p&gt;my_instance_1.func() my_instance_2.func() [/code] This outputs:&lt;/p&gt;
&lt;p&gt;[code language="python"] In [19]: %run /tmp/super-1.py I'm being called from the Parent class I'm being called from the Child class [/code] This example has a slight difference, both the child class as well as the parent class have the same method defined, ie.. &lt;code&gt;func&lt;/code&gt;. In this scenario, the parent class' method is overridden by the child class method.&lt;/p&gt;
&lt;p&gt;ie.. if we call the &lt;code&gt;func()&lt;/code&gt; method from the instance of &lt;code&gt;ChildClass&lt;/code&gt;, it need not go a fetch the method from its Parent class, since it's already defined locally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: This is due to the Method Resolution Order, discussed in an earlier &lt;a href="https://arvimal.wordpress.com/2016/05/30/method-resolution-order-object-oriented-programming/"&gt;post&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But what if there is a scenario that warranties the need for specifically calling methods defined in the Parent class, from the instance of a child class?&lt;/p&gt;
&lt;p&gt;ie.. How to call the methods defined in the Parent class, through the instance of the Child class, even if the Parent class method is overloaded in the Child class?&lt;/p&gt;
&lt;p&gt;In such a case, the inbuilt function &lt;code&gt;super()&lt;/code&gt; can be used. Let's add to the previous example.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm being called from the Parent class")&lt;/p&gt;
&lt;p&gt;class ChildClass(MyClass):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm actually being called from the Child class") print("But...") # Calling the `func()` method from the Parent class. super(ChildClass, self).func()&lt;/p&gt;
&lt;p&gt;my_instance_2 = ChildClass() my_instance_2.func() [/code] This outputs:&lt;/p&gt;
&lt;p&gt;[code language="python"] In [21]: %run /tmp/super-1.py I'm actually being called from the Child class But... I'm being called from the Parent class [/code]&lt;/p&gt;
&lt;h3&gt;How is the code structured?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We have two classes &lt;code&gt;MyClass&lt;/code&gt; and &lt;code&gt;ChildClass&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The latter is inheriting from the former.&lt;/li&gt;
&lt;li&gt;Both classes have a method named &lt;code&gt;func&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The child class &lt;code&gt;ChildClass&lt;/code&gt; is instantiated as &lt;code&gt;my_instance_2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;func&lt;/code&gt; method is called from the instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;How does the code work?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;When the &lt;code&gt;func&lt;/code&gt; method is called, the interpreter searches it using the Method Resolution Order, and find the method defined in the class &lt;code&gt;ChildClass&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since it finds the method in the child class, it executes it, and prints the string "I'm actually being called from the Child class", as well "But..."&lt;/li&gt;
&lt;li&gt;The next statement is &lt;code&gt;super&lt;/code&gt; which calls the method &lt;code&gt;func&lt;/code&gt; defined in the parent class of &lt;code&gt;ChildClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since the control is now passed onto the &lt;code&gt;func&lt;/code&gt; method in the Parent class via &lt;code&gt;super&lt;/code&gt;, the corresponding &lt;code&gt;print()&lt;/code&gt; statement is printed to stdout.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example 2 can also be re-written as :&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm being called from the Parent class")&lt;/p&gt;
&lt;p&gt;class ChildClass(MyClass):&lt;/p&gt;
&lt;p&gt;def func(self): print("I'm actually being called from the Child class") print("But...") # Calling the `func()` method from the Parent class. # super(ChildClass, self).func() MyClass.func(self) # Call the method directly via Parent class&lt;/p&gt;
&lt;p&gt;my_instance_2 = ChildClass() my_instance_2.func() [/code]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The example above uses the Parent class directly to access it's method. Even though it works, it is not the best way to do it since the code is tied to the Parent class name. If the Parent class name changes, the child/sub class code has to be changed as well.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's see another example for  &lt;code&gt;super()&lt;/code&gt; . This is from our previous article on &lt;a href="https://arvimal.wordpress.com/2016/06/29/inheritance-and-method-overloading-object-oriented-programming/"&gt;Inheritance and method overloading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] import abc&lt;/p&gt;
&lt;p&gt;class MyClass(object):&lt;/p&gt;
&lt;p&gt;__metaclass__ = abc.ABCMeta&lt;/p&gt;
&lt;p&gt;def my_set_val(self, value): self.value = value&lt;/p&gt;
&lt;p&gt;def my_get_val(self): return self.value&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def print_doc(self): return&lt;/p&gt;
&lt;p&gt;class MyChildClass(MyClass):&lt;/p&gt;
&lt;p&gt;def my_set_val(self, value): if not isinstance(value, int): value = 0 super(MyChildClass, self).my_set_val(self)&lt;/p&gt;
&lt;p&gt;def print_doc(self): print("Documentation for MyChild Class")&lt;/p&gt;
&lt;p&gt;my_instance = MyChildClass() my_instance.my_set_val(100) print(my_instance.my_get_val()) print(my_instance.print_doc()) [/code] The code is already discussed &lt;a href="https://arvimal.wordpress.com/2016/06/29/inheritance-and-method-overloading-object-oriented-programming/"&gt;here&lt;/a&gt;. The &lt;code&gt;my_set_val&lt;/code&gt; method is defined in both the child class as well as the parent class.&lt;/p&gt;
&lt;p&gt;We overload the &lt;code&gt;my_set_val&lt;/code&gt; method defined in the parent class, in the child class. But after enhancing/overloading it, we call the &lt;code&gt;my_set_val&lt;/code&gt; method specifically from the Parent class using &lt;code&gt;super()&lt;/code&gt; and thus enhance it.&lt;/p&gt;
&lt;h3&gt;Takeaway:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;super() helps to specifically call the Parent class method which has been overridden in the child class, from the child class.&lt;/li&gt;
&lt;li&gt;The super() in-built function can be used to call/refer the Parent class without explicitly naming them. This helps in situations where the Parent class name may change. Hence, super() helps in avoiding strong ties with class names and increases maintainability.&lt;/li&gt;
&lt;li&gt;super() helps the most when there are multiple inheritance happening, and the MRO ends up being complex. In case you need to call a method from a specific parent class, use super().&lt;/li&gt;
&lt;li&gt;There are multiple ways to call a method from a Parent class.&lt;ol&gt;
&lt;li&gt;&lt;Parent-Class&gt;.&lt;method&gt;&lt;/li&gt;
&lt;li&gt;super(&lt;ChildClass&gt;, self).&lt;method&gt;&lt;/li&gt;
&lt;li&gt;super().&lt;method&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;https://docs.python.org/2/library/functions.html#super&lt;/li&gt;
&lt;li&gt;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/222877/how-to-use-super-in-python&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Sharding the Ceph RADOS Gateway bucket index"</title><link href="https://arvimal.github.io/sharding-the-ceph-rados-gateway-bucket-index.html" rel="alternate"></link><published>2016-06-30T00:00:00+02:00</published><updated>2016-06-30T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-30:/sharding-the-ceph-rados-gateway-bucket-index.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"rados"&lt;/li&gt;
&lt;li&gt;"rados-gateway"&lt;/li&gt;
&lt;li&gt;"rgw"&lt;/li&gt;
&lt;li&gt;"rgw-index"&lt;/li&gt;
&lt;li&gt;"sharding"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;S&lt;/strong&gt;_harding is the process of breaking down data onto multiple locations so as to increase parallelism, as well as distribute load. This is a common feature used in databases. Read more on this at &lt;a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The concept of sharding is …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"rados"&lt;/li&gt;
&lt;li&gt;"rados-gateway"&lt;/li&gt;
&lt;li&gt;"rgw"&lt;/li&gt;
&lt;li&gt;"rgw-index"&lt;/li&gt;
&lt;li&gt;"sharding"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;S&lt;/strong&gt;_harding is the process of breaking down data onto multiple locations so as to increase parallelism, as well as distribute load. This is a common feature used in databases. Read more on this at &lt;a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The concept of sharding is used in Ceph, for splitting the bucket index in a RADOS Gateway.&lt;/p&gt;
&lt;p&gt;RGW or RADOS Gateway keeps an index for all the objects in its buckets for faster and easier lookup. For each RGW bucket created in a pool, the corresponding index is created in the &lt;code&gt;XX.index&lt;/code&gt; pool.&lt;/p&gt;
&lt;p&gt;For example, for each of the buckets created in &lt;code&gt;.rgw&lt;/code&gt; pool, the bucket index is created in &lt;code&gt;.rgw.buckets.index&lt;/code&gt; pool. For each bucket, the index is stored in a single RADOS object.&lt;/p&gt;
&lt;p&gt;When the number of objects increases, the size of the RADOS object increases as well. Two problems arise due to the increased index size.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RADOS does not work good with large objects since it's not designed as such. Operations such as recovery, scrubbing etc.. work on a single object. If the object size increases, OSDs may start hitting timeouts because reading a large object may take a long time. This is one of the reason that all RADOS client interfaces such as RBD, RGW, CephFS use a standard 4MB object size.&lt;/li&gt;
&lt;li&gt;Since the index is stored in a single RADOS object, only a single operation can be done on it at any given time. When the number of objects increases, the index stored in the RADOS object grows. Since a single index is handling a large number of objects, and there is a chance the number of operations also increase, parallelism is not possible which can end up being a bottleneck. Multiple operations will need to wait in a queue since a single operation is possible at a time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to work around these problems, the bucket index is sharded into multiple parts. Each shard is kept on a separate RADOS object within the index pool.&lt;/p&gt;
&lt;p&gt;Sharding is configured with the tunable &lt;code&gt;bucket_index_max_shards&lt;/code&gt; . By default, this tunable is set to &lt;code&gt;0&lt;/code&gt; which means that there are no shards.&lt;/p&gt;
&lt;h3&gt;How to check if Sharding is set?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;List the buckets [code language="bash"] # radosgw-admin metadata bucket list [ "my-new-bucket" ] [/code]&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get information on the bucket in question[code language="bash"]&lt;/p&gt;
&lt;p&gt;# radosgw-admin metadata get bucket:my-new-bucket { "key": "bucket:my-new-bucket", "ver": { "tag": "_bGZAVUgayKVwGNgNvI0328G", "ver": 1 }, "mtime": 1458940225, "data": { "bucket": { "name": "my-new-bucket", "pool": ".rgw.buckets", "data_extra_pool": ".rgw.buckets.extra", "index_pool": ".rgw.buckets.index", "marker": "default.2670570.1", "bucket_id": "default.2670570.1" }, "owner": "rgw_user", "creation_time": 1458940225, "linked": "true", "has_bucket_info": "false" } }&lt;/p&gt;
&lt;p&gt;[/code]
3. Use the bucket ID to get more information, including the number of shards.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[code language="bash"] radosgw-admin metadata get bucket.instance:my-new-bucket:default.2670570.1 { "key": "bucket.instance:my-new-bucket:default.2670570.1", "ver": { "tag": "_xILkVKbfQD7reDFSOB4a5VU", "ver": 1 }, "mtime": 1458940225, "data": { "bucket_info": { "bucket": { "name": "my-new-bucket", "pool": ".rgw.buckets", "data_extra_pool": ".rgw.buckets.extra", "index_pool": ".rgw.buckets.index", "marker": "default.2670570.1", "bucket_id": "default.2670570.1" }, "creation_time": 1458940225, "owner": "rgw_user", "flags": 0, "region": "default", "placement_rule": "default-placement", "has_instance_obj": "true", "quota": { "enabled": false, "max_size_kb": -1, "max_objects": -1 }, "num_shards": 0, "bi_shard_hash_type": 0 }, "attrs": [ { "key": "user.rgw.acl", "val": "AgKPAAAAAgIaAAAACAAAAHJnd191c2VyCgAAAEZpcnN0IFVzZXIDA2kAAAABAQAAAAgAAAByZ3dfdXNlcg8AAAABAAAACAAAAHJnd191c2VyAwM6AAAAAgIEAAAAAAAAAAgAAAByZ3dfdXNlcgAAAAAAAAAAAgIEAAAADwAAAAoAAABGaXJzdCBVc2VyAAAAAAAAAAA=" }, { "key": "user.rgw.idtag", "val": "" }, { "key": "user.rgw.manifest", "val": "" } ] } }&lt;/p&gt;
&lt;p&gt;[/code] Note that `num_shards` is set to 0, which means that sharding is not enabled.&lt;/p&gt;
&lt;h3&gt;How to configure Sharding?&lt;/h3&gt;
&lt;p&gt;To configure sharding, we need to first dump the region info.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; By default, RGW has a region named &lt;code&gt;default&lt;/code&gt; even if regions are not configured.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # radosgw-admin region get &amp;gt; /tmp/region.txt&lt;/p&gt;
&lt;p&gt;# cat /tmp/region.txt { "name": "default", "api_name": "", "is_master": "true", "endpoints": [], "hostnames": [], "master_zone": "", "zones": [ { "name": "default", "endpoints": [], "log_meta": "false", "log_data": "false", "bucket_index_max_shards": 0 } ], "placement_targets": [ { "name": "default-placement", "tags": [] } ], "default_placement": "default-placement" }&lt;/p&gt;
&lt;p&gt;[/code] Edit the file /tmp/region.txt, change the value for `bucket_index_max_shards` to the needed shard value (we're setting it to 8 in this example), and inject it back to the region.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # radosgw-admin region set &amp;lt; /tmp/region.txt { "name": "default", "api_name": "", "is_master": "true", "endpoints": [], "hostnames": [], "master_zone": "", "zones": [ { "name": "default", "endpoints": [], "log_meta": "false", "log_data": "false", "bucket_index_max_shards": 8 } ], "placement_targets": [ { "name": "default-placement", "tags": [] } ], "default_placement": "default-placement" } [/code] Reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en/red-hat-ceph-storage/version-1.3/red-hat-ceph-storage-13-ceph-object-gateway-for-rhel-x86-64/#configure-bucket-sharding"&gt;Red Hat Ceph Storage 1.3 Rados Gateway documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)"&gt;https://en.wikipedia.org/wiki/Shard_(database_architecture)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"`uninit_bg` and lazy block group allocation in EXT3/4"</title><link href="https://arvimal.github.io/uninit_bg-and-lazy-block-group-allocation-in-ext34.html" rel="alternate"></link><published>2016-06-30T00:00:00+02:00</published><updated>2016-06-30T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-30:/uninit_bg-and-lazy-block-group-allocation-in-ext34.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ext3"&lt;/li&gt;
&lt;li&gt;"ext4"&lt;/li&gt;
&lt;li&gt;"file-systems"&lt;/li&gt;
&lt;li&gt;"lazy-block-group-allocation"&lt;/li&gt;
&lt;li&gt;"uninit_bg"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;E&lt;/strong&gt;_xt3 and Ext4 recently have been the most commonly used file system on Linux machines.&lt;/p&gt;
&lt;p&gt;What does &lt;code&gt;uninit_bg&lt;/code&gt; actually do?&lt;/p&gt;
&lt;p&gt;Read https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout&lt;/p&gt;
&lt;p&gt;section `Meta Block Groups &lt;code&gt;and&lt;/code&gt; Lazy Block Group Initialization`.&lt;/p&gt;
&lt;p&gt;https://ext4.wiki.kernel.org …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ext3"&lt;/li&gt;
&lt;li&gt;"ext4"&lt;/li&gt;
&lt;li&gt;"file-systems"&lt;/li&gt;
&lt;li&gt;"lazy-block-group-allocation"&lt;/li&gt;
&lt;li&gt;"uninit_bg"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;E&lt;/strong&gt;_xt3 and Ext4 recently have been the most commonly used file system on Linux machines.&lt;/p&gt;
&lt;p&gt;What does &lt;code&gt;uninit_bg&lt;/code&gt; actually do?&lt;/p&gt;
&lt;p&gt;Read https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout&lt;/p&gt;
&lt;p&gt;section `Meta Block Groups &lt;code&gt;and&lt;/code&gt; Lazy Block Group Initialization`.&lt;/p&gt;
&lt;p&gt;https://ext4.wiki.kernel.org/index.php/Frequently_Asked_Questions&lt;/p&gt;
&lt;p&gt;https://www.thomas-krenn.com/en/wiki/Ext4_Filesystem&lt;/p&gt;
&lt;p&gt;https://access.redhat.com/labs/psb/versions/kernel-3.10.0-327.18.2.el7/Documentation/filesystems/ext4.txt&lt;/p&gt;
&lt;p&gt;https://access.redhat.com/labs/psb/versions/kernel-3.10.0-327.18.2.el7/fs/ext4/ext4.h&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Inheritance and Method overloading - Object Oriented Programming"</title><link href="https://arvimal.github.io/inheritance-and-method-overloading-object-oriented-programming.html" rel="alternate"></link><published>2016-06-29T00:00:00+02:00</published><updated>2016-06-29T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-29:/inheritance-and-method-overloading-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"abstract-methods"&lt;/li&gt;
&lt;li&gt;"abstractmethod"&lt;/li&gt;
&lt;li&gt;"builtins"&lt;/li&gt;
&lt;li&gt;"inheritance"&lt;/li&gt;
&lt;li&gt;"method-overloading"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;I&lt;/strong&gt;_nheritance is a usual theme in Object Oriented Programming. Because of Inheritance, the functions/methods defined in parent classes can be called in Child classes which enables code reuse, and several other features. In this article, we try to understand …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"abstract-methods"&lt;/li&gt;
&lt;li&gt;"abstractmethod"&lt;/li&gt;
&lt;li&gt;"builtins"&lt;/li&gt;
&lt;li&gt;"inheritance"&lt;/li&gt;
&lt;li&gt;"method-overloading"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;I&lt;/strong&gt;_nheritance is a usual theme in Object Oriented Programming. Because of Inheritance, the functions/methods defined in parent classes can be called in Child classes which enables code reuse, and several other features. In this article, we try to understand some of those features that come up with Inheritance.&lt;/p&gt;
&lt;p&gt;We've discussed &lt;a href="https://arvimal.wordpress.com/2016/06/14/abstract-base-classesmethods-object-oriented-programming/"&gt;Abstract Methods&lt;/a&gt; in an earlier post, which is a feature part of Inheritance, and can be applied on child classes that inherits from a Parent class.&lt;/p&gt;
&lt;p&gt;E the methods which are inherited can also be seen as another feature or possibility in Inheritance. In many cases, it's required to override or specialize the methods inherited from the Parent class. This is of course possible, and is called as 'Method Overloading'.&lt;/p&gt;
&lt;p&gt;Consider the two classes and its methods defined below:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] import abc&lt;/p&gt;
&lt;p&gt;class MyClass(object):&lt;/p&gt;
&lt;p&gt;__metaclass__ = abc.ABCMeta&lt;/p&gt;
&lt;p&gt;def __init__(self): pass&lt;/p&gt;
&lt;p&gt;def my_set_method(self, value): self.value = value&lt;/p&gt;
&lt;p&gt;def my_get_method(self): return self.value&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def printdoc(self): return&lt;/p&gt;
&lt;p&gt;class MyChildClass(MyClass):&lt;/p&gt;
&lt;p&gt;def my_set_method(self, value): if not isinstance(value, int): value = 0 super(MyChildClass, self).my_set_method(self)&lt;/p&gt;
&lt;p&gt;def printdoc(self): print("\nDocumentation for MyChildClass()")&lt;/p&gt;
&lt;p&gt;instance_1 = MyChildClass() instance_1.my_set_method(10) print(instance_1.my_get_method()) instance_1.printdoc() [/code]&lt;/p&gt;
&lt;p&gt;We have two classes, the parent class being &lt;code&gt;MyClass&lt;/code&gt; and the child class being &lt;code&gt;MyChildClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyClass&lt;/code&gt; has three methods defined.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my_set_method()&lt;/li&gt;
&lt;li&gt;my_get_method()&lt;/li&gt;
&lt;li&gt;printdoc()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;printdoc()&lt;/code&gt; method is an &lt;a href="https://arvimal.wordpress.com/2016/06/14/abstract-base-classesmethods-object-oriented-programming/"&gt;Abstract method&lt;/a&gt;, and hence should be implemented in the Child class as a mandatory method.&lt;/p&gt;
&lt;p&gt;The child class &lt;code&gt;MyChildClass&lt;/code&gt; inherits from &lt;code&gt;MyClass&lt;/code&gt; and has access to all it's methods.&lt;/p&gt;
&lt;p&gt;Normally, we can just go ahead and use the methods defined in &lt;code&gt;MyClass&lt;/code&gt; , in &lt;code&gt;MyChildClass&lt;/code&gt;. But there can be situations when we want to improve or build upon the methods inherited. As said earlier, this is called &lt;em&gt;&lt;strong&gt;Method Overloading.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyChildClass&lt;/code&gt; extends the parent's &lt;code&gt;my_set_method()&lt;/code&gt; function by it's own implementation. In this example, it does an additional check to understand if the input value is an &lt;code&gt;int&lt;/code&gt; or not, and then calls the &lt;code&gt;my_set_method()&lt;/code&gt; of it's parent class using &lt;code&gt;super&lt;/code&gt;. Hence, this method in the child class extends the functionality prior calling method in the parent. A post on &lt;code&gt;super&lt;/code&gt; is set for a later time.&lt;/p&gt;
&lt;p&gt;Even though this is a trivial example, it helps to understand how the features inherited from other classes can be extended or improved upon via method overloading.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;my_get_method()&lt;/code&gt; is not overridden in the child class but still called from the instance, as &lt;code&gt;instance_1.my_get_method()&lt;/code&gt;. We're using it as it is available via Inheritance. Since it's defined in the parent class, it works in the child class' instance when called, even if not overridden.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;printdoc()&lt;/code&gt; method is an abstract method and hence is mandatory to be implemented in the child class, and can be overridden with what we choose to do.&lt;/p&gt;
&lt;p&gt;Inheritance is possible from python builtins, and can be overridden as well. Let's check out another example:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyList(list):&lt;/p&gt;
&lt;p&gt;def __getitem__(self, index): if index == 0: raise IndexError if index &amp;gt; 0: index -= 1 return list.__getitem__(self, index)&lt;/p&gt;
&lt;p&gt;def __setitem__(self, index, value): if index == 0: raise IndexError if index &amp;gt; 0: index -= 1 list.__setitem__(self, index, value)&lt;/p&gt;
&lt;p&gt;x = MyList(['a', 'b', 'c']) print(x) print("-" * 10)&lt;/p&gt;
&lt;p&gt;x.append('d') print(x) print("-" * 10)&lt;/p&gt;
&lt;p&gt;x.__setitem__(4, 'e') print(x) print("-" * 10)&lt;/p&gt;
&lt;p&gt;print(x[1]) print(x.__getitem__(1)) print("-" * 10)&lt;/p&gt;
&lt;p&gt;print(x[4]) print(x.__getitem__(4)) [/code] This outputs:&lt;/p&gt;
&lt;p&gt;[code language="python"] ['a', 'b', 'c'] ---------- ['a', 'b', 'c', 'd'] ---------- ['a', 'b', 'c', 'e'] ---------- a a ---------- e e [/code]&lt;/p&gt;
&lt;h3&gt;How does the code work?&lt;/h3&gt;
&lt;p&gt;The class &lt;code&gt;MyList()&lt;/code&gt; inherits from the builtin &lt;code&gt;list&lt;/code&gt;. Because of the inheritance, we can use list's available magic methods such as &lt;code&gt;__getitem__()&lt;/code&gt; , &lt;code&gt;__setitem__()&lt;/code&gt; etc..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE: In order to see the available methods in &lt;code&gt;list&lt;/code&gt;, use &lt;code&gt;dir(list)&lt;/code&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We create two functions/methods named `__getitem__()` and `__setitem__()` to override the inherited methods.&lt;/li&gt;
&lt;li&gt;Within these functions/methods, we set our own conditions.&lt;/li&gt;
&lt;li&gt;Wie later call the builtin methods directly within these functions, using&lt;ol&gt;
&lt;li&gt;list.__getitem__()&lt;/li&gt;
&lt;li&gt;list.__setitem__()&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;We create an instance named &lt;code&gt;x&lt;/code&gt; from &lt;code&gt;MyList()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We understand that&lt;ol&gt;
&lt;li&gt;&lt;code&gt;x[1]&lt;/code&gt; and &lt;code&gt;x.__getitem__(1)&lt;/code&gt; are same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x[4, 'e']&lt;/code&gt; and &lt;code&gt;x.__setitem__(4, 'e')&lt;/code&gt; are same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.append(f)&lt;/code&gt; is same as &lt;code&gt;x.__setitem__(&amp;lt;n&amp;gt;, f)&lt;/code&gt; where &lt;n&gt; is the element to the extreme right which the python interpreter iterates and find on its own.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hence, in Inheritance, child classes can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inherit from parent classes and use those methods.&lt;ul&gt;
&lt;li&gt;Parent classes can either be user-defined classes or buitins like &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;dict&lt;/code&gt; etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Override (or Overload) an inherited method.&lt;/li&gt;
&lt;li&gt;Extend an inherited method in its own way.&lt;/li&gt;
&lt;li&gt;Implement an Abstract method the parent class requires.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920040057.do"&gt;Python beyond the basics - Object Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Abstract Base Classes/Methods - Object Oriented Programming"</title><link href="https://arvimal.github.io/abstract-base-classesmethods-object-oriented-programming.html" rel="alternate"></link><published>2016-06-14T00:00:00+02:00</published><updated>2016-06-14T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-14:/abstract-base-classesmethods-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"abstract-base-class"&lt;/li&gt;
&lt;li&gt;"abstract-methods"&lt;/li&gt;
&lt;li&gt;"abstractmethod"&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;A&lt;/strong&gt;_bstract classes, in short, are classes that are supposed to be inherited or subclassed, rather than instantiated.&lt;/p&gt;
&lt;p&gt;Through Abstract Classes, we can enforce a blueprint on the subclasses that inherit the Abstract Class. This means that Abstract classes can …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"abstract-base-class"&lt;/li&gt;
&lt;li&gt;"abstract-methods"&lt;/li&gt;
&lt;li&gt;"abstractmethod"&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;A&lt;/strong&gt;_bstract classes, in short, are classes that are supposed to be inherited or subclassed, rather than instantiated.&lt;/p&gt;
&lt;p&gt;Through Abstract Classes, we can enforce a blueprint on the subclasses that inherit the Abstract Class. This means that Abstract classes can be used to define a set of methods that &lt;strong&gt;must&lt;/strong&gt; be implemented by it subclasses.&lt;/p&gt;
&lt;p&gt;Abstract classes are used when working on large projects where classes have to be inherited, and need to strictly follow certain blueprints.&lt;/p&gt;
&lt;p&gt;Python supports Abstract Classes via the module &lt;code&gt;abc&lt;/code&gt; from version 2.6. Using the &lt;code&gt;abc&lt;/code&gt; module, its pretty straight forward to implement an Abstract Class.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] import abc&lt;/p&gt;
&lt;p&gt;class My_ABC_Class(object): __metaclass__ = abc.ABCMeta&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def set_val(self, val): return&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def get_val(self): return&lt;/p&gt;
&lt;p&gt;# Abstract Base Class defined above ^^^&lt;/p&gt;
&lt;p&gt;# Custom class inheriting from the above Abstract Base Class, below&lt;/p&gt;
&lt;p&gt;class MyClass(My_ABC_Class):&lt;/p&gt;
&lt;p&gt;def set_val(self, input): self.val = input&lt;/p&gt;
&lt;p&gt;def get_val(self): print("\nCalling the get_val() method") print("I'm part of the Abstract Methods defined in My_ABC_Class()") return self.val&lt;/p&gt;
&lt;p&gt;def hello(self): print("\nCalling the hello() method") print("I'm *not* part of the Abstract Methods defined in My_ABC_Class()")&lt;/p&gt;
&lt;p&gt;my_class = MyClass()&lt;/p&gt;
&lt;p&gt;my_class.set_val(10) print(my_class.get_val()) my_class.hello() [/code] In the code above, &lt;code&gt;set_val()&lt;/code&gt; and &lt;code&gt;get_val()&lt;/code&gt; are both abstract methods defined in the Abstract Class &lt;code&gt;My_ABC_Class()&lt;/code&gt;. Hence it should be implemented in the child class inheriting from &lt;code&gt;My_ABC_Class()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the child class &lt;code&gt;MyClass()&lt;/code&gt; , we have to strictly define the abstract classes defined in the Parent class. But the child class is free to implement other methods of their own. The &lt;code&gt;hello()&lt;/code&gt; method is one such.&lt;/p&gt;
&lt;p&gt;This will print :&lt;/p&gt;
&lt;p&gt;[code language="bash"] # python abstractclasses-1.py&lt;/p&gt;
&lt;p&gt;Calling the get_val() method I'm part of the Abstract Methods defined in My_ABC_Class() 10&lt;/p&gt;
&lt;p&gt;Calling the hello() method I'm *not* part of the Abstract Methods defined in My_ABC_Class() [/code] The code gets executed properly even if the  &lt;code&gt;hello()&lt;/code&gt; method is not an abstract method.&lt;/p&gt;
&lt;p&gt;Let's check what happens if we don't implement a method marked as an abstract method, in the child class.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] import abc&lt;/p&gt;
&lt;p&gt;class My_ABC_Class(object): __metaclass__ = abc.ABCMeta&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def set_val(self, val): return&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def get_val(self): return&lt;/p&gt;
&lt;p&gt;# Abstract Base Class defined above ^^^&lt;/p&gt;
&lt;p&gt;# Custom class inheriting from the above Abstract Base Class, below&lt;/p&gt;
&lt;p&gt;class MyClass(My_ABC_Class):&lt;/p&gt;
&lt;p&gt;def set_val(self, input): self.val = input&lt;/p&gt;
&lt;p&gt;def hello(self): print("\nCalling the hello() method") print("I'm *not* part of the Abstract Methods defined in My_ABC_Class()")&lt;/p&gt;
&lt;p&gt;my_class = MyClass()&lt;/p&gt;
&lt;p&gt;my_class.set_val(10) print(my_class.get_val()) my_class.hello() [/code] &lt;em&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/em&gt; is the same as &lt;em&gt;&lt;strong&gt;Example 0&lt;/strong&gt;&lt;/em&gt; except we don't have the &lt;code&gt;get_val()&lt;/code&gt; method defined in the child class.&lt;/p&gt;
&lt;p&gt;This means that we're breaking the rule of abstraction. Let's see what happens:&lt;/p&gt;
&lt;p&gt;[code language="bash"] # python abstractclasses-2.py Traceback (most recent call last): File "abstractclasses-2.py", line 50, in my_class = MyClass() TypeError: Can't instantiate abstract class MyClass with abstract methods get_val [/code]&lt;/p&gt;
&lt;p&gt;The traceback clearly states that the child class &lt;code&gt;MyClass()&lt;/code&gt; cannot be instantiated since it does not implement the Abstract methods defined in it's Parent class.&lt;/p&gt;
&lt;p&gt;We mentioned that an Abstract class is supposed to be inherited rather than instantiated. What happens if we try instantiating an Abstract class?&lt;/p&gt;
&lt;p&gt;Let's use the same example, this time we're instantiating the Abstract class though.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] import abc&lt;/p&gt;
&lt;p&gt;class My_ABC_Class(object): __metaclass__ = abc.ABCMeta&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def set_val(self, val): return&lt;/p&gt;
&lt;p&gt;@abc.abstractmethod def get_val(self): return&lt;/p&gt;
&lt;p&gt;# Abstract Base Class defined above ^^^&lt;/p&gt;
&lt;p&gt;# Custom class inheriting from the above Abstract Base Class, below&lt;/p&gt;
&lt;p&gt;class MyClass(My_ABC_Class):&lt;/p&gt;
&lt;p&gt;def set_val(self, input): self.val = input&lt;/p&gt;
&lt;p&gt;def hello(self): print("\nCalling the hello() method") print("I'm *not* part of the Abstract Methods defined in My_ABC_Class()")&lt;/p&gt;
&lt;p&gt;my_class = My_ABC_Class()    # &amp;lt;- Instantiating the Abstract Class&lt;/p&gt;
&lt;p&gt;my_class.set_val(10) print(my_class.get_val()) my_class.hello() [/code] What does this output?&lt;/p&gt;
&lt;p&gt;[code language="bash"] # python abstractclasses-3.py Traceback (most recent call last): File "abstractclasses-3.py", line 54, in &lt;module&gt; my_class = My_ABC_Class() TypeError: Can't instantiate abstract class My_ABC_Class with abstract methods get_val, set_val [/code] As expected, the Python interpreter says that it can't instantiate the abstract class My_ABC_Class.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Takeaway:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;An Abstract Class is supposed to be inherited, not instantiated.&lt;/li&gt;
&lt;li&gt;The Abstraction nomenclature is applied on the methods within a Class.&lt;/li&gt;
&lt;li&gt;The abstraction is enforced on methods which are marked with the decorator &lt;code&gt;@abstractmethod&lt;/code&gt; or &lt;code&gt;@abc.abstractmethod&lt;/code&gt;, depending on how you imported the module, &lt;code&gt;from abc import abstractmethod&lt;/code&gt; or &lt;code&gt;import abc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is not mandatory to have all the methods defined as abstract methods, in an Abstract Class.&lt;/li&gt;
&lt;li&gt;Subclasses/Child classes are enforced to define the methods which are marked with &lt;code&gt;@abstractmethod&lt;/code&gt; in the Parent class.&lt;/li&gt;
&lt;li&gt;Subclasses are free to create methods of their own, other than the abstract methods enforced by the Parent class.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/2/abc/"&gt;https://pymotw.com/2/abc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920040057.do"&gt;Python beyond the basics - Object Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Instance, Class, and Static methods - Object Oriented Programming"</title><link href="https://arvimal.github.io/instance-class-and-static-methods-object-oriented-programming.html" rel="alternate"></link><published>2016-06-12T00:00:00+02:00</published><updated>2016-06-12T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-12:/instance-class-and-static-methods-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;F&lt;/strong&gt;_unctions defined under a class are also called &lt;code&gt;methods&lt;/code&gt;. Most of the methods are accessed through an instance of the class.&lt;/p&gt;
&lt;p&gt;There are three types of methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instance methods&lt;/li&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Class methods&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both Static methods and Class methods can be called using the &lt;code&gt;@staticmethod&lt;/code&gt; and …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;F&lt;/strong&gt;_unctions defined under a class are also called &lt;code&gt;methods&lt;/code&gt;. Most of the methods are accessed through an instance of the class.&lt;/p&gt;
&lt;p&gt;There are three types of methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instance methods&lt;/li&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Class methods&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both Static methods and Class methods can be called using the &lt;code&gt;@staticmethod&lt;/code&gt; and &lt;code&gt;@classmethod&lt;/code&gt; syntactic sugar respectively.&lt;/p&gt;
&lt;h3&gt;Instance methods&lt;/h3&gt;
&lt;p&gt;_&lt;strong&gt;I&lt;/strong&gt;_nstance methods are also called &lt;strong&gt;&lt;em&gt;Bound methods&lt;/em&gt;&lt;/strong&gt; since the instance is bound to the class via &lt;code&gt;self&lt;/code&gt;. Read a simple explanation on &lt;code&gt;self&lt;/code&gt; &lt;a href="https://arvimal.wordpress.com/2016/06/12/self-in-python/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Almost all methods are Instance methods since they are accessed through instances.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object):&lt;/p&gt;
&lt;p&gt;def set_val(self, val): self.value = val&lt;/p&gt;
&lt;p&gt;def get_val(self): print(self.value) return self.value&lt;/p&gt;
&lt;p&gt;a = MyClass() b = MyClass()&lt;/p&gt;
&lt;p&gt;a.set_val(10) b.set_val(100)&lt;/p&gt;
&lt;p&gt;a.get_val() b.get_val() [/code] The above code snippet shows manipulating the two methods  &lt;code&gt;set_val()&lt;/code&gt; and &lt;code&gt;get_val()&lt;/code&gt; . These are done through the instances &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Hence these methods are called &lt;strong&gt;Instance methods&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: Instance methods have &lt;code&gt;self&lt;/code&gt; as their first argument. &lt;code&gt;self&lt;/code&gt; is the instance itself.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All methods defined under a class are usually called via the instance instantiated from the class. But there are methods which can work without instantiating an instance.&lt;/p&gt;
&lt;p&gt;Class methods and Static methods don't require an instance, and hence don't need &lt;code&gt;self&lt;/code&gt; as their first argument.&lt;/p&gt;
&lt;h3&gt;Static methods&lt;/h3&gt;
&lt;p&gt;Static methods are functions/methods which doesn't need a binding to a class or an instance.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static methods, as well as Class methods, don't require an instance to be called.&lt;/li&gt;
&lt;li&gt;Static methods doesn't need  &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;cls&lt;/code&gt; as the first argument since it's not bound to an instance or class.&lt;/li&gt;
&lt;li&gt;Static methods are normal functions, but within a class.&lt;/li&gt;
&lt;li&gt;Static methods are defined with the keyword &lt;code&gt;@staticmethod&lt;/code&gt; above the function/method.&lt;/li&gt;
&lt;li&gt;Static methods are usually used to work on Class Attributes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;\============================= &lt;strong&gt;A note on class attributes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Attributes set explicitly under a class (not under a function) are called Class Attributes.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object): value = 10&lt;/p&gt;
&lt;p&gt;def my_func(self): pass [/code] In the code snippet above, &lt;code&gt;value = 10&lt;/code&gt; is an attribute defined under the class &lt;code&gt;MyClass()&lt;/code&gt; and not under any functions/methods. Hence, it's called a Class attribute. =============================&lt;/p&gt;
&lt;p&gt;Let's check out an example on static methods and class attributes:&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object): # A class attribute count = 0&lt;/p&gt;
&lt;p&gt;def __init__(self, name): print("An instance is created!") self.name = name MyClass.count += 1&lt;/p&gt;
&lt;p&gt;# Our class method @staticmethod def status(): print("The total number of instances are ", MyClass.count)&lt;/p&gt;
&lt;p&gt;print(MyClass.count)&lt;/p&gt;
&lt;p&gt;my_func_1 = MyClass("MyClass 1") my_func_2 = MyClass("MyClass 2") my_func_3 = MyClass("MyClass 3")&lt;/p&gt;
&lt;p&gt;MyClass.status() print(MyClass.count) [/code] This prints the following:&lt;/p&gt;
&lt;p&gt;[code language="bash"] # python statismethod.py&lt;/p&gt;
&lt;p&gt;0 An instance is created! An instance is created! An instance is created!&lt;/p&gt;
&lt;p&gt;The total number of instances are 3 3 [/code]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does the code work?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The example above has a class  &lt;code&gt;MyClass()&lt;/code&gt; with a class attribute &lt;code&gt;count = 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An __init__ magic method accepts a &lt;code&gt;name&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;The __init__ method also increments the count in the &lt;code&gt;count&lt;/code&gt; counter at each instantiation.&lt;/li&gt;
&lt;li&gt;We define a staticmethod &lt;code&gt;status()&lt;/code&gt; which just prints the number of the instances being created. The work done in this method is not necessarily associated with the class or any functions, hence its defined as a staticmethod.&lt;/li&gt;
&lt;li&gt;We print the initial value of the counter &lt;code&gt;count&lt;/code&gt; via the class, as &lt;code&gt;MyClass.count&lt;/code&gt;. This will print &lt;code&gt;0&lt;/code&gt;since the counter is called before any instances are created.&lt;/li&gt;
&lt;li&gt;We create three instances from the class  &lt;code&gt;MyClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can check the number of instances created through the &lt;code&gt;status()&lt;/code&gt; method and the &lt;code&gt;count&lt;/code&gt; counter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another example:&lt;/p&gt;
&lt;p&gt;[code language="python"] class Car(object):&lt;/p&gt;
&lt;p&gt;def sound(): print("vroom!") [/code]&lt;/p&gt;
&lt;p&gt;The code above shows a method which is common to all the Car instances, and is not limited to a specific instance of Car. Hence, this can be called as a staticmethod since it's not necessarily bound to a Class or Instance to be called.&lt;/p&gt;
&lt;p&gt;[code language="python"] class Car(object):&lt;/p&gt;
&lt;p&gt;@staticmethod def sound(): print("vroom!") [/code]&lt;/p&gt;
&lt;h3&gt;Class methods&lt;/h3&gt;
&lt;p&gt;We can define functions/methods specific to classes. These are called Class methods.&lt;/p&gt;
&lt;p&gt;The speciality of a class methods is that an instance is not required to access a class method. It can be called directly via the Class name.&lt;/p&gt;
&lt;p&gt;Class methods are used when it's not necessary to instantiate a class to access a method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: A method can be set as a Class method using the decorator @classmethod.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object): value = 10&lt;/p&gt;
&lt;p&gt;@classmethod def my_func(cls): print("Hello") [/code]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: Class methods have &lt;code&gt;cls&lt;/code&gt; as their first argument, instead of &lt;code&gt;self&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object): count = 0&lt;/p&gt;
&lt;p&gt;def __init__(self, val): self.val = val MyClass.count += 1&lt;/p&gt;
&lt;p&gt;def set_val(self, newval): self.val = newval&lt;/p&gt;
&lt;p&gt;def get_val(self): return self.val&lt;/p&gt;
&lt;p&gt;@classmethod def get_count(cls): return cls.count&lt;/p&gt;
&lt;p&gt;object_1 = MyClass(10) print("\nValue of object : %s" % object_1.get_val()) print(MyClass.get_count())&lt;/p&gt;
&lt;p&gt;object_2 = MyClass(20) print("\nValue of object : %s" % object_2.get_val()) print(MyClass.get_count())&lt;/p&gt;
&lt;p&gt;object_3 = MyClass(40) print("\nValue of object : %s" % object_3.get_val()) print(MyClass.get_count()) [/code] Here, we use a &lt;code&gt;get_count()&lt;/code&gt; function to get the number of times the counter was incremented. The counter is incremented each time an instance is created.&lt;/p&gt;
&lt;p&gt;Since the counter is not really tied with the instance but only counts the number of instance, we set it as a classmethod, and calls it each time using &lt;code&gt;MyClass.get_count()&lt;/code&gt;when an instance is created. The output looks as following:&lt;/p&gt;
&lt;p&gt;[code language="bash"] # python classmethod.py&lt;/p&gt;
&lt;p&gt;Value of object : 10 1&lt;/p&gt;
&lt;p&gt;Value of object : 20 2&lt;/p&gt;
&lt;p&gt;Value of object : 40 3 [/code]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Courtsey&lt;/strong&gt;&lt;/em&gt;: This was written as part of studying class and static methods. Several articles/videos have helped including but not limited to the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/"&gt;https://jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920040057.do"&gt;Python beyond the basics - Object Oriented Programming&lt;/a&gt; - O'Reilly Learning Paths&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"`self` in Python - Object Oriented Programming"</title><link href="https://arvimal.github.io/self-in-python-object-oriented-programming.html" rel="alternate"></link><published>2016-06-12T00:00:00+02:00</published><updated>2016-06-12T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-12:/self-in-python-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;T&lt;/strong&gt;_his article was long overdue and should have been published before many of the articles in this blog. Better late than never.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; in Python is usually used in an Object Oriented nomenclature, to denote the instance/object created from a Class.&lt;/p&gt;
&lt;p&gt;In short, &lt;code&gt;self&lt;/code&gt; is …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;T&lt;/strong&gt;_his article was long overdue and should have been published before many of the articles in this blog. Better late than never.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; in Python is usually used in an Object Oriented nomenclature, to denote the instance/object created from a Class.&lt;/p&gt;
&lt;p&gt;In short, &lt;code&gt;self&lt;/code&gt; is the instance itself.&lt;/p&gt;
&lt;p&gt;Let's check the following example:&lt;/p&gt;
&lt;p&gt;[code language="python"] class MyClass(object): def __init__(self, name): self.name = name print("Initiating the instance!")&lt;/p&gt;
&lt;p&gt;def hello(self): print(self.name)&lt;/p&gt;
&lt;p&gt;myclass = MyClass("Dan Inosanto")&lt;/p&gt;
&lt;p&gt;# Calling the `hello` method via the Instance `myclass` myclass.hello()&lt;/p&gt;
&lt;p&gt;# Calling the `hello` method vai the class. MyClass.hello(myclass) [/code]&lt;/p&gt;
&lt;p&gt;The code snippet above is trivial and stupid, but I think it gets the idea across.&lt;/p&gt;
&lt;p&gt;We have a class named &lt;code&gt;MyClass()&lt;/code&gt; which takes a &lt;code&gt;name&lt;/code&gt; value as an argument. It also prints the string "Initiating the instance".  The &lt;code&gt;name&lt;/code&gt; value is something that has to be passed while creating an instance.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;hello()&lt;/code&gt; just prints the &lt;code&gt;name&lt;/code&gt; value that is passed while instantiating the class &lt;code&gt;MyClass()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We instantiate the class &lt;code&gt;MyClass()&lt;/code&gt; as &lt;code&gt;myclass&lt;/code&gt; and pass the string  &lt;em&gt;&lt;strong&gt;Dan Inosanto&lt;/strong&gt;&lt;/em&gt; as an argument. Read about the great Inosanto &lt;a href="https://en.wikipedia.org/wiki/Dan_Inosanto"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, we call the &lt;code&gt;hello()&lt;/code&gt; method through the instance. ie..&lt;/p&gt;
&lt;p&gt;[code language="python"] myclass.hello() [/code]&lt;/p&gt;
&lt;p&gt;This should print the name we passed while instantiating &lt;code&gt;MyClass()&lt;/code&gt; as &lt;code&gt;myclass&lt;/code&gt; , which should be pretty obvious.&lt;/p&gt;
&lt;p&gt;The second and last instruction is doing the same thing, but in a different way.&lt;/p&gt;
&lt;p&gt;[code language="python"] MyClass.hello(myclass) [/code] Here, we call the class &lt;code&gt;MyClass()&lt;/code&gt; directly as well as it's method &lt;code&gt;hello()&lt;/code&gt;. Let's check out what both prints:&lt;/p&gt;
&lt;p&gt;[code language="bash"] # python /tmp/test.py&lt;/p&gt;
&lt;p&gt;Initiating the instance! Dan Inosanto Dan Inosanto [/code]&lt;/p&gt;
&lt;p&gt;As we can see, both prints the same output. This means that :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;myclass.hello(self) == MyClass.hello(myclass)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In general, we can say that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;instance-name&gt;.&lt;method&gt;(self) == &lt;Class&gt;.&lt;method&gt;(&lt;instance-name&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ie.. The keyword &lt;code&gt;self&lt;/code&gt; actually represents the instance being instantiated from the Class. Hence &lt;code&gt;self&lt;/code&gt; can be seen as Syntactic sugar.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Magic methods and Syntactic sugar in Python"</title><link href="https://arvimal.github.io/magic-methods-and-syntactic-sugar-in-python.html" rel="alternate"></link><published>2016-06-02T00:00:00+02:00</published><updated>2016-06-02T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-06-02:/magic-methods-and-syntactic-sugar-in-python.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Magic methods&lt;/h3&gt;
&lt;p&gt;_&lt;strong&gt;M&lt;/strong&gt;_agic methods are special methods which can be defined (or already designed and available) to act on objects.&lt;/p&gt;
&lt;p&gt;Magic methods start and end with underscores &lt;code&gt;"__"&lt;/code&gt;, and are not implicitly called by the user even though they can be. Most magic …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Magic methods&lt;/h3&gt;
&lt;p&gt;_&lt;strong&gt;M&lt;/strong&gt;_agic methods are special methods which can be defined (or already designed and available) to act on objects.&lt;/p&gt;
&lt;p&gt;Magic methods start and end with underscores &lt;code&gt;"__"&lt;/code&gt;, and are not implicitly called by the user even though they can be. Most magic methods are used as syntactic sugar by binding it to more clear/easy_to_understand keywords.&lt;/p&gt;
&lt;p&gt;Python is mostly objects and method calls done on objects. Many available functions in Python are actually tied to magic methods_&lt;strong&gt;.&lt;/strong&gt;_ Let's checkout a few examples.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] In [1]: my_var = "Hello!"&lt;/p&gt;
&lt;p&gt;In [2]: print(my_var) Hello!&lt;/p&gt;
&lt;p&gt;In [3]: my_var.__repr__() Out[3]: "'Hello!'" [/code] As we can see, the &lt;code&gt;__repr__()&lt;/code&gt; magic method can be called to print the object, ie.. it is bound to the &lt;code&gt;print()&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;This is true for many other builtin keywords/operators as well.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] In [22]: my_var = "Hello, " In [23]: my_var1 = "How are you?"&lt;/p&gt;
&lt;p&gt;In [24]: my_var + my_var1 Out[24]: 'Hello, How are you?'&lt;/p&gt;
&lt;p&gt;In [25]: my_var.__add__(my_var1) Out[25]: 'Hello, How are you?' [/code] Here, Python interprets the &lt;code&gt;+&lt;/code&gt; sign as a mapping to the magic method &lt;code&gt;__add__()&lt;/code&gt;, and calls it on the L-value (Left hand object value) &lt;code&gt;my_var&lt;/code&gt;, with the R-value (Right hand object value) as the argument.&lt;/p&gt;
&lt;p&gt;When a builtin function is called on an object, in many cases it is mapped to the magic method.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] In [69]: my_list_1 = ['a', 'b', 'c', 'd']&lt;/p&gt;
&lt;p&gt;In [70]: 'a' in my_list_1 Out[70]: True&lt;/p&gt;
&lt;p&gt;In [71]: my_list_1.__contains__("a") Out[71]: True [/code]&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; builtin is mapped to the &lt;code&gt;__contains__()&lt;/code&gt;method.&lt;/p&gt;
&lt;p&gt;The methods available for an object should mostly be dependent on the type of the object.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python" wraplines="true"] In [59]: my_num = 1&lt;/p&gt;
&lt;p&gt;In [60]: type(my_num) Out[60]: int&lt;/p&gt;
&lt;p&gt;In [61]: my_num.__doc__ Out[61]: Out[61]: "int(x=0) -&amp;gt; int or long\nint(x, base=10) -&amp;gt; int or long\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given. ....&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;In [62]: help(my_num) class int(object) | int(x=0) -&amp;gt; int or long | int(x, base=10) -&amp;gt; int or long | | Convert a number or string to an integer, or return 0 if no arguments | are given. If x is floating point, the conversion truncates towards zero. | If x is outside the integer range, the function returns a long instead.&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;From the tests above, we can understand that the &lt;code&gt;help()&lt;/code&gt; function is actually mapped to the &lt;code&gt;object.__doc__&lt;/code&gt; magic method. It's the same doc string that __doc__ and help() uses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE: Due to the syntax conversion (&lt;code&gt;+&lt;/code&gt; to &lt;code&gt;__add__(),and other conversions&lt;/code&gt;), operators like &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;in&lt;/code&gt;, etc.. are also called Syntactic sugar.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;What is Syntactic sugar?&lt;/h3&gt;
&lt;p&gt;_&lt;strong&gt;A&lt;/strong&gt;_ccording to &lt;a href="https://en.wikipedia.org/wiki/Syntactic_sugar"&gt;Wikipedia&lt;/a&gt;, Syntact sugar is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In &lt;a href="https://en.wikipedia.org/wiki/Computer_science" title="Computer science"&gt;computer science&lt;/a&gt;, &lt;strong&gt;syntactic sugar&lt;/strong&gt; is &lt;a href="https://en.wikipedia.org/wiki/Syntax_%28programming_languages%29" title="Syntax (programming languages)"&gt;syntax&lt;/a&gt; within a &lt;a href="https://en.wikipedia.org/wiki/Programming_language" title="Programming language"&gt;programming language&lt;/a&gt; that is designed to make things easier to read or to express. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hence, &lt;em&gt;&lt;strong&gt;magic methods&lt;/strong&gt;&lt;/em&gt; can be said to be &lt;em&gt;&lt;strong&gt;Syntactic sugar.&lt;/strong&gt;&lt;/em&gt; But it's not just magic methods that are mapped to syntactic sugar methods, but higher order features such as &lt;a href="https://arvimal.wordpress.com/2016/05/30/decorators-object-oriented-programming/"&gt;Decorators&lt;/a&gt; are as well.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] def my_decorator(my_function): def inner_decorator(): print("This happened before!") my_function() print("This happens after ") print("This happened at the end!") return inner_decorator&lt;/p&gt;
&lt;p&gt;def my_decorated(): print("This happened!")&lt;/p&gt;
&lt;p&gt;var = my_decorator(my_decorated)&lt;/p&gt;
&lt;p&gt;if __name__ == '__main__': var() [/code] The example above borrows from one of the examples in the post on &lt;a href="https://arvimal.wordpress.com/2016/05/30/decorators-object-oriented-programming/"&gt;Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;my_decorator()&lt;/code&gt; is a decorator and is used to decorate &lt;code&gt;my_decorated()&lt;/code&gt;. But rather than calling the decorator function &lt;code&gt;my_decorator()&lt;/code&gt; with the argument &lt;code&gt;my_decorated()&lt;/code&gt;, the above code can be syntactically sugar-coated as below:&lt;/p&gt;
&lt;p&gt;[code language="python"] def my_decorator(my_function): def inner_decorator(): print("This happened before!") my_function() print("This happens after ") print("This happened at the end!") return inner_decorator&lt;/p&gt;
&lt;p&gt;@my_decorator def my_decorated(): print("This happened!")&lt;/p&gt;
&lt;p&gt;if __name__ == '__main__': my_decorated() [/code] Observing both code snippets, the decorator is syntactically sugar coated and called as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@my_decorator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;instead of instantiating the decorator with the function to be decorated as an argument, ie..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var = my_decorator(my_decorated)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;A few syntax resolution methods:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;'name' in my_list       -&amp;gt;      my_list.__contains__('name')&lt;/li&gt;
&lt;li&gt;len(my_list)                  -&amp;gt;      my_list.__len__()&lt;/li&gt;
&lt;li&gt;print(my_list)              -&amp;gt;      my_list.__repr__()&lt;/li&gt;
&lt;li&gt;my_list == "value"     -&amp;gt;      my_list.__eq__("value")&lt;/li&gt;
&lt;li&gt;my_list[5]                      -&amp;gt;      my_list.__getitem__(5)&lt;/li&gt;
&lt;li&gt;my_list[5:10]                 -&amp;gt;     my_list.__getslice__(5, 10)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE: This article is written from the notes created while learning magic methods. The following articles (along with several others) were referred as part of the process.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://www.rafekettler.com/magicmethods.pdf"&gt;A Guide to Python's Magic Methods&lt;/a&gt;, by Rafe Kettler&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#special-method-names"&gt;Special method names&lt;/a&gt;, The Official Python 3 documentation&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Decorators - Object Oriented Programming"</title><link href="https://arvimal.github.io/decorators-object-oriented-programming.html" rel="alternate"></link><published>2016-05-30T00:00:00+02:00</published><updated>2016-05-30T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-30:/decorators-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"classmethod"&lt;/li&gt;
&lt;li&gt;"decorators"&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"staticmethod"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;D&lt;/strong&gt;_ecorators are wrapper functions (or classes) that wrap and modify another function (or class), and change it's behavior as required. Decorators help to modify your code without actually modifying the working function/class itself.&lt;/p&gt;
&lt;p&gt;There are several inbuilt Decorators …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"classmethod"&lt;/li&gt;
&lt;li&gt;"decorators"&lt;/li&gt;
&lt;li&gt;"object-oriented-programming"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"staticmethod"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;D&lt;/strong&gt;_ecorators are wrapper functions (or classes) that wrap and modify another function (or class), and change it's behavior as required. Decorators help to modify your code without actually modifying the working function/class itself.&lt;/p&gt;
&lt;p&gt;There are several inbuilt Decorators in Python, such as &lt;code&gt;@classmethod&lt;/code&gt; and &lt;code&gt;@staticmethod&lt;/code&gt;. Examples on these are due for another post.&lt;/p&gt;
&lt;p&gt;Decorators are called to act upon a function or class, by mentioning the Decorator name just above the function/class.&lt;/p&gt;
&lt;p&gt;Decorators are written such as it returns a function, rather than output something.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language='python'] @my_decorator def my_func(): print("Hello")&lt;/p&gt;
&lt;p&gt;my_func() [/code]&lt;/p&gt;
&lt;p&gt;In the above code snippet, when &lt;code&gt;my_func()&lt;/code&gt; is called, the python interpreter calls the decorator function &lt;code&gt;my_decorator&lt;/code&gt;, executes it, and then passes the result to &lt;code&gt;my_func()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The example above doesn't do anything worth, but the following example should help to get a better idea.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The examples below are taken from the excellent talks done by Jillian Munson (in PyGotham 2014) and Mike Burns for &lt;a href="https://www.youtube.com/channel/UCUR1pFG_3XoZn3JNKjulqZg"&gt;ThoughtBot&lt;/a&gt;. The URLs are at &lt;a href="https://www.youtube.com/watch?v=yW0cK3IxlHc"&gt;[1]&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=Slf1b3yUocc"&gt;[2]&lt;/a&gt;. All credit goes to them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] def my_decorator(my_function): def inner_decorator(): print("This happened before!") my_function() print("This happens after ") print("This happened at the end!") return inner_decorator&lt;/p&gt;
&lt;p&gt;@my_decorator def my_decorated(): print("This happened!")&lt;/p&gt;
&lt;p&gt;if __name__ == '__main__': my_decorated() [/code]&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Components:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A function named &lt;code&gt;my_decorated()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A decorator function named &lt;code&gt;my_decorator()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The decorator function &lt;code&gt;my_decorator()&lt;/code&gt; has a function within itself named &lt;code&gt;inner_decorator()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The decorator function &lt;code&gt;my_decorator()&lt;/code&gt;, returns the inner function &lt;code&gt;inner_decorator()&lt;/code&gt;.&lt;ol&gt;
&lt;li&gt;Every function should return a value, if not it defaults to &lt;strong&gt;&lt;code&gt;None&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_decorator()&lt;/code&gt; decorator should return the &lt;code&gt;inner_decorator()&lt;/code&gt; inner function, else the decorator cannot be used with the &lt;code&gt;my_decorated()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;To understand this, test with 'return None' for the decorator function &lt;code&gt;my_decorator()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The inner function &lt;code&gt;inner_decorator()&lt;/code&gt; is the one that actually decorates (modifies) the function &lt;code&gt;my_decorated()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The decorator function is called on the function &lt;code&gt;my_decorated()&lt;/code&gt; using the format &lt;code&gt;@my_decorator&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The decorator function takes an argument, which can be named whatever the developer decides. When the decorator function is executed, the argument is replaced with the function name on which the decorator is executed. In our case, it would be &lt;code&gt;my_decorated()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;How does the code work?&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;my_decorated()&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;The interpreter sees that the decorator &lt;code&gt;@my_decorator&lt;/code&gt; is called wrt this function.&lt;/li&gt;
&lt;li&gt;The interpreter searches for a function named &lt;code&gt;my_decorator()&lt;/code&gt;and executes it.&lt;/li&gt;
&lt;li&gt;Since the decorator function returns the inner function &lt;code&gt;inner_decorator()&lt;/code&gt;, the python interpreter executes the inner function.&lt;/li&gt;
&lt;li&gt;It goes through each steps, reaches &lt;code&gt;my_function()&lt;/code&gt; , and gets it executed.&lt;/li&gt;
&lt;li&gt;Once that function is executed, it goes back and continues with the execution of the decorator &lt;code&gt;my_decorator()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[code language="bash"] # python decorators-1.py This happened before! # Called from the decorator This happened! # Called from the function This happens after # Called from the decorator This happened at the end! # Called from the decorator [/code]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] def double(my_func): def inner_func(a, b): return 2 * my_func(a, b) return inner_func&lt;/p&gt;
&lt;p&gt;@double def adder(a, b): return a + b&lt;/p&gt;
&lt;p&gt;@double def subtractor(a, b): return a - b&lt;/p&gt;
&lt;p&gt;print(adder(10, 20)) print(subtractor(6, 1)) [/code]&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Components:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Two functions named &lt;code&gt;adder()&lt;/code&gt; and &lt;code&gt;subtractor()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A decorator function named &lt;code&gt;double()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The decorator has an inner function named &lt;code&gt;inner_func()&lt;/code&gt; which does the actual intended work.&lt;/li&gt;
&lt;li&gt;The decorator returns the value of the inner function &lt;code&gt;inner_func()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Both the &lt;code&gt;adder()&lt;/code&gt; and &lt;code&gt;subtractor()&lt;/code&gt;functions are decorated with the decorator &lt;code&gt;double()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;How does the code work?&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We call the &lt;code&gt;adder()&lt;/code&gt; and &lt;code&gt;subtractor()&lt;/code&gt; functions with a print(), since the said functions don't print by default (due to the &lt;code&gt;return&lt;/code&gt; statement).&lt;/li&gt;
&lt;li&gt;The python interpreter sees the decorator &lt;code&gt;@double&lt;/code&gt; and calls it.&lt;/li&gt;
&lt;li&gt;Since the decorator returns the inner function &lt;code&gt;inner_func()&lt;/code&gt;, the interpreter executes it.&lt;/li&gt;
&lt;li&gt;The decorator takes an argument &lt;code&gt;my_func&lt;/code&gt;, which is always the function on which the decorator is applied, ie.. in our case &lt;code&gt;my_case == adder()&lt;/code&gt;and &lt;code&gt;my_case == subtractor()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The inner function within the decorator takes arguments, which are the arguments passed to the functions that are being decorated. ie.. Any arguments passed to &lt;code&gt;adder()&lt;/code&gt; and &lt;code&gt;subtractor()&lt;/code&gt;are passed to &lt;code&gt;inner_func()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The statement &lt;code&gt;return 2 * my_func(a, b)&lt;/code&gt; returns the value of :&lt;ol&gt;
&lt;li&gt;2 x &lt;code&gt;adder(10, 20)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2 x &lt;code&gt;subtractor(6, 1)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;[code language="bash"] # python decorators-2.py 60 10 [/code]&lt;/p&gt;
&lt;p&gt;Inbuilt decorators such as @staticmethod and @classmethod will be discussed in an upcoming post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: To see how decorators are syntactically sugar coated, read &lt;a href="https://arvimal.wordpress.com/2016/06/02/magic-methods-in-python/"&gt;Magic methods and Syntactic sugar in Python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Method Resolution Order - Object Oriented Programming"</title><link href="https://arvimal.github.io/method-resolution-order-object-oriented-programming.html" rel="alternate"></link><published>2016-05-30T00:00:00+02:00</published><updated>2016-05-30T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-30:/method-resolution-order-object-oriented-programming.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags: &lt;/li&gt;
&lt;li&gt;"inheritance"&lt;/li&gt;
&lt;li&gt;"method-resolution-order"&lt;/li&gt;
&lt;li&gt;"mro"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"&lt;strong&gt;bases&lt;/strong&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;strong&gt;base&lt;/strong&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;M&lt;/strong&gt;_ethod Resolution Order or 'MRO' in short, denotes the way a programming language resolves a method or attribute. This post looks into how Method Resolution Order works, using Python.&lt;/p&gt;
&lt;p&gt;Python supports classes inheriting from other classes. The class being …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags: &lt;/li&gt;
&lt;li&gt;"inheritance"&lt;/li&gt;
&lt;li&gt;"method-resolution-order"&lt;/li&gt;
&lt;li&gt;"mro"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"&lt;strong&gt;bases&lt;/strong&gt;"&lt;/li&gt;
&lt;li&gt;"&lt;strong&gt;base&lt;/strong&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;_&lt;strong&gt;M&lt;/strong&gt;_ethod Resolution Order or 'MRO' in short, denotes the way a programming language resolves a method or attribute. This post looks into how Method Resolution Order works, using Python.&lt;/p&gt;
&lt;p&gt;Python supports classes inheriting from other classes. The class being inherited is called the Parent/Super class, while the class that inherits is called the Child/Sub class.&lt;/p&gt;
&lt;p&gt;While inheriting from another class, the interpreter needs a way to resolve the methods that are being called via an instance. Hence a method resolution order is needed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"]&lt;/p&gt;
&lt;p&gt;class A(object): def my_func(self): print("Doing this in class A")&lt;/p&gt;
&lt;p&gt;class B(A): def my_func(self): print("Doing this in class B")&lt;/p&gt;
&lt;p&gt;my_instance = B() my_instance.my_func() [/code]&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Structure:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We've two classes,  &lt;code&gt;class A&lt;/code&gt; and &lt;code&gt;class B&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instantiate &lt;code&gt;class B&lt;/code&gt; as &lt;code&gt;my_instance&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;my_func()&lt;/code&gt; method through the &lt;code&gt;my_instance&lt;/code&gt; instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Where is the method fetched from? From &lt;code&gt;class B&lt;/code&gt; or &lt;code&gt;class A&lt;/code&gt;?&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;How does the code work?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This should be pretty obvious, the answer would be &lt;code&gt;class B&lt;/code&gt;. But why is it being called from &lt;code&gt;class B&lt;/code&gt; and not from &lt;code&gt;class A&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Answer : The &lt;strong&gt;Method Resolution Order&lt;/strong&gt; [MRO].&lt;/p&gt;
&lt;p&gt;To understand this in depth, let's check another example:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class A(object): def my_func(self): print("Doing this in Class A")&lt;/p&gt;
&lt;p&gt;class B(A): pass&lt;/p&gt;
&lt;p&gt;class C(object): def my_func(self): print("Doing this in Class C")&lt;/p&gt;
&lt;p&gt;class D(B, C): pass&lt;/p&gt;
&lt;p&gt;my_instance = D() my_instance.my_func() [/code]&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Four classes, class &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;D&lt;/code&gt; inherits from both &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;B&lt;/code&gt; inherits from &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; doesn't inherit from any super classes, but from the &lt;code&gt;object&lt;/code&gt; base class due to being new-style classes.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;A&lt;/code&gt; and class &lt;code&gt;C&lt;/code&gt; both have a method/function named &lt;code&gt;my_func()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;D&lt;/code&gt; is instantiated through &lt;code&gt;my_instance&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we were to call the method &lt;code&gt;my_func()&lt;/code&gt; through the &lt;code&gt;my_instance()&lt;/code&gt; instance, which class would it be called from? Would it be from class &lt;code&gt;A&lt;/code&gt; or class &lt;code&gt;C&lt;/code&gt;?&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;How does the code work?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This won't be as obvious as &lt;em&gt;&lt;strong&gt;Example 0.&lt;/strong&gt;&lt;/em&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The instance &lt;code&gt;my_instance()&lt;/code&gt; is created from class &lt;code&gt;D&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since class &lt;code&gt;D&lt;/code&gt;inherits from both class &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;, the python interpreter searches for the method &lt;code&gt;my_func()&lt;/code&gt; in both of these classes.&lt;/li&gt;
&lt;li&gt;The intrepreter finds that class &lt;code&gt;B&lt;/code&gt; inherits from class &lt;code&gt;A&lt;/code&gt;, and class &lt;code&gt;C&lt;/code&gt; doesn't have any super classes other than the default &lt;code&gt;object&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;A&lt;/code&gt; and class &lt;code&gt;C&lt;/code&gt; both has the method named &lt;code&gt;my_func()&lt;/code&gt;, and hence has to be called from one of these.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python follows a depth-first lookup order and hence ends up calling the method from class A.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following the depth-first Method Resolution Order, the lookup would be in the order :&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Class D -&amp;gt; Class B -&amp;gt; Class C&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's check another example, which can be a bit more complex.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class A(object): def my_func(self): print("Doing this in A")&lt;/p&gt;
&lt;p&gt;class B(A): pass&lt;/p&gt;
&lt;p&gt;class C(A): def my_func(self): print("doing this in C")&lt;/p&gt;
&lt;p&gt;class D(B, C): pass&lt;/p&gt;
&lt;p&gt;my_instance = D() my_instance.my_func() [/code]&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Structure:&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Four classes, class &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;D&lt;/code&gt; inherits from both &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;B&lt;/code&gt; inherits from class &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;C&lt;/code&gt; inherits from class &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Class &lt;code&gt;A&lt;/code&gt; inherits from the default base class &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;This sort of inheritance is called the &lt;code&gt;Diamond Inheritance&lt;/code&gt; or the &lt;code&gt;Deadly Diamond of death&lt;/code&gt; and looks like the following:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="220px-Diamond_inheritance.svg" src="images/220px-diamond_inheritance-svg.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image courtsey : &lt;a href="https://en.wikipedia.org/wiki/Multiple_inheritance"&gt;Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;How does the code work?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Following the depth-first Method Resolution Order, the lookup would be in the order :&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Class D -&amp;gt; Class B -&amp;gt; Class A -&amp;gt; Class C -&amp;gt; Class A&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In order to avoid ambiguity while doing a lookup for a method where multiple classes are inherited and involved, the MRO lookup has changed slightly from Python 2.3 onwards.&lt;/p&gt;
&lt;p&gt;It still goes for the depth-first order, but if the occurrence of a class happens multiple times in the MRO path, it removes the initial occurrence and keeps the latter.&lt;/p&gt;
&lt;p&gt;Hence, the look up order in &lt;em&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/em&gt; becomes:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Class D -&amp;gt; Class B -&amp;gt; Class C -&amp;gt; Class A.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: Python provides a method for a class to lookup the Method Resolution Order. Let's recheck Example 2 using that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] class A(object): def my_func(self): print("Calling this from A")&lt;/p&gt;
&lt;p&gt;class B(A): pass&lt;/p&gt;
&lt;p&gt;class C(A): def my_func(self): print("\nCalling this from C")&lt;/p&gt;
&lt;p&gt;class D(B, C): pass&lt;/p&gt;
&lt;p&gt;my_instance = D() my_instance.my_func()&lt;/p&gt;
&lt;p&gt;print("\nPrint the Method Resolution Order") print(D.mro()) print(D.__bases__) [/code] This should print:&lt;/p&gt;
&lt;p&gt;[code language="python"] # python /tmp/Example-2.py&lt;/p&gt;
&lt;p&gt;Calling this from C&lt;/p&gt;
&lt;p&gt;Print the Method Resolution Order class '__main__.D', class '__main__.B', class '__main__.C', class '__main__.A', type 'object'&lt;/p&gt;
&lt;p&gt;(, ) [/code]&lt;/p&gt;
&lt;h3&gt;Takeaway:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Python follows a depth-first order for resolving methods and attributes.&lt;/li&gt;
&lt;li&gt;In case of multiple inheritances where the methods happen to occur more than once, python omits the first occurrence of a class in the Method Resolution Order.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;class&amp;gt;.mro()&lt;/code&gt;methods helps to understand the Medthod Resolution Order.&lt;/li&gt;
&lt;li&gt;The `__bases__` and `__base__` magic methods help to understand the Base/Parent classes of a Sub/Child class.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Multiple_inheritance"&gt;https://en.wikipedia.org/wiki/Multiple_inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>"Ceph OSD heartbeats"</title><link href="https://arvimal.github.io/ceph-osd-heartbeats.html" rel="alternate"></link><published>2016-05-09T00:00:00+02:00</published><updated>2016-05-09T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-09:/ceph-osd-heartbeats.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Ceph OSD daemons need to ensure that the neighbouring OSDs are functioning properly so that the cluster remains in a healthy state.&lt;/p&gt;
&lt;p&gt;For this, each Ceph OSD process (ceph-osd) sends a heartbeat signal to the neighbouring OSDs. By default, the heartbeat signal is sent every 6 …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Ceph OSD daemons need to ensure that the neighbouring OSDs are functioning properly so that the cluster remains in a healthy state.&lt;/p&gt;
&lt;p&gt;For this, each Ceph OSD process (ceph-osd) sends a heartbeat signal to the neighbouring OSDs. By default, the heartbeat signal is sent every 6 seconds [1], which is configurable of course.&lt;/p&gt;
&lt;p&gt;If the heartbeat check from one OSD doesn't hear from the other within the set value for `osd_heartbeat_grace` [2], which is set to 20 seconds by default, the OSD that sends the heartbeat check reports the other OSD (the one that didn't respond within 20 seconds) as down, to the MONs. Once an OSD reports three times that the non-responding OSD is indeed `down`, the MON acknowledges it and mark the OSD as down.&lt;/p&gt;
&lt;p&gt;The Monitor will update the Cluster map and send it over to the participating nodes in the cluster.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OSD-heartbeat-1" src="images/osd-heartbeat-1.png"&gt;&lt;/p&gt;
&lt;p&gt;When an OSD can't reach another OSD for a heartbeat, it reports the following in the OSD logs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;osd.510 1497 heartbeat_check: no reply from osd.11 since back 2016-04-28 20:49:42.088802&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Ceph Jewel, the MONs require a minimum of two ceph OSDs report a specific OSD as down from two nodes which are in different CRUSH subtrees, in order to actually mark the OSD as down. These are controlled by the following tunables :&lt;/p&gt;
&lt;p&gt;From 'common/config_opts.h':&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[1] OPTION(mon_osd_min_down_reporters, OPT_INT, 2) // number of OSDs from different subtrees who need to report a down OSD for it to count&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[2] OPTION(mon_osd_reporter_subtree_level , OPT_STR, "host") // in which level of parent bucket the reporters are counted&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Image Courtsey : &lt;a href="https://access.redhat.com/documentation/en/red-hat-ceph-storage/version-1.3/red-hat-ceph-storage-13-ceph-configuration-guide/#osd-check-heartbeats"&gt;Red Hat Ceph Storage 1.3.2 Configuration guide&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Revamping the blog"</title><link href="https://arvimal.github.io/revamping-the-blog.html" rel="alternate"></link><published>2016-05-09T00:00:00+02:00</published><updated>2016-05-09T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-09:/revamping-the-blog.html</id><summary type="html">&lt;h2&gt;- "misc"&lt;/h2&gt;
&lt;p&gt;I did a revamp of the whole blog two days back. Switching the theme from 'Scrawl' to 'Independent Publisher' was part of it.  This theme is part of the hundreds of free themes in Wordpress, and looks both clean and impressive.&lt;/p&gt;
&lt;p&gt;'Independent Publisher' supports random header images from a …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "misc"&lt;/h2&gt;
&lt;p&gt;I did a revamp of the whole blog two days back. Switching the theme from 'Scrawl' to 'Independent Publisher' was part of it.  This theme is part of the hundreds of free themes in Wordpress, and looks both clean and impressive.&lt;/p&gt;
&lt;p&gt;'Independent Publisher' supports random header images from a list, at each page load. I'm using &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; for the images. These are free to use and distribute since its released under a &lt;a href="https://creativecommons.org/publicdomain/zero/1.0/"&gt;Creative Commons Zero&lt;/a&gt; licence. I have to say that the images are of superb quality and shows the awesome workmanship behind them.&lt;/p&gt;
&lt;p&gt;More information on the Unsplash license can be seen at &lt;a href="https://unsplash.com/license"&gt;https://unsplash.com/license&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"`ceph-check` - A Ceph installation checker"</title><link href="https://arvimal.github.io/ceph-check-a-ceph-installation-checker.html" rel="alternate"></link><published>2016-05-08T00:00:00+02:00</published><updated>2016-05-08T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-08:/ceph-check-a-ceph-installation-checker.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Many a user wants to know if a Ceph cluster installation has been done to a specific suggested guideline.&lt;/p&gt;
&lt;p&gt;Technologies like RAID is better avoided in Ceph due to an additional layer, which Ceph already takes care of.&lt;/p&gt;
&lt;p&gt;I've started writing a tool which can be run …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Many a user wants to know if a Ceph cluster installation has been done to a specific suggested guideline.&lt;/p&gt;
&lt;p&gt;Technologies like RAID is better avoided in Ceph due to an additional layer, which Ceph already takes care of.&lt;/p&gt;
&lt;p&gt;I've started writing a tool which can be run from the Admin node, and it aims to check various such points.&lt;/p&gt;
&lt;p&gt;The code can be seen at &lt;a href="https://github.com/arvimal/ceph_check"&gt;https://github.com/arvimal/ceph_check&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The work is slow, really slow, due to my daily work, procrastination, and what not, even though I intend to finish this fast.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Code complexity - The Big O notation [O(n)]"</title><link href="https://arvimal.github.io/code-complexity-the-big-o-notation-on.html" rel="alternate"></link><published>2016-05-08T00:00:00+02:00</published><updated>2016-05-08T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-08:/code-complexity-the-big-o-notation-on.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"algorithms"&lt;/li&gt;
&lt;li&gt;"big-o-notation"&lt;/li&gt;
&lt;li&gt;"code-complexity"&lt;/li&gt;
&lt;li&gt;"data-structures"&lt;/li&gt;
&lt;li&gt;"on"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Efficiency or Complexity is how well you're using your resources to get your code run.&lt;/p&gt;
&lt;p&gt;Efficiency can be calculated on the basis of how much time your code takes to run/execute.&lt;/p&gt;
&lt;p&gt;Understanding the efficiency of your code can help to reduce …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"algorithms"&lt;/li&gt;
&lt;li&gt;"big-o-notation"&lt;/li&gt;
&lt;li&gt;"code-complexity"&lt;/li&gt;
&lt;li&gt;"data-structures"&lt;/li&gt;
&lt;li&gt;"on"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Efficiency or Complexity is how well you're using your resources to get your code run.&lt;/p&gt;
&lt;p&gt;Efficiency can be calculated on the basis of how much time your code takes to run/execute.&lt;/p&gt;
&lt;p&gt;Understanding the efficiency of your code can help to reduce the complexity, thus improving the runtime efficiency further. Getting the same job done in less time and less system resources is always good.&lt;/p&gt;
&lt;p&gt;Once you find the efficiency of your program, you can start to find ways for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the complexity (or increase the efficiency) which will reduce the program run time, and hence free the computer resources in a proportional rate.&lt;/li&gt;
&lt;li&gt;Try to maintain a constant or reduced run time for a growing data set, which will help your program to fare well when the input size grows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Computer Science, the `Big O` notation is used to indicate the effieciency or complexity of a program. It is denoted by 'O(n)', where 'n' is a mathematical function to denote the input. This is&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;p&gt;O(n) O(n³) O(n log(n)) O(√n) O(O(n) + 1) or O(1)&lt;/p&gt;
&lt;p&gt;Efficiency can be measures on the best, average, and worst cases. For example, consider finding a specific alphabet from a list of all the alphabets jumbled up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The worst case is your program running through all 26 iterations and finding the alphabet as the last value.&lt;/li&gt;
&lt;li&gt;The best case is when your program finds it in the first iteration itself.&lt;/li&gt;
&lt;li&gt;The average is when your program finds the alphabet somewhere around 12-15 iterations (ie.. half of the worst case scenario).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Study of Data structures and Algorithms aim to study program complexities, and to reduce it as much as possible.&lt;/p&gt;
&lt;p&gt;Algorithms are a series of well-defined steps you follow to solve a problem, whereas Data Structures are specific structures by which how you layout your data. Application of well-known algorithms in a program can help in reducing the run time.&lt;/p&gt;
&lt;p&gt;More on Time complexity and the Big O notation can be read at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Time_complexity"&gt;https://en.wikipedia.org/wiki/Time_complexity&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;https://en.wikipedia.org/wiki/Big_O_notation&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Data Structures - Arrays"</title><link href="https://arvimal.github.io/data-structures-arrays.html" rel="alternate"></link><published>2016-05-08T00:00:00+02:00</published><updated>2016-05-08T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-08:/data-structures-arrays.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Arrays are a commonly used data structure, and is one of the first a DS student looks into.&lt;/p&gt;
&lt;p&gt;It is created as a collection of memory addresses which are contiguous in memory. These memory locations store data of a specific type depending on the array's type.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"data-structures-and-algorithms"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Arrays are a commonly used data structure, and is one of the first a DS student looks into.&lt;/p&gt;
&lt;p&gt;It is created as a collection of memory addresses which are contiguous in memory. These memory locations store data of a specific type depending on the array's type.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays are easier to create since the size and type is mentioned at the creation time.&lt;/li&gt;
&lt;li&gt;Arrays have constant access/lookup time since the lookup is done by accessing the memory location as an offset from the base/first element. Hence the complexity will be O(1).&lt;/li&gt;
&lt;li&gt;Arrays are contiguous in memory, ie.. a 10 cell array can start at perhaps 0x0001 and end at 0x0010.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The size of an array has to be defined at the time of its creation. This make the size static, and hence cannot be resized later.&lt;/li&gt;
&lt;li&gt;An array can only accomodate a specific data type. The type of data an array can store has to be defined at creation time. Hence, if an array is set to store integers, it can only store integers in each memory location.&lt;/li&gt;
&lt;li&gt;Since the size of an array is set at the time of creation, allocating an array may fail depending on the size of the array and the available memory on the machine.&lt;/li&gt;
&lt;li&gt;Inserting an element into an array can be expensive depending on the location. To insert an element at a particular position, for example 'n', the element already has to be moved to 'n + 1', the element at 'n + 1' to 'n + 2' etc.. Hence, if the position to which the element is written to is at the starting of the array, the operation will be expensive. But if the position is at the starting, it won't be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What is the lookup time in an array?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The elements in an array are continuguous to each other. The address of an element is looked up as an `offset` of the primary or base element. Hence, the lookup of any element in the array is constant and can be denoted by O(1).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arrays in Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python doesn't have a direct implementation of an Array. The one that closely resembles an array in python is a `list`.&lt;/p&gt;
&lt;p&gt;The major differences between an array and a list are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The size of lists are not static. It can be grown or shrinked using the `append` and `remove` methods. Arrays are static in size.&lt;/li&gt;
&lt;li&gt;lists can accomodate multiple data types, while arrays cannot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[code language="python"] In [1]: mylist = []&lt;/p&gt;
&lt;p&gt;In [2]: type(mylist) Out[2]: list&lt;/p&gt;
&lt;p&gt;In [3]: mylist.append("string")&lt;/p&gt;
&lt;p&gt;In [4]: mylist.append(1000)&lt;/p&gt;
&lt;p&gt;In [5]: mylist Out[5]: ['string', 1000] [/code]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time complexity of Arrays&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Indexing    - O(1)&lt;/li&gt;
&lt;li&gt;Insertion/Deletion at beginning - O(n) (If the array has space to shift the elements)&lt;/li&gt;
&lt;li&gt;Insertion/Deletion at the end - O(1) (If the array has space at the end)&lt;/li&gt;
&lt;li&gt;Deletion at the end - O(1) (Since it doesn't have to move any elements and reorder)&lt;/li&gt;
&lt;li&gt;Insertion at the middle - O(n) (Since it requires to move the elements to the right and reorder)&lt;/li&gt;
&lt;li&gt;Deletion at the middle - O(n) (Since it requires to delete the element and move the ones from the right to the left)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The 'array' module&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python comes with a module named 'array' which emulates the behavior of arrays.&lt;/p&gt;
&lt;p&gt;[code language="python"] In [24]: import array&lt;/p&gt;
&lt;p&gt;In [25]: myarray = array.array('i', [1,2,3,4])&lt;/p&gt;
&lt;p&gt;In [26]: myarray Out[26]: array('i', [1, 2, 3, 4]) [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"How to get a Ceph MON/OSD map at a specific epoch?"</title><link href="https://arvimal.github.io/how-to-get-a-ceph-monosd-map-at-a-specific-epoch.html" rel="alternate"></link><published>2016-05-08T00:00:00+02:00</published><updated>2016-05-08T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2016-05-08:/how-to-get-a-ceph-monosd-map-at-a-specific-epoch.html</id><summary type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;To get a MON map or an OSD map of a specific epoch, use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd getmap &lt;epoch-value&gt; # ceph mon getmap &lt;epoch-value&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The map can be forwarded to a file as following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd getmap &lt;epoch-value&gt; -o /tmp/ceph_osd_getmap.bin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This would be in a binary format, and hence will need to …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;To get a MON map or an OSD map of a specific epoch, use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd getmap &lt;epoch-value&gt; # ceph mon getmap &lt;epoch-value&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The map can be forwarded to a file as following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd getmap &lt;epoch-value&gt; -o /tmp/ceph_osd_getmap.bin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This would be in a binary format, and hence will need to be dumped to a human-readable form.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# osdmaptool --print /tmp/ceph-osd-getmap.bin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will print the current OSD map, similar to the output of 'ceph osd dump'.&lt;/p&gt;
&lt;p&gt;Where this command shines is when you can fetch maps from previous epochs, and pull information on specific placement groups in those epochs.&lt;/p&gt;
&lt;p&gt;For example, I've had all the OSDs on one of my node down some time back (in a previous epoch). The ability to query a previous epoch gives the administrator the power to understand how exactly the cluster was at a specific time period.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"List RBD images, snapshots, and clones in Ceph pools"</title><link href="https://arvimal.github.io/list-rbd-images-snapshots-and-clones-in-ceph-pools.html" rel="alternate"></link><published>2015-10-15T00:00:00+02:00</published><updated>2015-10-15T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-10-15:/list-rbd-images-snapshots-and-clones-in-ceph-pools.html</id><summary type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;This is a crude bash one-liner I did to get the details of all the RBD images, as well as the information on snapshots and clones created from them.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # for pool in `rados lspools`; do echo "POOL :" $pool; rbd ls -l $pool; echo "-----"; done [/code]&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;This is a crude bash one-liner I did to get the details of all the RBD images, as well as the information on snapshots and clones created from them.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # for pool in `rados lspools`; do echo "POOL :" $pool; rbd ls -l $pool; echo "-----"; done [/code]&lt;/p&gt;
&lt;p&gt;This will print an output similar to the following:&lt;/p&gt;
&lt;p&gt;[code language="bash"] POOL : rbd NAME                             SIZE        PARENT  FMT PROT LOCK test_img                        10240M                    1 test_img2                      1024M                      2 test_img2@snap2      1024M                      2                    yes ----- POOL : .rgw.root ----- POOL : .rgw.control ----- POOL : .rgw ----- POOL : .rgw.gc ----- POOL : .users.uid ----- POOL : .users ----- POOL : .users.swift ----- POOL : .users.email ----- POOL : .rgw.buckets.index ----- POOL : images NAME           SIZE      PARENT                               FMT PROT LOCK clone1           1024M  rbd/test_img2@snap2             2 ----- [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"range() and enumerate()"</title><link href="https://arvimal.github.io/range-and-enumerate.html" rel="alternate"></link><published>2015-10-12T00:00:00+02:00</published><updated>2015-10-12T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-10-12:/range-and-enumerate.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"enumerate"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"range"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The usual way to iterate over a range of numbers or a list in python, is to use &lt;strong&gt;range().&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] colors = ["yellow", "red", "blue", "white", "black"]&lt;/p&gt;
&lt;p&gt;for i in range(len(colors)): print(i, colors[i]) [/code]&lt;/p&gt;
&lt;p&gt;This should …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"enumerate"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;li&gt;"range"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The usual way to iterate over a range of numbers or a list in python, is to use &lt;strong&gt;range().&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example 0:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[code language="python"] colors = ["yellow", "red", "blue", "white", "black"]&lt;/p&gt;
&lt;p&gt;for i in range(len(colors)): print(i, colors[i]) [/code]&lt;/p&gt;
&lt;p&gt;This should output:&lt;/p&gt;
&lt;p&gt;[code language="bash"] (0, 'yellow') (1, 'red') (2, 'blue') (3, 'white') (4, 'black') [/code]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;print()&lt;/strong&gt;, by default, returns a tuple. If we want to print it in a more presentable way, we’ll need to find the indice at which each value is, and print that as well. Re-write the code a bit, to achieve the desired output:&lt;/p&gt;
&lt;p&gt;[code language="python"] colors = ["yellow", "red", "blue", "white", "black"]&lt;/p&gt;
&lt;p&gt;for i in range(len(colors)): color = colors[i] print("%d: %s" % (i, color)) [/code]&lt;/p&gt;
&lt;p&gt;This should print:&lt;/p&gt;
&lt;p&gt;[code language="bash"] 0: yellow 1: red 2: blue 3: white 4: black [/code]&lt;/p&gt;
&lt;p&gt;We can see that the above output starts with ‘0’ since python starts counting from ‘0’. To change that to ‘1’, we’ll need to tweak the &lt;strong&gt;print()&lt;/strong&gt; statement.&lt;/p&gt;
&lt;p&gt;[code language="python"] colors = ["yellow", "red", "blue", "white", "black"]&lt;/p&gt;
&lt;p&gt;for i in range(len(colors)): color = colors[i] print("%d: %s" % (i + 1, color)) [/code]&lt;/p&gt;
&lt;p&gt;This should print:&lt;/p&gt;
&lt;p&gt;[code language="bash"] 1: yellow 2: red 3: blue 4: white 5: black [/code]&lt;/p&gt;
&lt;p&gt;Even though the above code snippet isn’t that complex, a much better way exists to do this. This is where the builtin function &lt;strong&gt;enumerate()&lt;/strong&gt; comes in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;enumerate()&lt;/strong&gt; returns a tuple when passed an object which supports iteration, for example, a list. It also supports a second argument named '&lt;strong&gt;start&lt;/strong&gt;' which default to 0, and can be changed depending on where to start the order. We’ll check what '&lt;strong&gt;start&lt;/strong&gt;' is towards the end of this article.&lt;/p&gt;
&lt;p&gt;[code language="python"] colors = ["yellow", "red", "blue", "white", "black"] print(list(enumerate(colors))) [/code]&lt;/p&gt;
&lt;p&gt;This returns a list of a tuples.&lt;/p&gt;
&lt;p&gt;[code language="bash"] [(0, 'yellow'), (1, 'red'), (2, 'blue'), (3, 'white'), (4, 'black')] [/code]&lt;/p&gt;
&lt;p&gt;To get to what we desire, modify it as:&lt;/p&gt;
&lt;p&gt;[code language="python"] for i, color in enumerate(colors): print('%d: %s' % (i, color)) [/code]&lt;/p&gt;
&lt;p&gt;This outputs:&lt;/p&gt;
&lt;p&gt;[code language="bash"] 0: yellow 1: red 2: blue 3: white 4: black [/code]&lt;/p&gt;
&lt;p&gt;Remember that we talked about that &lt;strong&gt;enumerate()&lt;/strong&gt; takes a second value named '&lt;strong&gt;start&lt;/strong&gt;' which defaults to ‘0’? Let’s check how that’ll help here.&lt;/p&gt;
&lt;p&gt;The above output starts with ‘&lt;strong&gt;0&lt;/strong&gt;’. '&lt;strong&gt;start'&lt;/strong&gt; can help to change that.&lt;/p&gt;
&lt;p&gt;[code language="python"] for i, color in enumerate(colors, start=1): print('%d: %s' % (i, color)) [/code]&lt;/p&gt;
&lt;p&gt;This should change the output as:&lt;/p&gt;
&lt;p&gt;[code language="bash"] 1: yellow 2: red 3: blue 4: white 5: black [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Ceph and unfound objects"</title><link href="https://arvimal.github.io/ceph-and-unfound-objects.html" rel="alternate"></link><published>2015-10-07T00:00:00+02:00</published><updated>2015-10-07T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-10-07:/ceph-and-unfound-objects.html</id><summary type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;In certain cases, a Ceph cluster may move away from an HEALTHY state due to “&lt;strong&gt;unfound&lt;/strong&gt;” objects.&lt;/p&gt;
&lt;p&gt;A “&lt;strong&gt;&lt;em&gt;ceph -s&lt;/em&gt;&lt;/strong&gt;” should show if you have any unfound objects. So, what are unfound objects? How does an object become “&lt;strong&gt;unfound&lt;/strong&gt;”? This article tries to explain why/how “&lt;strong&gt;unfound&lt;/strong&gt;” objects come …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;In certain cases, a Ceph cluster may move away from an HEALTHY state due to “&lt;strong&gt;unfound&lt;/strong&gt;” objects.&lt;/p&gt;
&lt;p&gt;A “&lt;strong&gt;&lt;em&gt;ceph -s&lt;/em&gt;&lt;/strong&gt;” should show if you have any unfound objects. So, what are unfound objects? How does an object become “&lt;strong&gt;unfound&lt;/strong&gt;”? This article tries to explain why/how “&lt;strong&gt;unfound&lt;/strong&gt;” objects come into existence.&lt;/p&gt;
&lt;p&gt;Let’s look into the life cycle of a write to a pool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The client contacts a Ceph monitor and fetches the CRUSH map, which includes:&lt;ul&gt;
&lt;li&gt;MON map&lt;/li&gt;
&lt;li&gt;OSD map&lt;/li&gt;
&lt;li&gt;PG map&lt;/li&gt;
&lt;li&gt;CRUSH map&lt;/li&gt;
&lt;li&gt;MDS map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the client has the maps, the Ceph client-side algorithm breaks the data being written into objects (the object size depends on the client side configuration). Clients such as RBD and RGW uses a 4MB object size, but RADOS doesn’t actually have such a limitation.&lt;/p&gt;
&lt;p&gt;Each pool has a set of &lt;strong&gt;Placement Groups&lt;/strong&gt; (&lt;strong&gt;PG&lt;/strong&gt;) assigned to it at the time of creation, and the client always writes to a pool. Since the client has the maps which talks about the entire cluster, it knows the placement groups within the pool which it is writing to, and the OSDs assigned for each placement group. The client talks to the OSDs directly without going over any other path, such as a monitor.&lt;/p&gt;
&lt;p&gt;The PG map will have the &lt;strong&gt;ACTING&lt;/strong&gt; and &lt;strong&gt;UP&lt;/strong&gt; OSD sets for each PG. To understand the ACTING set and UP set for the PGs, as well as a plethora of other information, use :&lt;/p&gt;
&lt;p&gt;[code language="bash"] # ceph pg dump [/code]&lt;/p&gt;
&lt;p&gt;The ACTING set is the current active set of OSDs that stores the replica sets for that particular PG. The UP set is the set of OSDs that are currently up and running. Usually, the ACTING set and UP set are the same. When an OSD in the ACTING set is not reachable, other OSDs wait for 5 minutes (which is configurable) for it to come back online (this is checked with a hearbeat).&lt;/p&gt;
&lt;p&gt;The said OSD is removed out of the UP set when it is not accessible. If it doesn’t come back online within the configured period, the said OSD is marked out of the ACTING set, as well as the UP set. When it comes back, it is added back to the ACTING/UP set and a peering happens where the data is synced back.&lt;/p&gt;
&lt;p&gt;Let’s discuss the scenario where an “unfound” object came come into existence. Imagine a pool with a two replica configuration. A write that goes into the pool is split into objects and stored in the OSDs which are in the ACTIVE set of a PG.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One OSD in the ACTING set goes down.&lt;/li&gt;
&lt;li&gt;The write is done on the second OSD which is UP and ACTING.&lt;/li&gt;
&lt;li&gt;The first OSD which went down, came back up.&lt;/li&gt;
&lt;li&gt;The peering process started between the first OSD (that came back), and the second OSD (that serviced the write).&lt;ul&gt;
&lt;li&gt;Peering refers to the process of arriving at an understanding on the object states between the OSDs in an ACTING set, and sync up the metadata/data between them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both the OSDs reach an understanding on which objects needs to be synced.&lt;/li&gt;
&lt;li&gt;The second OSD that had the objects ready to be synced, went down before the sync process starts or is in midway.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this situation, the first OSD knows about the objects that was written to the second OSD, but cannot probe it. The first OSD will try to probe possible locations for copies, provided there are more replicas. If the OSD is able to find other locations, the data will be synced up.&lt;/p&gt;
&lt;p&gt;But in case there are no other copies, and the OSD with the only copy is not coming up anytime soon (perhaps a disk crash, file system corruption etc..) the only way is to either mark the object as “lost”, or revert it back to the previous version. Reverting to a previous version may not be possible for a new object, and in such cases the only way would be to mark it as “lost” or copy from a backup.&lt;/p&gt;
&lt;p&gt;1. For a new object without a previous version:&lt;/p&gt;
&lt;p&gt;[code language="bash"] # ceph pg {pg.num} mark_unfound_lost delete [/code]&lt;/p&gt;
&lt;p&gt;2. For an object which is likely to have a previous version:&lt;/p&gt;
&lt;p&gt;[code language="bash"] # ceph pg {pg.num} mark_unfound_lost revert [/code]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The upstream Ceph documentation has an excellent write-up about “unfound” objects &lt;a href="http://docs.ceph.com/docs/master/rados/troubleshooting/troubleshooting-pg/#unfound-objects"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I suggest reading the documentation prior taking any sort of action in a case where you see “unfound” objects in your cluster.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Ceph Rados Block Device (RBD) and TRIM"</title><link href="https://arvimal.github.io/ceph-rados-block-device-rbd-and-trim.html" rel="alternate"></link><published>2015-10-07T00:00:00+02:00</published><updated>2015-10-07T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-10-07:/ceph-rados-block-device-rbd-and-trim.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"discard"&lt;/li&gt;
&lt;li&gt;"fstrim"&lt;/li&gt;
&lt;li&gt;"objects"&lt;/li&gt;
&lt;li&gt;"rados"&lt;/li&gt;
&lt;li&gt;"rados-block-device"&lt;/li&gt;
&lt;li&gt;"rbd"&lt;/li&gt;
&lt;li&gt;"trim"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I recently came across a scenario where the objects in a RADOS pool used for an RBD block device doesn’t get removed, even if the files created through the mount point were removed.&lt;/p&gt;
&lt;p&gt;I had an RBD image from …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"discard"&lt;/li&gt;
&lt;li&gt;"fstrim"&lt;/li&gt;
&lt;li&gt;"objects"&lt;/li&gt;
&lt;li&gt;"rados"&lt;/li&gt;
&lt;li&gt;"rados-block-device"&lt;/li&gt;
&lt;li&gt;"rbd"&lt;/li&gt;
&lt;li&gt;"trim"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I recently came across a scenario where the objects in a RADOS pool used for an RBD block device doesn’t get removed, even if the files created through the mount point were removed.&lt;/p&gt;
&lt;p&gt;I had an RBD image from an RHCS1.3 cluster mapped to a RHEL7.1 client machine, with an XFS filesystem created on it, and mounted locally. Created a 5GB file, and I could see the objects being created in the rbd pool in the ceph cluster.&lt;/p&gt;
&lt;p&gt;1.RBD block device information&lt;/p&gt;
&lt;p&gt;[code language="bash"] # rbd info rbd_img rbd image 'rbd_img': size 10240 MB in 2560 objects order 22 (4096 kB objects) block_name_prefix: rb.0.1fcbe.2ae8944a format: 1 [/code]&lt;/p&gt;
&lt;p&gt;An XFS file system was created on this block device, and mounted at &lt;strong&gt;/test.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.Write a file onto the RBD mapped mount point. Used ‘&lt;strong&gt;dd&lt;/strong&gt;’ to write a 5GB file.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # dd if=/dev/zero of=/mnt/rbd_image.img bs=1G count=5 5+0 records in 5+0 records out 5368709120 bytes (5.4 GB) copied, 8.28731 s, 648 MB/s [/code]&lt;/p&gt;
&lt;p&gt;3.Check the objects in the backend RBD pool&lt;/p&gt;
&lt;p&gt;[code language="bash"] # rados -p rbd ls | wc -l &amp;lt; Total number of objects in the 'rbd' pool&amp;gt; [/code]&lt;/p&gt;
&lt;p&gt;4.Delete the file from the mount point.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # rm /test/rbd_image.img -f # ls /test/ --NO FILES LISTED-- [/code]&lt;/p&gt;
&lt;p&gt;5.List the objects in the RBD pool&lt;/p&gt;
&lt;p&gt;[code language="bash"] # rados -p rbd ls | wc -l &amp;lt; Total number of objects in the 'rbd' pool &amp;gt; [/code]&lt;/p&gt;
&lt;p&gt;The number of objects doesn’t go down as we expect, after the file deletion. It remains the same, wrt to step 3.&lt;/p&gt;
&lt;p&gt;Why does this happen? This is due to the fact that traditional file systems do not delete the underlying data blocks even if the files are deleted.&lt;/p&gt;
&lt;p&gt;The process of writing a file onto a file system involves several steps like finding free blocks and allocating them for the new file, creating an entry in the directory entry structure of the parent folder, setting the name and inode number in the directory entry structure, setting pointers from the inode to the data blocks allocated for the file etc..&lt;/p&gt;
&lt;p&gt;When data is written to the file, the data blocks are used to store the data. Additional information such as the file size, access times etc.. are updated in the inode after the writes.&lt;/p&gt;
&lt;p&gt;Deleting a file involves removing the pointers from the inode to the corresponding data blocks, and also clearing the name&amp;lt;-&amp;gt;inode mapping from the directory entry structure of the parent folder. But, the underlying data blocks are not cleared off, since that is a high I/O intensive operation. So, the data remains on the disk, even if the file is not present. A new write will make the allocator take these blocks for the new data, since they are marked as not-in-use.&lt;/p&gt;
&lt;p&gt;This applies for the files created on an RBD device as well. The files created on top of the RBD-mapped mount point will ultimately be mapped to objects in the RADOS cluster. When the file is deleted from the mount point, since the entry is removed, it doesn’t show up in the mount point.&lt;/p&gt;
&lt;p&gt;But, since the file system doesn’t clear off the underlying block device, the objects remain in the &lt;strong&gt;RADOS&lt;/strong&gt; pool. These would be normally over-written when a new file is created via the mount point.&lt;/p&gt;
&lt;p&gt;But this has a catch though. Since the pool contains the objects even if the files are deleted, it consumes space in the rados pool (even if they'll be overwritten). An administrator won't be able to get a clear understanding on the space usage, if the pool is used heavily, and multiple writes are coming in.&lt;/p&gt;
&lt;p&gt;In order to clear up the underlying blocks, or actually remove them, we can rely on the &lt;strong&gt;TRIM&lt;/strong&gt; support most modern disks offer. Read more about &lt;strong&gt;TRIM&lt;/strong&gt; at &lt;a href="https://en.wikipedia.org/wiki/Trim_%28computing%29"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRIM&lt;/strong&gt; is a set of commands supported by HDD/SSDs which allow the operating systems to let the disk know about the locations which are not currently being used. Upon receiving a confirmation from the file system layer, the disk can go ahead and mark the blocks as not used.&lt;/p&gt;
&lt;p&gt;For the TRIM commands to work, the disks and the file system has to have the support. All the modern file systems have built-in support for &lt;strong&gt;TRIM&lt;/strong&gt;. Mount the file system with the '&lt;strong&gt;discard&lt;/strong&gt;' option, and you're good to go.&lt;/p&gt;
&lt;p&gt;[code language="bash"] # mount -o discard /dev/rbd{X}{Y} /{mount-point} [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Custom CRUSH rulesets and pools"</title><link href="https://arvimal.github.io/custom-crush-rulesets-and-pools.html" rel="alternate"></link><published>2015-09-23T00:00:00+02:00</published><updated>2015-09-23T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-09-23:/custom-crush-rulesets-and-pools.html</id><summary type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;Ceph supports custom rulesets via &lt;a href="http://ceph.com/papers/weil-crush-sc06.pdf"&gt;CRUSH&lt;/a&gt;, which can be used to sort hardware based on various features such as speed and other factors, set custom weights, and do a lot of other useful things.&lt;/p&gt;
&lt;p&gt;Pools, or the buckets were the data is written to, can be created on the …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "ceph"&lt;/h2&gt;
&lt;p&gt;Ceph supports custom rulesets via &lt;a href="http://ceph.com/papers/weil-crush-sc06.pdf"&gt;CRUSH&lt;/a&gt;, which can be used to sort hardware based on various features such as speed and other factors, set custom weights, and do a lot of other useful things.&lt;/p&gt;
&lt;p&gt;Pools, or the buckets were the data is written to, can be created on the custom rulesets, hence positioning the pools on specific hardware as per the administrator's need.&lt;/p&gt;
&lt;p&gt;A large Ceph cluster may have lots of pools and rulesets specific for multiple use-cases. There may be times when we'd like to understand the pool to ruleset mapping.&lt;/p&gt;
&lt;p&gt;The default CRUSH ruleset is named ‘replicated_ruleset’. The available CRUSH rulesets can be listed with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;$ ceph osd crush rule ls&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On a fresh cluster, or one without any custom rulesets, you’d find the following being printed to stdout.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph osd crush rule ls&lt;/strong&gt; [ "replicated_ruleset" ]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve got a couple more on my cluster, and this is how it looks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph osd crush rule ls&lt;/strong&gt; [ "replicated_ruleset", "replicated_ssd", "erasure-code"]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since this article looks into the mapping of pools to CRUSH rulesets, it’d be good to add in how to list the pools, as a refresher.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph osd lspools&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On my Ceph cluster, it turned out to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph osd lspools&lt;/strong&gt; 0 data,1 metadata,2 rbd,21 .rgw,22 .rgw.root,23 .rgw.control,24 .rgw.gc,25 .users.uid,26 .users,27 .users.swift,28 test_pool,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since you have the pool name you’re interested in, let’s see how to map it to the ruleset. The command syntax is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph osd pool get &lt;pool\_name&gt; crush_ruleset&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was interested to understand the ruleset on which the pool ‘test_pool’ was created. The command to list this was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph osd pool get test_pool crush_ruleset&lt;/strong&gt; crush_ruleset: 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please note that the rulesets are numbered from ‘0’, and hence ‘1’ would map to the CRUSH ruleset ‘replicated_ssd’.&lt;/p&gt;
&lt;p&gt;We'll try to understand how a custom ruleset is created, in another article.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"OSD information in a scriptable format"</title><link href="https://arvimal.github.io/osd-information-in-a-scriptable-format.html" rel="alternate"></link><published>2015-09-18T00:00:00+02:00</published><updated>2015-09-18T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-09-18:/osd-information-in-a-scriptable-format.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In case you are trying to get the OSD ID and the corresponding node IP address mappings in a script-able format, use the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd find &lt;OSD-num&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will print the OSD number, the IP address, the host name, and the default root in the …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In case you are trying to get the OSD ID and the corresponding node IP address mappings in a script-able format, use the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd find &lt;OSD-num&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will print the OSD number, the IP address, the host name, and the default root in the CRUSH map, as a python dictionary.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd find 2 { "osd": 2, "ip": "192.168.122.112:6800\/5311", "crush_location": { "host": "node4", "root": "default"}}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The output is in json format, which has a key:value format. This can be parsed using awk/sed, or any programming languages that support json. All recent ones do.&lt;/p&gt;
&lt;p&gt;For a listing of all the OSDs and related information, get the number of OSDs in the cluster, and then use that number to probe the OSDs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# for i in `seq 0 $(ceph osd stat | awk {'print $3'})`; do&lt;/p&gt;
&lt;p&gt;ceph osd find $i; echo; done&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This should output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{ "osd": 0, "ip": "192.168.122.244:6805\/2579", "crush_location": { "host": "node3", "root": "ssd"}} { "osd": 1, "ip": "192.168.122.244:6800\/955", "crush_location": { "host": "node3", "root": "ssd"}} { "osd": 2, "ip": "192.168.122.112:6800\/5311", "crush_location": { "host": "node4", "root": "default"}} { "osd": 3, "ip": "192.168.122.112:6805\/5626", "crush_location": { "host": "node4", "root": "default"}} { "osd": 4, "ip": "192.168.122.82:6800\/4194", "crush_location": { "host": "node5", "root": "default"}} { "osd": 5, "ip": "192.168.122.82:6805\/4521", "crush_location": { "host": "node5", "root": "default"}} { "osd": 6, "ip": "192.168.122.73:6801\/5614", "crush_location": { "host": "node2", "root": "ssd"}} { "osd": 7, "ip": "192.168.122.73:6800\/1719", "crush_location": { "host": "node2", "root": "ssd"}} { "osd": 8, "ip": "192.168.122.10:6805\/5842", "crush_location": { "host": "node6", "root": "default"}} { "osd": 9, "ip": "192.168.122.10:6800\/4356", "crush_location": { "host": "node6", "root": "default"}} { "osd": 10, "ip": "192.168.122.109:6800\/4517", "crush_location": { "host": "node7", "root": "default"}} { "osd": 11, "ip": "192.168.122.109:6805\/4821", "crush_location": { "host": "node7", "root": "default"}}&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"Monitor maps, how to edit them?"</title><link href="https://arvimal.github.io/monitor-maps-how-to-edit-them.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-09-01:/monitor-maps-how-to-edit-them.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;li&gt;"monmaptool"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;strong&gt;MON map&lt;/strong&gt; is used by the monitors in a Ceph cluster, where they keep track of various attributes relevant to the working of the cluster.&lt;/p&gt;
&lt;p&gt;Similar to the &lt;a href="http://ceph.com/papers/weil-crush-sc06.pdf"&gt;CRUSH&lt;/a&gt; map, a monitor map can be pulled out of the cluster, inspected, changed, and injected …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;li&gt;"monmaptool"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;strong&gt;MON map&lt;/strong&gt; is used by the monitors in a Ceph cluster, where they keep track of various attributes relevant to the working of the cluster.&lt;/p&gt;
&lt;p&gt;Similar to the &lt;a href="http://ceph.com/papers/weil-crush-sc06.pdf"&gt;CRUSH&lt;/a&gt; map, a monitor map can be pulled out of the cluster, inspected, changed, and injected back to the monitors, manually. A frequent use-case is when the IP address of a monitor changes and the monitors cannot agree on a quorum.&lt;/p&gt;
&lt;p&gt;Monitors use the monitor map (&lt;strong&gt;monmap&lt;/strong&gt;) to get the details of other monitors. So just changing the monitor address in '&lt;strong&gt;ceph.conf&lt;/strong&gt;' and pushing the configuration to all the nodes won't help to propagate the changes.&lt;/p&gt;
&lt;p&gt;In most cases, starting the monitor with a wrong monitor map would make the monitors commit suicide, since they would find conflicting information about themself in the mon map due to the IP address change.&lt;/p&gt;
&lt;p&gt;There are two methods to fix this problem, the first being adding enough new monitors, let them form a quorum, and remove the faulty monitors. This doesn't need any explanation. The second and more crude way, is to edit the monitor map directly, set the new IP address, and upload the monmap back to the monitors.&lt;/p&gt;
&lt;p&gt;This article discusses the second method, ie.. how to edit the monmap, and re-inject it back. This can be done using the '&lt;strong&gt;monmap&lt;/strong&gt;' tool.&lt;/p&gt;
&lt;p&gt;1. As the first step, login to one of the monitors, and get the monitor map:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph mon getmap -o /tmp/monitor_map.bin&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2. Inspect what the monitor map contains:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# monmaptool --print /tmp/monitor_map.bin&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;An example from my cluster :&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# monmaptool --print monmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;monmaptool: monmap file monmap epoch 1 fsid d978794d-5835-4ac3-8fe3-3855b18b9572 last_changed 0.000000 created 0.000000 0: 192.168.122.73:6789/0 mon.node2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. Remove the node which has the wrong IP address, referring it's hostname&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# monmaptool --rm node2 /tmp/monitor_map.bin&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4. Inspect the monitor map to see if the monitor is indeed removed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# monmaptool --print /tmp/monitor_map.bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;monmaptool: monmap file monmap epoch 1 fsid d978794d-5835-4ac3-8fe3-3855b18b9572 last_changed 0.000000 created 0.000000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5. Add a new monitor (or the existing monitor with it's new IP)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# monmaptool --add node3  192.168.122.76:6789  /tmp/monitor_map.bin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;monmaptool: monmap file monmap monmaptool: writing epoch 1 to monmap (1 monitors)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6. Check the monitor map to confirm the changes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# monmaptool --print monmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;monmaptool: monmap file monmap epoch 1 fsid d978794d-5835-4ac3-8fe3-3855b18b9572 last_changed 0.000000 created 0.000000 0: 192.168.122.76:6789/0 mon.node3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7. Make sure the mon processes are not running on the monitor nodes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# service ceph stop mon&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;8. Upload the changes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph-mon -i monitor_node --inject-monmap /tmp/mon_map.bin&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;9. Start the mon process on each monitor&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# service ceph start mon&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;10. Check if the cluster has taken in the changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph -s&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"Calculate a PG id from the hex values in Ceph OSD debug logs"</title><link href="https://arvimal.github.io/calculate-a-pg-id-from-the-hex-values-in-ceph-osd-debug-logs.html" rel="alternate"></link><published>2015-08-30T00:00:00+02:00</published><updated>2015-08-30T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-08-30:/calculate-a-pg-id-from-the-hex-values-in-ceph-osd-debug-logs.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"pg"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Recently, I had an incident where the OSDs were crashing at the time of startup. Obviously, the next step was to enable debug logs for the OSDs and understand where they were crashing.&lt;/p&gt;
&lt;p&gt;Enabled OSD debug logs dynamically by injecting it with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"programming"&lt;/li&gt;
&lt;li&gt;"python"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"pg"&lt;/li&gt;
&lt;li&gt;"python"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Recently, I had an incident where the OSDs were crashing at the time of startup. Obviously, the next step was to enable debug logs for the OSDs and understand where they were crashing.&lt;/p&gt;
&lt;p&gt;Enabled OSD debug logs dynamically by injecting it with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph tell osd.* injectargs --debug-osd 20 --debug-ms 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE: This command can be run from the MON nodes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once this was done, the OSDs were started manually (since it were crashing and not running) and watched out for the next crash. It crashed with the following logs :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;*read_log 107487'1 (0'0) modify f6b07b93/rbd_data.hash/head//12 by client.version date, time *osd/PGLog.cc: In function 'static bool PGLog::read_log(ObjectStore*, coll_t, hobject_t, const pg_info_t&amp;amp;, std::mapeversion_t, hobject_t&amp;amp;, PGLog::IndexedLog&amp;amp;, pg_missing_t&amp;amp;, std::ostringstream&amp;amp;, std::setstd::basic_stringchar *)' thread thread time date, time *osd/PGLog.cc: 809: FAILED assert(last_e.version.version e.version.version)ceph version version-details&lt;/p&gt;
&lt;p&gt;1: (PGLog::read_log(ObjectStore*, coll_t, hobject_t, pg_info_t const&amp;amp;, std::mapeversion_t, hobject_t, std::lesseversion_t, std::allocatorstd::paireversion_t const,hobject_t , PGLog::IndexedLog&amp;amp;, pg_missing_t&amp;amp;, std::basic_ostringstreamchar, std::char_traitschar, std::allocatorchar, std::setstd::string, std::lessstd:string, std::allocatorstd::string *)+0x13ee) [0x6efcae] 2: (PG::read_state(ObjectStore*, ceph::buffer::list&amp;amp;)+0x315) [0x7692f5] 3: (OSD::load_pgs()+0xfff) [0x639f8f] 4: (OSD::init()+0x7bd) [0x63c10d] 5: (main()+0x2613) [0x5ecd43] 6: (__libc_start_main()+0xf5) [0x7fdc338f9af5] 7: /usr/bin/ceph-osd() [0x5f0f69]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above is a log snippet at which the OSD process was crashing. The ceph-osd process was reading through the log areas of each PG in the OSD, and once it reached the problematic PG it crashed due to failing an assert condition.&lt;/p&gt;
&lt;p&gt;Checking the source at 'osd/PGLog.cc', we see that this error is logged from 'PGLog::read_log'.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;void PGLog::read_log(ObjectStore *store, coll_t pg_coll, coll_t log_coll, ghobject_t log_oid, const pg_info_tinfo, mapeversion_t, hobject_tdivergent_priors, IndexedLoglog, pg_missing_tmissing, ostringstreamoss, setstring *log_keys_debug) { ... if (!log.log.empty()) { pg_log_entry_t last_e(log.log.back()); assert(last_e.version.version e.version.version);    == The assert condition at which read_log is failing for a particular PG assert(last_e.version.epoch = e.version.epoch);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In order to make the OSD start, we needed to move this PG to a different location using the 'ceph_objectstore_tool' so that the ceph-osd can bypass the problematic PG. To understand the PG where it was crashing, we had to do some calculations based on the logs.&lt;/p&gt;
&lt;p&gt;The 'read_log' line in the debug logs contain a hex value after the string "modify" and that is the hash of the PG number. The last number in that series is the pool id (12 in our case). The following python code will help to calculate the PG id based on the arguments passed to it.&lt;/p&gt;
&lt;p&gt;This program accepts three arguments, the first being the hex value we talked about, the second being the pg_num of the pool, and the third one being the pool id.&lt;/p&gt;
&lt;p&gt;[code language="python"]&lt;/p&gt;
&lt;h1&gt;!/usr/bin/env python # Calculate the PG ID from the object hash # vimal@redhat.com import sys&lt;/h1&gt;
&lt;p&gt;def pg_id_calc(*args): if any([len(args) == 0, len(args) &amp;gt; 3, len(args) &amp;lt; 3]): help() else: hash_hex = args[0] pg_num = int(args[1]) pool_id = int(args[2]) hash_dec = int(hash_hex, 16) id_dec = hash_dec % pg_num id = hex(id_dec) pg_id = str(pool_id) + "." + str(id)[2:] print("\nThe PG ID is %s\n" % pg_id)&lt;/p&gt;
&lt;p&gt;def help(): print("Usage:") print("This script expects the hash (in Hex), pg_num of the pool, and the pool id as arguments, in order") print("\nExample:") print("./pg_id_calc.py 0x8e2fe5d7 2048 12") sys.exit()&lt;/p&gt;
&lt;p&gt;if __name__ == '__main__': pg_id_calc(*sys.argv[1:])&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;An example of the program in action:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# python pg_id_calc.py 0xf6b07b93 2048 12 The PG ID is 12.393&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once we get the PG ID, we can proceed using 'ceph_objectstore_tool' to move the PG to a different location altogether. More on how to use 'ceph_objectstore_tool' in an upcoming journal.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Mapping Placement Groups and Pools"</title><link href="https://arvimal.github.io/mapping-placement-groups-and-pools.html" rel="alternate"></link><published>2015-08-17T00:00:00+02:00</published><updated>2015-08-17T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-08-17:/mapping-placement-groups-and-pools.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"placement-groups"&lt;/li&gt;
&lt;li&gt;"pool"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Understanding the mapping of Pools and Placement Groups can be very useful while troubleshooting Ceph problems.&lt;/p&gt;
&lt;p&gt;A direct method is to dump information on the PGs via :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph pg dump&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This command should output something like the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pg_stat    objects    mip    degr    unf    bytes    log …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"placement-groups"&lt;/li&gt;
&lt;li&gt;"pool"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Understanding the mapping of Pools and Placement Groups can be very useful while troubleshooting Ceph problems.&lt;/p&gt;
&lt;p&gt;A direct method is to dump information on the PGs via :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph pg dump&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This command should output something like the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pg_stat    objects    mip    degr    unf    bytes    log    disklog   state 5.7a           0                0         0          0        0            0       0            active+clean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The output will have more information, and I've omitted it for the sake of explanation.&lt;/p&gt;
&lt;p&gt;The first field is the PG ID, which are two values separated by a single dot (.). The left side value is the POOL ID, while the right side value is the actual PG number. It means that a specific PG can only be present under a specific pool, ie.. no PGs can be shared across pools. But please note that OSDs can be shared across multiple PGs.&lt;/p&gt;
&lt;p&gt;To get the pools and associated numbers, use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd lspools&lt;/p&gt;
&lt;p&gt;0 data,1 metadata,2 rbd,5 ssdtest,6 ec_pool,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the PG 5.7a belongs to the pool numbered '5', ie.. 'ssdtest', and the PG number is '7a'.&lt;/p&gt;
&lt;p&gt;The output of 'ceph pg dump' also shows various important informations such as the Acting OSD set, the primary OSD, the last time the PG was reported, the state of the PG, the time at which a normal scrub as well as a deep-scrub was run etc..&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"How to identify the journal disk for a Ceph OSD?"</title><link href="https://arvimal.github.io/how-to-identify-the-journal-disk-for-a-ceph-osd.html" rel="alternate"></link><published>2015-08-05T00:00:00+02:00</published><updated>2015-08-05T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-08-05:/how-to-identify-the-journal-disk-for-a-ceph-osd.html</id><summary type="html">&lt;p&gt;In many cases, one would like to understand the journal disk a particular OSD is using. There are two methods to understand this:&lt;/p&gt;
&lt;p&gt;a) This is the most direct method, and should give you details on the OSD disks and the corresponding journal disks.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph-disk …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In many cases, one would like to understand the journal disk a particular OSD is using. There are two methods to understand this:&lt;/p&gt;
&lt;p&gt;a) This is the most direct method, and should give you details on the OSD disks and the corresponding journal disks.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph-disk list&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;This should output something like:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph-disk list /dev/sda :  /dev/sda1 other, xfs, mounted on /boot  /dev/sda2 other, LVM2_member /dev/sr0 other, unknown /dev/vda :  /dev/vda1 ceph data, active, cluster ceph, osd.0, journal /dev/vda2  /dev/vda2 ceph journal, for /dev/vda1 /dev/vdb :  /dev/vdb1 ceph data, active, cluster ceph, osd.1, journal /dev/vdc1 /dev/vdc :  /dev/vdc1 ceph journal, for /dev/vdb1 [/sourcecode]&lt;/p&gt;
&lt;p&gt;b) The second method is cruder, and involves listing the OSD mount point on the file system.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ls -l /var/lib/ceph/osd/ceph-0/&lt;/p&gt;
&lt;p&gt;total 52 -rw-r--r--.  1 root root  191 Aug  3 18:02 activate.monmap -rw-r--r--.  1 root root    3 Aug  3 18:02 active -rw-r--r--.  1 root root   37 Aug  3 18:02 ceph_fsid drwxr-xr-x. 70 root root 4096 Aug  4 00:38 current -rw-r--r--.  1 root root   37 Aug  3 18:02 fsid lrwxrwxrwx.  1 root root   58 Aug  3 18:02 journal -&amp;gt; /dev/disk/by-partuuid/d9ebc4bd-7b5e-4e12-b909-0c72c4f58ee0 -rw-r--r--.  1 root root   37 Aug  3 18:02 journal_uuid -rw-------.  1 root root   56 Aug  3 18:02 keyring -rw-r--r--.  1 root root   21 Aug  3 18:02 magic -rw-r--r--.  1 root root    6 Aug  3 18:02 ready -rw-r--r--.  1 root root    4 Aug  3 18:02 store_version -rw-r--r--.  1 root root   42 Aug  3 18:02 superblock -rw-r--r--.  1 root root    0 Aug  5 13:09 sysvinit -rw-r--r--.  1 root root    2 Aug  3 18:02 whoami&lt;/p&gt;
&lt;p&gt;# ls -l /dev/disk/by-partuuid/d9ebc4bd-7b5e-4e12-b909-0c72c4f58ee0 lrwxrwxrwx. 1 root root 10 Aug  5 13:08 /dev/disk/by-partuuid/d9ebc4bd-7b5e-4e12-b909-0c72c4f58ee0 -&amp;gt; ../../vda2&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;As you can see, the file 'journal' is a symlink to the journal disk. The first method is much easier, but its always better to know how things are layered out underneath.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Resetting Calamari password"</title><link href="https://arvimal.github.io/resetting-calamari-password.html" rel="alternate"></link><published>2015-07-13T00:00:00+02:00</published><updated>2015-07-13T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-07-13:/resetting-calamari-password.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"calamari"&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;'&lt;strong&gt;Calamari&lt;/strong&gt;' is the monitoring interface for a Ceph cluster.&lt;/p&gt;
&lt;p&gt;The Calamari interface password can be reset/changed using the 'calamari-ctl' command.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# calamari-ctl change_password --password {password} {user-name}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;calamari-ctl&lt;/strong&gt; can also be used to add a user, as well as disable, enable, and rename the user account. A …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"calamari"&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;'&lt;strong&gt;Calamari&lt;/strong&gt;' is the monitoring interface for a Ceph cluster.&lt;/p&gt;
&lt;p&gt;The Calamari interface password can be reset/changed using the 'calamari-ctl' command.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# calamari-ctl change_password --password {password} {user-name}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;calamari-ctl&lt;/strong&gt; can also be used to add a user, as well as disable, enable, and rename the user account. A '--help' should print out all the available ones.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# calamari-ctl --help&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"Compacting a Ceph monitor store"</title><link href="https://arvimal.github.io/compacting-a-ceph-monitor-store.html" rel="alternate"></link><published>2015-07-09T00:00:00+02:00</published><updated>2015-07-09T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-07-09:/compacting-a-ceph-monitor-store.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"leveldb"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Ceph monitor store growing to a big size is a common occurrence in a busy Ceph cluster.&lt;/p&gt;
&lt;p&gt;If a '&lt;em&gt;&lt;strong&gt;ceph -s&lt;/strong&gt;&lt;/em&gt;' takes considerable time to return information, one of the possibility is the monitor database being large.&lt;/p&gt;
&lt;p&gt;Other reasons included network lags between the …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"leveldb"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The Ceph monitor store growing to a big size is a common occurrence in a busy Ceph cluster.&lt;/p&gt;
&lt;p&gt;If a '&lt;em&gt;&lt;strong&gt;ceph -s&lt;/strong&gt;&lt;/em&gt;' takes considerable time to return information, one of the possibility is the monitor database being large.&lt;/p&gt;
&lt;p&gt;Other reasons included network lags between the client and the monitor, the monitor not responding properly due to the system load, firewall settings on the client or monitor etc..&lt;/p&gt;
&lt;p&gt;The best way to deal with a large monitor database is to compact the monitor store. The monitor store is a &lt;a href="http://leveldb.org/"&gt;leveldb&lt;/a&gt; store which stores key/value pairs.&lt;/p&gt;
&lt;p&gt;There are two ways to compact a levelDB store, either on the fly or at the monitor process startup.&lt;/p&gt;
&lt;p&gt;To compact the store dynamically, use :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph tell mon.[ID] compact&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To compact the levelDB store every time the monitor process starts, add the following in /etc/ceph/ceph.conf under the [mon] section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mon compact on start = true&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second option would compact the levelDB store each and every time the monitor process starts.&lt;/p&gt;
&lt;p&gt;The monitor database is stored at &lt;em&gt;/var/lib/ceph/mon/&lt;hostname&gt;/store.db/&lt;/em&gt; as files with the extension '&lt;strong&gt;.sst&lt;/strong&gt;', which is the synonym for '&lt;strong&gt;Sorted String Table&lt;/strong&gt;'&lt;/p&gt;
&lt;p&gt;To read more on levelDB, please refer:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/LevelDB"&gt;https://en.wikipedia.org/wiki/LevelDB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://leveldb.googlecode.com/svn/trunk/doc/impl.html"&gt;http://leveldb.googlecode.com/svn/trunk/doc/impl.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google-opensource.blogspot.in/2011/07/leveldb-fast-persistent-key-value-store.html"&gt;http://google-opensource.blogspot.in/2011/07/leveldb-fast-persistent-key-value-store.html&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"What is data scrubbing?"</title><link href="https://arvimal.github.io/what-is-data-scrubbing.html" rel="alternate"></link><published>2015-07-08T00:00:00+02:00</published><updated>2015-07-08T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-07-08:/what-is-data-scrubbing.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;li&gt;"scrubbing"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Data Scrubbing is an error checking and correction method or routine check to ensure that the data on file systems are in pristine condition, and has no errors. Data integrity is of primary concern in today's conditions, given the humongous amounts of data being read …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;li&gt;"scrubbing"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Data Scrubbing is an error checking and correction method or routine check to ensure that the data on file systems are in pristine condition, and has no errors. Data integrity is of primary concern in today's conditions, given the humongous amounts of data being read and written daily.&lt;/p&gt;
&lt;p&gt;A simple example for a scrubbing, is a file system check done on file systems with tools like 'e2fsck' in EXT2/3/4, or 'xfs_repair' in XFS. Ceph also includes a daily scrubbing as well as weekly scrubbing, which we will talk about in detail in another article.&lt;/p&gt;
&lt;p&gt;This feature is available on most hardware RAID controllers, backup tools, as well as softwares that emulate RAID such as MD-RAID.&lt;/p&gt;
&lt;p&gt;Btrfs is one of the file systems that can schedule a internal scrubbing automatically, to ensure that corruptions are detected and preventive measures taken automatically. Since Btrfs can maintain multiple copies of data, once it finds an error in the primary copy, it can check for a good copy (if mirroring is used) and replace it.&lt;/p&gt;
&lt;p&gt;We will be looking more into scrubbing, especially how it is implemented in Ceph, and the various tunables, in an upcoming post.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Another method to dynamically change a Ceph configuration"</title><link href="https://arvimal.github.io/another-method-to-dynamically-change-a-ceph-configuration.html" rel="alternate"></link><published>2015-06-03T00:00:00+02:00</published><updated>2015-06-03T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-06-03:/another-method-to-dynamically-change-a-ceph-configuration.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In a previous post, we saw how to dynamically change a tunable on a running Ceph cluster dynamically. Unfortunately, such a change is not permanent, and will revert back to the previous setting once ceph is restarted.&lt;/p&gt;
&lt;p&gt;Rather than using the command '&lt;em&gt;&lt;strong&gt;ceph tell&lt;/strong&gt;&lt;/em&gt;', I recently came …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In a previous post, we saw how to dynamically change a tunable on a running Ceph cluster dynamically. Unfortunately, such a change is not permanent, and will revert back to the previous setting once ceph is restarted.&lt;/p&gt;
&lt;p&gt;Rather than using the command '&lt;em&gt;&lt;strong&gt;ceph tell&lt;/strong&gt;&lt;/em&gt;', I recently came upon another way to change configuration values.&lt;/p&gt;
&lt;p&gt;We'll try changing the tunable '&lt;strong&gt;mon_osd_full_ratio&lt;/strong&gt;' once again.&lt;/p&gt;
&lt;p&gt;1. Get the current setting&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph daemon osd.1 config get mon_osd_full_ratio&lt;/strong&gt; { "mon_osd_full_ratio": "0.75"}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2. Change the configuration value using 'ceph daemon'.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph daemon osd.1 config set mon_osd_full_ratio 0.85&lt;/strong&gt; { "success": "mon_osd_full_ratio = '0.85' "}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. Check if the change has been introduced.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph daemon osd.1 config get mon_osd_full_ratio&lt;/strong&gt; { "mon_osd_full_ratio": "0.85"}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4. Restart the 'ceph' service&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# service ceph restart&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5. Check the status&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ceph daemon osd.1 config get mon_osd_full_ratio&lt;/strong&gt; { "mon_osd_full_ratio": "0.75"}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NOTE: Please note that the changes introduced with 'ceph tell' as well as 'ceph daemon' is not persistent across process restarts.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"How to dynamically change a configuration value in a Ceph cluster?"</title><link href="https://arvimal.github.io/how-to-dynamically-change-a-configuration-value-in-a-ceph-cluster.html" rel="alternate"></link><published>2015-05-27T00:00:00+02:00</published><updated>2015-05-27T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-05-27:/how-to-dynamically-change-a-configuration-value-in-a-ceph-cluster.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"ceph-tell"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;It is possible to change a particular configuration setting in a Ceph cluster dynamically, and I think it is a very neat and useful feature.&lt;/p&gt;
&lt;p&gt;Imagine the case where you want to change the replica count of a particular PG from 3 to 4. How would …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"ceph-tell"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;It is possible to change a particular configuration setting in a Ceph cluster dynamically, and I think it is a very neat and useful feature.&lt;/p&gt;
&lt;p&gt;Imagine the case where you want to change the replica count of a particular PG from 3 to 4. How would you change this without restarting the Ceph cluster itself? That is where the 'ceph tell' command comes in.&lt;/p&gt;
&lt;p&gt;As we saw in the &lt;a href="https://arvimal.wordpress.com/2015/05/27/how-can-we-get-a-list-of-all-the-configurations-from-a-ceph-cluster-node/"&gt;previous post&lt;/a&gt;, you can get the list of configuration settings using the administrator socket, from either a monitor or an OSD node.&lt;/p&gt;
&lt;p&gt;To change a configuration use:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph tell mon.* injectargs '--{tunable value_to_be_set}'&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;For example, to change the timeout value after which an OSD is out and down, can be changed with:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph tell mon.* injectargs '--mon_osd_report_timeout 400'&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;By default, it is 300 seconds, ie.. 5 minute&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"How to fetch the entire list of tunables along with the values for a Ceph cluster node?"</title><link href="https://arvimal.github.io/how-to-fetch-the-entire-list-of-tunables-along-with-the-values-for-a-ceph-cluster-node.html" rel="alternate"></link><published>2015-05-27T00:00:00+02:00</published><updated>2015-05-27T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-05-27:/how-to-fetch-the-entire-list-of-tunables-along-with-the-values-for-a-ceph-cluster-node.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"admin-socket"&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"config-show"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In many cases we would like to get the active configurations from a Ceph node, either a monitor or an OSD node. A neat feature, I must say, is to probe the administrative socket file to get a listing of all the active configurations, be …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"admin-socket"&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"config-show"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In many cases we would like to get the active configurations from a Ceph node, either a monitor or an OSD node. A neat feature, I must say, is to probe the administrative socket file to get a listing of all the active configurations, be it on the OSD node or the monitor node.&lt;/p&gt;
&lt;p&gt;This comes handy when we have changed a setting and wants to confirm if it had indeed changed or not.&lt;/p&gt;
&lt;p&gt;The admin socket file exists for both the monitors and the OSD nodes. The monitor node will have a single admin socket file, while the OSD nodes will have an admin socket for each of the OSDs present on the node.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listing of the admin socket on a monitor node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ls /var/run/ceph/ -l total 4 srwxr-xr-x. 1 root root 0 May 13 05:13 ceph-mon.hp-m300-2.asok -rw-r--r--. 1 root root 7 May 13 05:13 mon.hp-m300-2.pid [/sourcecode]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listing of the admin sockets on an OSD node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ls -l /var/run/ceph/ total 20 srwxr-xr-x. 1 root root 0 May  8 02:42 ceph-osd.0.asok srwxr-xr-x. 1 root root 0 May 26 11:18 ceph-osd.2.asok srwxr-xr-x. 1 root root 0 May 26 11:18 ceph-osd.3.asok srwxr-xr-x. 1 root root 0 May  8 02:42 ceph-osd.4.asok srwxr-xr-x. 1 root root 0 May 26 11:18 ceph-osd.5.asok -rw-r--r--. 1 root root 8 May  8 02:42 osd.0.pid -rw-r--r--. 1 root root 8 May 26 11:18 osd.2.pid -rw-r--r--. 1 root root 8 May 26 11:18 osd.3.pid -rw-r--r--. 1 root root 8 May  8 02:42 osd.4.pid -rw-r--r--. 1 root root 8 May 26 11:18 osd.5.pid [/sourcecode]&lt;/p&gt;
&lt;p&gt;For example, consider that we have changed the 'mon_osd_full_ratio' value, and need to confirm that the cluster has picked up the change.&lt;/p&gt;
&lt;p&gt;We can get a listing of the active configured settings and grep out the setting we are interested in.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph daemon /var/run/ceph/ceph-mon.*.asok config show&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;The above command prints out a listing of all the active configurations and their current values. We can easily grep out 'mon_osd_full_ratio' from this list.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph daemon /var/run/ceph/ceph-mon.*.asok config show | grep mon_osd_full_ratio&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;On my test cluster, this printed out '0.75' which is the default setting. The cluster should print out 'near full' warnings once any OSD has reached 75% of its size.&lt;/p&gt;
&lt;p&gt;This can be checked by probing the OSD admin socket as well.&lt;/p&gt;
&lt;p&gt;NOTE: In case you are probing a particular OSD, please make sure to use the OSD admin socket on the node in which the OSD is. In order to locate the OSD and the node it is on, use :&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph osd tree&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;Example: We try probing the OSD admin socket on its node, for 'mon_osd_full_ratio' as we did on the monitor. It should return the same value.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph daemon /var/run/ceph/ceph-osd.5.asok config show | grep mon_osd_full_ratio&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;NOTE: Another command exists which should print the same configuration settings, but only for OSDs.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph daemon osd.5 config show&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;A drawback worth mentioning, this should be executed on the node on which the OSD is present. To find that the OSD to node mapping, use 'ceph osd tree'.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"'noout' flag in Ceph"</title><link href="https://arvimal.github.io/noout-flag-in-ceph.html" rel="alternate"></link><published>2015-05-27T00:00:00+02:00</published><updated>2015-05-27T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-05-27:/noout-flag-in-ceph.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"noout"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You may have seen the '&lt;strong&gt;noout&lt;/strong&gt;' flag set in the output of '&lt;em&gt;&lt;strong&gt;ceph -s&lt;/strong&gt;&lt;/em&gt;'. What does this actually mean?&lt;/p&gt;
&lt;p&gt;This is a global flag for the cluster, which means that if an OSD is out, the said OSD is not marked out of the cluster …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"noout"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You may have seen the '&lt;strong&gt;noout&lt;/strong&gt;' flag set in the output of '&lt;em&gt;&lt;strong&gt;ceph -s&lt;/strong&gt;&lt;/em&gt;'. What does this actually mean?&lt;/p&gt;
&lt;p&gt;This is a global flag for the cluster, which means that if an OSD is out, the said OSD is not marked out of the cluster and data balancing shouldn't start to maintain the replica count. By default, the monitors mark the OSDs out of the acting set if it is not reachable for 300 seconds, ie.. 5 minutes.&lt;/p&gt;
&lt;p&gt;To know the default value set in your cluster, use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph daemon /var/run/ceph/ceph-mon.*.asok config show | grep mon_osd_report_timeout&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When an OSD is marked as out, another OSD takes its place and data replication starts to that OSD depending on the number of replica counts each pool has.&lt;/p&gt;
&lt;p&gt;If this flag (&lt;strong&gt;noout&lt;/strong&gt;) is set, the monitor will not mark the OSDs out from the acting set. The PGs will be reporting an inconsistent state, but the OSD will still be in the acting set.&lt;/p&gt;
&lt;p&gt;This can be helpful when we want to remove an OSD from the server, but don't want the data objects to be replicated over to another OSD.&lt;/p&gt;
&lt;p&gt;To set the '&lt;strong&gt;noout&lt;/strong&gt;' flag, use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd set noout&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once everything you've planned has been done/finished, you can reset it back using:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# ceph osd unset noout&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"How to change the filling ratio for a Ceph OSD?"</title><link href="https://arvimal.github.io/how-to-change-the-filling-ratio-for-a-ceph-osd.html" rel="alternate"></link><published>2015-05-07T00:00:00+02:00</published><updated>2015-05-07T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-05-07:/how-to-change-the-filling-ratio-for-a-ceph-osd.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"fill-ratio"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;There could be many scenarios where you'd need to change the percentage of space usage on a Ceph OSD. One such use case would be when your OSD space is about to hit the hard limit, and is constantly sending you warnings.&lt;/p&gt;
&lt;p&gt;For some reason …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"fill-ratio"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;There could be many scenarios where you'd need to change the percentage of space usage on a Ceph OSD. One such use case would be when your OSD space is about to hit the hard limit, and is constantly sending you warnings.&lt;/p&gt;
&lt;p&gt;For some reason or other, you may need to extend the threshold limit for some time. In such a case, you don't need to change/add the configuration in ceph.conf and push it across. Rather you can do it while the cluster is online, via command mode.&lt;/p&gt;
&lt;p&gt;The 'ceph tell' is a very useful command in the sense the administrator don't need to stop/start the OSDs, MONs etc.. after a configuration change. In our case, we are looking to set the 'mon_osd_full_ratio' to 98%. We can do it by using:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph tell mon.* injectargs "--mon_osd_full_ratio .98"&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;In an earlier post (&lt;a href="https://goo.gl/xjXOoI"&gt;https://goo.gl/xjXOoI&lt;/a&gt;) we had seen how to get all the configurable options from a monitor. If I understand correct, almost all the configuration values can be changed online by injecting the values using 'ceph tell'.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"How to remove a host from a Ceph cluster?"</title><link href="https://arvimal.github.io/how-to-remove-a-host-from-a-ceph-cluster.html" rel="alternate"></link><published>2015-05-07T00:00:00+02:00</published><updated>2015-05-07T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-05-07:/how-to-remove-a-host-from-a-ceph-cluster.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"crush"&lt;/li&gt;
&lt;li&gt;"crush-map"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I'm still studying Ceph, and recently faced a scenario in which one of my Ceph nodes went down due to hardware failure. Even though my data was safe due to the replication factor, I was not able to remove the node from the cluster …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"crush"&lt;/li&gt;
&lt;li&gt;"crush-map"&lt;/li&gt;
&lt;li&gt;"osd"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I'm still studying Ceph, and recently faced a scenario in which one of my Ceph nodes went down due to hardware failure. Even though my data was safe due to the replication factor, I was not able to remove the node from the cluster.&lt;/p&gt;
&lt;p&gt;I could remove the OSDs on the node, but I didn't find a way to remove the node being listed in 'ceph osd tree'. I ended up editing the CRUSH map by hand, to remove the host, and uploaded it back. This worked as expected. Following are the steps I did to achieve this.&lt;/p&gt;
&lt;p&gt;a) This was the state just after the node went down:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph osd tree&lt;/p&gt;
&lt;p&gt;# id     weight    type     name                up/down        reweight -10        .08997    root     default -20        .01999            host hp-m300-5 00        .009995            osd.0                up             1 40        .009995            osd.4                up             1 -30        .009995            host hp-m300-9 10        .009995            osd.1                 down         0 -40        .05998            host hp-m300-4 20        .04999            osd.2                up             1 30        .009995            osd.3                up             1&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph -w&lt;/p&gt;
&lt;p&gt;cluster 62a6a880-fb65-490c-bc98-d689b4d1a3cb     health HEALTH_WARN 64 pgs degraded; 64 pgs stuck unclean; recovery 261/785 objects degraded (33.248%)     monmap e1: 1 mons at {hp-m300-4=10.65.200.88:6789/0}, election epoch 1, quorum 0 hp-m300-4     osdmap e130: 5 osds: 4 up, 4 in     pgmap v8465: 196 pgs, 4 pools, 1001 MB data, 262 objects         7672 MB used, 74192 MB / 81865 MB avail         261/785 objects degraded (33.248%)         64 active+degraded         132 active+clean [/sourcecode]&lt;/p&gt;
&lt;p&gt;I started with marking the OSDs on the node out, and removing them. Note that I don't need to stop the OSD (osd.1) since the node carrying osd.1 is down and not accessible.&lt;/p&gt;
&lt;p&gt;b) If not, you would've to stop the OSD using:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # sudo service osd stop osd.1 [/sourcecode]&lt;/p&gt;
&lt;p&gt;c) Mark the OSD out, this is not ideally needed in this case since the node is already out.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ceph osd out osd.1 [/sourcecode]&lt;/p&gt;
&lt;p&gt;d) Remove the OSD from the CRUSH map, so that it does not receive any data. You can also get the crushmap, de-compile it, remove the OSD, re-compile, and upload it back.&lt;/p&gt;
&lt;p&gt;Remove item id 1 with the name 'osd.1' from the CRUSH map.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ceph osd crush remove osd.1 [/sourcecode]&lt;/p&gt;
&lt;p&gt;e) Remove the OSD authentication key&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ceph auth del osd.1 [/sourcecode]&lt;/p&gt;
&lt;p&gt;f) At this stage, I had to remove the OSD host from the listing but was not able to find a way to do so. The 'ceph-deploy' didn't have any tools to do this, other than 'purge', and 'uninstall'. Since the node was not f) accessible, these won't work anyways. A 'ceph-deploy purge' failed with the following errors, which is expected since the node is not accessible.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ceph-deploy purge hp-m300-9&lt;/p&gt;
&lt;p&gt;[ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf [ceph_deploy.cli][INFO  ] Invoked (1.5.22-rc1): /usr/bin/ceph-deploy purge hp-m300-9 [ceph_deploy.install][INFO  ] note that some dependencies *will not* be removed because they can cause issues with qemu-kvm [ceph_deploy.install][INFO  ] like: librbd1 and librados2 [ceph_deploy.install][DEBUG ] Purging from cluster ceph hosts hp-m300-9 [ceph_deploy.install][DEBUG ] Detecting platform for host hp-m300-9 ... ssh: connect to host hp-m300-9 port 22: No route to host [ceph_deploy][ERROR ] RuntimeError: connecting to host: hp-m300-9 resulted in errors: HostNotFound hp-m300-9&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;I ended up fetching the CRUSH map, removing the OSD host from it, and uploading it back.&lt;/p&gt;
&lt;p&gt;g) Get the CRUSH map&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ceph osd getcrushmap -o /tmp/crushmap [/sourcecode]&lt;/p&gt;
&lt;p&gt;h) De-compile the CRUSH map&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # crushtool -d /tmp/crushmap -o crush_map [/sourcecode]&lt;/p&gt;
&lt;p&gt;i) I had to remove the entries pertaining to the host-to-be-removed from the following sections:&lt;/p&gt;
&lt;p&gt;a) devices b) types c) And from the 'root' default section as well.&lt;/p&gt;
&lt;p&gt;j) Once I had the entries removed, I went ahead compiling the map, and inserted it back.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # crushtool -c crush_map -o /tmp/crushmap # ceph osd setcrushmap -i /tmp/crushmap [/sourcecode]&lt;/p&gt;
&lt;p&gt;k) A 'ceph osd tree' looks much cleaner now :)&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # ceph osd tree&lt;/p&gt;
&lt;p&gt;# id         weight             type         name                up/down        reweight -1             0.07999            root         default -2            0.01999                        host hp-m300-5 0            0.009995                    osd.0                down        0 4            0.009995                    osd.4                 down         0 -4            0.06                        host hp-m300-4 2            0.04999                        osd.2                 up             1 3            0.009995                    osd.3                 up             1 [/sourcecode]&lt;/p&gt;
&lt;p&gt;There may be a more direct method to remove the OSD host from the listing. I'm not aware of anything relevant, based on my limited knowledge. Perhaps I'll come across something as I progress with Ceph. Comments welcome.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"How to list all the configuration settings in a Ceph cluster monitor?"</title><link href="https://arvimal.github.io/how-to-list-all-the-configuration-settings-in-a-ceph-cluster-monitor.html" rel="alternate"></link><published>2015-05-06T00:00:00+02:00</published><updated>2015-05-06T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2015-05-06:/how-to-list-all-the-configuration-settings-in-a-ceph-cluster-monitor.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"admin_socket"&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"ceph-admin-socket"&lt;/li&gt;
&lt;li&gt;"ceph-conf"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;li&gt;"mons"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;It can be really helpful to have a single command to list all the configuration settings in a monitor node, in a Ceph cluster.&lt;/p&gt;
&lt;p&gt;This is possible by interacting directly with the monitor's unix socket file. This can be found under /var …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"ceph"
tags:&lt;/li&gt;
&lt;li&gt;"admin_socket"&lt;/li&gt;
&lt;li&gt;"ceph"&lt;/li&gt;
&lt;li&gt;"ceph-admin-socket"&lt;/li&gt;
&lt;li&gt;"ceph-conf"&lt;/li&gt;
&lt;li&gt;"monitors"&lt;/li&gt;
&lt;li&gt;"mons"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;It can be really helpful to have a single command to list all the configuration settings in a monitor node, in a Ceph cluster.&lt;/p&gt;
&lt;p&gt;This is possible by interacting directly with the monitor's unix socket file. This can be found under /var/run/ceph/. By default, the admin socket for the monitor will be in the path /var/run/ceph/ceph-mon.&lt;hostname-s&gt;.asok.&lt;/p&gt;
&lt;p&gt;The default location can vary in case you have defined it to be a different one, at the time of the installation. To know the actual socket path, use the following command:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph-conf --name mon.$(hostname -s) --show-config-value admin_socket&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;This should print the location of the admin socket. In most cases, it should be something like /var/run/ceph/ceph-mon.$(hostname -s).asok&lt;/p&gt;
&lt;p&gt;Once you have the monitor admin socket, use that location to show the various configuration settings with:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# ceph daemon /var/run/ceph/ceph-mon.*.asok config show&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;The output would be long, and won't fit in a single screen. You can either pipe it to 'less' or grep for a specific value in case you know what you are looking for.&lt;/p&gt;
&lt;p&gt;For example, if I need to look at the ratio at which the OSD would be considered full, I'll be using:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;h1&gt;ceph daemon /var/run/ceph/ceph-mon.*.asok config show | grep mon_osd_full_ratio&lt;/h1&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"FSCache and the on-disk structure of the cached data"</title><link href="https://arvimal.github.io/fscache-and-the-on-disk-structure-of-the-cached-data.html" rel="alternate"></link><published>2014-11-12T00:00:00+01:00</published><updated>2014-11-12T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2014-11-12:/fscache-and-the-on-disk-structure-of-the-cached-data.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"cachefilesd"&lt;/li&gt;
&lt;li&gt;"cachefs"&lt;/li&gt;
&lt;li&gt;"fscache"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The 'cachefilesd' kernel module will create two directories at the location specified in /etc/cachefilesd.conf. By default it's /var/cache/fscache/.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[root@montypython ~]# lsmod |grep -i cache&lt;/strong&gt; cachefiles             40871  1 fscache                62354  3 nfs,cachefiles,nfsv4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those are &lt;em&gt;/var/cache/fscache/cache&lt;/em&gt; and &lt;em&gt;/var …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"cachefilesd"&lt;/li&gt;
&lt;li&gt;"cachefs"&lt;/li&gt;
&lt;li&gt;"fscache"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The 'cachefilesd' kernel module will create two directories at the location specified in /etc/cachefilesd.conf. By default it's /var/cache/fscache/.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[root@montypython ~]# lsmod |grep -i cache&lt;/strong&gt; cachefiles             40871  1 fscache                62354  3 nfs,cachefiles,nfsv4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those are &lt;em&gt;/var/cache/fscache/cache&lt;/em&gt; and &lt;em&gt;/var/cache/fscache/graveyard&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The cache structure is maintained inside '/var/cache/fscache/cache/', while anything that is retired or culled is moved to 'graveyard'. The 'cachefilesd' daemon monitors 'graveyard' using 'dnotify' and will delete anything that is in there.&lt;/p&gt;
&lt;p&gt;We'll try an example. Consider an NFS share mounted with fscache support. The share contains the following files, with some random text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# ls /vol1&lt;/strong&gt; files1.txt  files2.txt  files3.txt  files4.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a) Configure 'cachefiles' by editing '/etc/cachefilesd.conf', and start the 'cachefilesd' daemon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# systemctl start cachefilesd&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;b) Mount the NFS share on the client with the 'fsc' mount option, to enable 'fscache' support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;# sudo mount localhost:/vol1 /vol1-backup/ -o fsc&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;d) Access the data from the mount point, and fscache will create the backed caching index at the location specified in &lt;em&gt;/etc/cachefilesd.conf&lt;/em&gt;. By default, its &lt;em&gt;/var/cache/fscache/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;e) Once the files are accessed on the client side, fscache builds an index as following:&lt;/p&gt;
&lt;p&gt;NOTE: The index structure is &lt;strong&gt;dependent&lt;/strong&gt; on the netfs (NFS in our case). The netfs driver can structure the cache index as it seems fit.&lt;/p&gt;
&lt;p&gt;Explanation of the caching structure:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# tree /var/cache/fscache/ /var/cache/fscache/cache/ └── @4a └── I03nfs ├── @22 │   └── Jo00000008400000000000000000000000400 │      └── @59 │           └── J110000000000000000w080000000000000000000000 │               ├── @53 │               │   └── EE0g00sgwB-90600000000ww000000000000000 │               ├── @5e │               │   └── EE0g00sgwB-90600000000ww000000000000000 │               ├── @61 │               │   └── EE0g00sgwB-90600000000ww000000000000000 │               ├── @62 │               │   └── EE0g00sgwB-90600000000ww000000000000000 │               ├── @70 │               │   └── EE0g00sgwB-90600000000ww000000000000000 │               ├── @7c │               │   └── EE0g00sgwB-90600000000ww000000000000000 │               └── @e8 │                   └── EE0g00sgwB-90600000000ww0000000000000000 └── @42 └── Jc000000000000EggDj00 └── @0a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a) The '&lt;strong&gt;cache&lt;/strong&gt;' directory under &lt;em&gt;/var/cache/fscache/&lt;/em&gt; is a special index and can be seen as the root of the entire cache index structure.&lt;/p&gt;
&lt;p&gt;b) Data objects (actual cached files) are represented as files if they have no children, or folders if they have. If represented as a directory, data objects will have a file inside named 'data' which holds the data.&lt;/p&gt;
&lt;p&gt;c) The '&lt;strong&gt;cachefiles&lt;/strong&gt;' kernel module represents :&lt;/p&gt;
&lt;p&gt;i)   '&lt;strong&gt;index&lt;/strong&gt;' objects as '&lt;strong&gt;directories&lt;/strong&gt;', starting with either '&lt;strong&gt;I&lt;/strong&gt;' or '&lt;strong&gt;J&lt;/strong&gt;'.&lt;/p&gt;
&lt;p&gt;ii)  Data objects are represented with filenames, beginning with '&lt;strong&gt;D&lt;/strong&gt;' or '&lt;strong&gt;E&lt;/strong&gt;'.&lt;/p&gt;
&lt;p&gt;iii) Special objects are similar to data objects, and start with '&lt;strong&gt;S&lt;/strong&gt;' or '&lt;strong&gt;T&lt;/strong&gt;'.&lt;/p&gt;
&lt;p&gt;In general, any object would be represented as a folder, if that object has children.&lt;/p&gt;
&lt;p&gt;g) In the directory hierarchy, immediately between the parent object and its child object, are directories named with *&lt;strong&gt;hash values&lt;/strong&gt;* of the immediate child object keys, starting with an '&lt;strong&gt;@&lt;/strong&gt;'.&lt;/p&gt;
&lt;p&gt;The child objects are placed inside this directory.These child objects would be folders, if it has child objects, or files if its the cached data itself. This can go on till the end of the path and reaches the file where the cached data is.&lt;/p&gt;
&lt;p&gt;Representation of the object indexes (For NFS, in this case)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INDEX     INDEX      INDEX                             DATA FILES ========= ========== ================================= ================ cache/@4a/I03nfs/@30/Ji000000000000000--fHg8hi8400 cache/@4a/I03nfs/@30/Ji000000000000000--fHg8hi8400/@75/Es0g000w...DB1ry cache/@4a/I03nfs/@30/Ji000000000000000--fHg8hi8400/@75/Es0g000w...N22ry cache/@4a/I03nfs/@30/Ji000000000000000--fHg8hi8400/@75/Es0g000w...FP1ry&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"FS-Cache and CacheFS, what are the differences?"</title><link href="https://arvimal.github.io/fs-cache-and-cachefs-what-are-the-differences.html" rel="alternate"></link><published>2014-09-14T00:00:00+02:00</published><updated>2014-09-14T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2014-09-14:/fs-cache-and-cachefs-what-are-the-differences.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"cachefs"&lt;/li&gt;
&lt;li&gt;"fs-cache"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;FS-Cache and CacheFS. Are there any differences between these two? Initially, I thought both were same. But no, it's not.&lt;/p&gt;
&lt;p&gt;CacheFS is the backend implementation which caches the data onto the disk and mainpulates it, while FS-Cache is an interface which talks to CacheFS.&lt;/p&gt;
&lt;p&gt;So why …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"cachefs"&lt;/li&gt;
&lt;li&gt;"fs-cache"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;FS-Cache and CacheFS. Are there any differences between these two? Initially, I thought both were same. But no, it's not.&lt;/p&gt;
&lt;p&gt;CacheFS is the backend implementation which caches the data onto the disk and mainpulates it, while FS-Cache is an interface which talks to CacheFS.&lt;/p&gt;
&lt;p&gt;So why do we need two levels here?&lt;/p&gt;
&lt;p&gt;FS-Cache was introduced as an API or front-end for CacheFS, which can be used by any file system driver. The file system driver talks with the FS-Cache API which inturn talks with CacheFS in the back-end. Hence, FS-Cache acts as a common interface for the file system drivers without the need to understand the backend CacheFS complexities, and how its implemented.&lt;/p&gt;
&lt;p&gt;The only drawback is the additional code that needs to go into each file system driver which needs to use FS-Cache. ie.. Every file system driver that needs to talk with FS-Cache, has to be patched with the support to do so. Moreover, the cache structure differs slightly between file systems using it, and thus lacks a standard. This unfortunately, prevents FS-Cache from being used by every network filesystem out there.&lt;/p&gt;
&lt;p&gt;The data flow would be as:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;VFS &amp;lt;-&amp;gt; File system driver (NFS/CIFS etc..) &amp;lt;-&amp;gt; FS-Cache &amp;lt;-&amp;gt; CacheFS &amp;lt;-&amp;gt; Cached data&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;CacheFS need not cache every file in its entirety, it can also cache files partially. This partial caching mechanism is possible since FS-Cache caches 'pages' rather than an entire file. Pages are smaller fixed-size segments of data, and these are cached depending on how much the files are read initially.&lt;/p&gt;
&lt;p&gt;FS-Cache does not require an open file to be loaded in the cache, prior being accessed. This is a nice feature as far as I understand, and the reasons are:&lt;/p&gt;
&lt;p&gt;a) Not every open file in the remote file system can be loaded into cache, due to size limits. In such a case, only certain parts (pages) may be loaded. And the rest of the file should be accessed normally over the network.&lt;/p&gt;
&lt;p&gt;b) The cache won't necessarily be large enough to hold all the open files on the remote system.&lt;/p&gt;
&lt;p&gt;c) Even if the cache is not populated properly, the file should be accessible. ie.. the cache should be able to be bypassed totally.&lt;/p&gt;
&lt;p&gt;This hopefully clears the differences between FS-Cache and CacheFS.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"FS-Cache and FUSE"</title><link href="https://arvimal.github.io/fs-cache-and-fuse.html" rel="alternate"></link><published>2014-09-14T00:00:00+02:00</published><updated>2014-09-14T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2014-09-14:/fs-cache-and-fuse.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"cachefilesd"&lt;/li&gt;
&lt;li&gt;"fs-cache"&lt;/li&gt;
&lt;li&gt;"fuse"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I would be working on enabling FS-Cache support in the FUSE kernel module, as part of my under graduate project.&lt;/p&gt;
&lt;p&gt;Niels De Vos, from Red Hat Engineering, would act as my mentor and guide throughout this project. He would also be presenting this idea in …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"cachefilesd"&lt;/li&gt;
&lt;li&gt;"fs-cache"&lt;/li&gt;
&lt;li&gt;"fuse"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I would be working on enabling FS-Cache support in the FUSE kernel module, as part of my under graduate project.&lt;/p&gt;
&lt;p&gt;Niels De Vos, from Red Hat Engineering, would act as my mentor and guide throughout this project. He would also be presenting this idea in the 'Linux Plumbers Conference' being held in Germany, October 2014.&lt;/p&gt;
&lt;p&gt;More details on the the talk can be seen at &lt;a href="http://www.linuxplumbersconf.org/2014/ocw/sessions/2247"&gt;http://www.linuxplumbersconf.org/2014/ocw/sessions/2247&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This feature has got quite a few requests from the FOSS world, and I'm glad I could work on this. For now, I'm trying to get a hold on FS-Cache, how it works with other file systems, and trying to build FUSE with some customizations. Ultimately, it would be the FUSE module were the code additions would go, not FS-Cache.&lt;/p&gt;
&lt;p&gt;I'll try to keep this blog updated, so that I have a journal to refer later&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"\"Error: open /tmp/docker-import-123456789/repo/bin/json: no such file or directory\""</title><link href="https://arvimal.github.io/error-open-tmpdocker-import-123456789repobinjson-no-such-file-or-directory.html" rel="alternate"></link><published>2014-08-16T00:00:00+02:00</published><updated>2014-08-16T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2014-08-16:/error-open-tmpdocker-import-123456789repobinjson-no-such-file-or-directory.html</id><summary type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;I've been trying to create a minimal docker image for RHEL versions, for one of my projects. The following were the steps I followed:&lt;/p&gt;
&lt;p&gt;a) Installed a RHEL6.5 server with 'Minimal Installation'.&lt;/p&gt;
&lt;p&gt;b) Registered it to the local satellite.&lt;/p&gt;
&lt;p&gt;c) Created a tar-ball of the filesystem with the …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;I've been trying to create a minimal docker image for RHEL versions, for one of my projects. The following were the steps I followed:&lt;/p&gt;
&lt;p&gt;a) Installed a RHEL6.5 server with 'Minimal Installation'.&lt;/p&gt;
&lt;p&gt;b) Registered it to the local satellite.&lt;/p&gt;
&lt;p&gt;c) Created a tar-ball of the filesystem with the command below:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# tar --numeric-owner --exclude=/proc --exclude=/sys --exclude=/mnt --exclude=/var/cache&lt;/p&gt;
&lt;p&gt;--exclude=/usr/share/doc --exclude=/tmp --exclude=/var/log -zcvf /mnt/rhel6.5-base.tar.gz /&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;d) Load the tar.gz image using 'docker load' (as per the man page of 'docker load')&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# docker load -i rhel6.5-base.tar.gz&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;This is where it erred with the message:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;2014/08/16 20:37:42 Error: open /tmp/docker-import-123456789/repo/bin/json: no such file or directory&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;After a bit of searching and testing, I found that 'docker load -i' doesn't work as expected. The workaround is to cat and pipe the tar.gz file, as shown below:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# cat rhel6.5-base.tar.gz | docker import - rhel6/6.5&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;This ends up with the image showing up in 'docker images'&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"]&lt;/p&gt;
&lt;p&gt;# docker images&lt;/p&gt;
&lt;p&gt;REPOSITORY   TAG    IMAGE ID           CREATED                  VIRTUAL SIZE rhel6/6.1           latest  32b4b345454a  About a minute ago 1.251 GB&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;Update: 'docker load -i &lt;image-file&gt;' would only work if the image is created as a layered docker image. If the &lt;image-file&gt; is a tar ball created from a root filesystem, you would need to use 'cat &lt;image-file&gt; | docker import &lt;name&gt;'&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"lsusb and chroot in anaconda.. Is usbfs mounted in anaconda %post installation ?"</title><link href="https://arvimal.github.io/lsusb-and-chroot-in-anaconda-is-usbfs-mounted-in-anaconda-post-installation.html" rel="alternate"></link><published>2010-12-23T00:00:00+01:00</published><updated>2010-12-23T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2010-12-23:/lsusb-and-chroot-in-anaconda-is-usbfs-mounted-in-anaconda-post-installation.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"anaconda"&lt;/li&gt;
&lt;li&gt;"installation"&lt;/li&gt;
&lt;li&gt;"lsusb"&lt;/li&gt;
&lt;li&gt;"rhel"&lt;/li&gt;
&lt;li&gt;"strace"&lt;/li&gt;
&lt;li&gt;"usb"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;T&lt;/em&gt;&lt;/strong&gt;he binary '/sbin/lsusb' in a chroot-ed environment have problems running properly. I have not checked this in a manually created chroot environment or using tools like 'mock'.&lt;/p&gt;
&lt;p&gt;The scenario is as following :&lt;/p&gt;
&lt;p&gt;We were trying to check the output of …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"anaconda"&lt;/li&gt;
&lt;li&gt;"installation"&lt;/li&gt;
&lt;li&gt;"lsusb"&lt;/li&gt;
&lt;li&gt;"rhel"&lt;/li&gt;
&lt;li&gt;"strace"&lt;/li&gt;
&lt;li&gt;"usb"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;T&lt;/em&gt;&lt;/strong&gt;he binary '/sbin/lsusb' in a chroot-ed environment have problems running properly. I have not checked this in a manually created chroot environment or using tools like 'mock'.&lt;/p&gt;
&lt;p&gt;The scenario is as following :&lt;/p&gt;
&lt;p&gt;We were trying to check the output of 'lsusb' in the %post section of a kickstart installation. I had specified 'noreboot' in the kickstart file so the machine will wait for the user to manually reboot the machine. This helps to check the logs and the situation of the machine just after the installation finishes.&lt;/p&gt;
&lt;p&gt;After the installation and prior to the reboot, i checked in the second available terminal (Alt + F2) created by anaconda and was astonished to see that the command 'lsusb' does not give us the required output but an error that '/usr/share/hwdata/usb.ids' is not accessible or found.&lt;/p&gt;
&lt;p&gt;By default, i think only the 'installation' ie.. the %post section starts in a 'chroot' mode and the terminal available is not chroot-ed. So we will have to use '/mnt/sysimage/sbin/lsusb'. This didn't work as expected since the 'lsusb' binary needs to check the file '/usr/share/hwdata/usb.ids' and won't be able to find it.&lt;/p&gt;
&lt;p&gt;So I did a chroot from the second terminal and did an /sbin/lsusb, since /sbin in not in the 'PATH' by default. That too, didn't work out. But this time it didn't even complain anything. Just nothing at all, no output. Last time, at-least it complained it could not find something. So how do we go forward now ??? Here comes 'strace' to the rescue !!!&lt;/p&gt;
&lt;p&gt;strace is of-course a really nice tool to know what system calls are made and lots of internal stuff a binary will do while being executed. But 'strace' is not installed by default on a RHEL5 machine, which is the case here. As most of you would know, anaconda creates a virtual file system which consists of most of the folders found under a linux main /. The location where the OS is installed is mounted under /mnt/sysimage.&lt;/p&gt;
&lt;p&gt;Since we already have an ISO from where we have booted the machine from (DVD/CD), we are free to mount it on the filesystem, which is what we did. :&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # mkdir /mnt/source # mount -t iso9660 /dev/hdc /mnt/source # cd /mnt/source/Server/ [/sourcecode]&lt;/p&gt;
&lt;p&gt;In case you want to know how the DVD/CD drive is detected, all you need to do is execute 'dmesg' in the available terminal. ie.. after pressing 'Alt + Ctrl + F2'.&lt;/p&gt;
&lt;p&gt;So we went forward and mounted the DVD to /mnt/source and changed the directory to /mnt/source/Server where all the rpm packages reside. Installed the package 'strace' using an 'rpm -ivh'. Please note that we need to use '--root /mnt/sysimage' as an option since we are installing the package to our newly installed file system which is at /mnt/sysimage. If this is not used, the installer will try to install the package to the virtual environment created in the memory.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # cd /mnt/source/Server # rpm -ivh strace-&amp;lt;version&amp;gt;.rpm --root /mnt/sysimage # cd # chroot /mnt/sysimage [/sourcecode]&lt;/p&gt;
&lt;p&gt;This will make /mnt/sysimage as the working root, ie.. where our installation was done. OK.. now for the 'strace' stuff.&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash" gutter="false"] # strace -fxvto strace.log -s 1024 /sbin/lsusb [/sourcecode]&lt;/p&gt;
&lt;p&gt;The strace output will be saved to 'strace.log' which we can open up in a text editor of our choice. Opening it in 'vi', shows a lot of stuff such as the command run, the default language, location of libraries loaded, the environment variables etc.. In this case we would only need to be interested in the last parts, ie.. to know where the binary failed :&lt;/p&gt;
&lt;p&gt;[sourcecode language="text" gutter="true"] 15:16:17 open("/dev/bus/usb", O_RDONLY|O_NONBLOCK|O_DIRECTORY) = -1 ENOENT (No such file or directory) = 03067 15:16:17 open("/proc/bus/usb", O_RDONLY|O_NONBLOCK|O_DIRECTORY) = 33067 15:16:17 fstat(3, {st_dev=makedev(0, 3), st_ino=4026532146, st_mode=S_IFDIR|0555, st_nlink=2, st_uid=0, st_gid=0, st_blksize=4096, st_blocks=0, st_size=0, st_atime=2009/09/25-15:16:17, st_mtime=2009/09/25-15:16:17, st_ctime=2009/09/25-15:16:17}) = 03067 15:16:17 fcntl(3, F_SETFD, FD_CLOEXEC) = 03067 15:16:17 getdents(3, {{d_ino=4026532146, d_off=1, d_reclen=24, d_name="."} {d_ino=4026531879, d_off=2, d_reclen=24, d_name=".."}}, 4096) = 483067 15:16:17 getdents(3, {}, 4096) = 03067 15:16:17 close(3) = 03067 15:16:17 exit_group(1) = ? [/sourcecode]&lt;/p&gt;
&lt;p&gt;The above trace output shows how the 'lsusb' binary proceeded at its last time and where it failed. We can see that it went to open '/dev/bus/usb', only to find that the said location does not exist. We can understand that it is a directory from the call&lt;/p&gt;
&lt;p&gt;[sourcecode language="text" gutter="false"] open("/dev/bus/usb", O_RDONLY|O_NONBLOCK|O_DIRECTORY) [/sourcecode]&lt;/p&gt;
&lt;p&gt;Ok,, fine.. so what does it do next ?&lt;/p&gt;
&lt;p&gt;As the next step, it tries to open '/proc/bus/usb' and it is present, which we know since there are no 'No such file or directory' errors. Going further, the binary goes on to do a 'stat' on '/proc/bus/usb'. After doing an 'fstat', it goes to check the file descriptor using 'fcntl' and further goes to list the directory contents using 'getdents'.&lt;/p&gt;
&lt;p&gt;This is where we find the interesting output :&lt;/p&gt;
&lt;p&gt;[sourcecode language="text" gutter="false"] getdents(3, {{d_ino=4026532146, d_off=1, d_reclen=24, d_name="."} {d_ino=4026531879, d_off=2, d_reclen=24, d_name=".."}}, 4096) = 48 [/sourcecode]&lt;/p&gt;
&lt;p&gt;As you can see in the above trace, it returns '.' and '..', which means there are nothing in /proc/bus/usb. So what we do understand is 'lsusb' refers /dev/bus/usb and /proc/bus/usb for its outputs.. If it was not able to find anything, strace would have given us an error which obviously would have made life much easier.&lt;/p&gt;
&lt;p&gt;And that's how '/sbin/lsusb' failed silently.. Isn't strace a nice tool ??&lt;/p&gt;
&lt;p&gt;Okay, those who want to know why is this so... 'lsusb' needs either /mnt/sysimage/proc/bus/usb or /mnt/sysimage/dev/bus/usb display contents to work properly. Anaconda is not mounting /mnt/sysimage/proc/bus/usb with the 'usbfs' file system in the limited installation environment and hence 'lsusb' fails...&lt;/p&gt;
&lt;p&gt;And we have a fix for that which goes into yuminstall.py in the anaconda source :&lt;/p&gt;
&lt;p&gt;[sourcecode language="python" gutter="false"] try:     isys.mount("/proc/bus/usb", anaconda.rootPath + "/proc/bus/usb", "usbfs") except Exception, e:     log.error("error mounting usbfs: %s" %(e,)) [/sourcecode]&lt;/p&gt;
&lt;p&gt;This piece of python code, tries mounting /proc/bus/usb on /mnt/sysimage/proc/bus/usb as 'usbfs. If its not possible, the code excepts an Exception error and reports "error mounting 'usbfs'.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Device Mapper and applications"</title><link href="https://arvimal.github.io/device-mapper-and-applications.html" rel="alternate"></link><published>2010-12-22T00:00:00+01:00</published><updated>2010-12-22T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2010-12-22:/device-mapper-and-applications.html</id><summary type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What is &lt;a href="http://en.wikipedia.org/wiki/Device_mapper" title="Device mapper"&gt;device-mapper&lt;/a&gt; ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;evice mapper is a modular driver for the &lt;a href="http://www.kernel.org/" title="Linux kernel"&gt;linux kernel 2.6&lt;/a&gt;. It can be said as a framework which helps to create or map logical sectors of a pseudo &lt;a href="http://en.wikipedia.org/wiki/Device_file" title="Device file"&gt;block device&lt;/a&gt; to an underlying physical block device. So what device-mapper do is keep a …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What is &lt;a href="http://en.wikipedia.org/wiki/Device_mapper" title="Device mapper"&gt;device-mapper&lt;/a&gt; ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;evice mapper is a modular driver for the &lt;a href="http://www.kernel.org/" title="Linux kernel"&gt;linux kernel 2.6&lt;/a&gt;. It can be said as a framework which helps to create or map logical sectors of a pseudo &lt;a href="http://en.wikipedia.org/wiki/Device_file" title="Device file"&gt;block device&lt;/a&gt; to an underlying physical block device. So what device-mapper do is keep a table of mappings which equate the logical block devices to the physical block devices.&lt;/p&gt;
&lt;p&gt;Applications such as LVM2, &lt;a href="http://evms.sourceforge.net/" title="Enterprise Volume Management System"&gt;EVMS&lt;/a&gt;, software raid aka dmraid, multipathing, block encryption mechanisms such as cryptsetup etc... use device-mapper to work. All these applications excluding EVMS use the libdevmapper library to communicate with device-mapper.&lt;/p&gt;
&lt;p&gt;The applications communicate with device-mapper's &lt;a href="http://en.wikipedia.org/wiki/Application_programming_interface" title="Application programming interface"&gt;API&lt;/a&gt; to create the mapping. Due to this feature, device-mapper does not need to know what &lt;a href="http://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29" title="Logical Volume Manager (Linux)"&gt;LVM&lt;/a&gt; or dmraid is, how it works, what LVM metadata is, etc... It is upto the application to create the pseudo devices pointing to the physical volumes using one of device-mapper's targets and then update the mapper table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The device-mapper mapping table :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The mapping table used by device-mapper doesn't take too much space and is a list created using a 'btree'. A btree or a '&lt;a href="http://en.wikipedia.org/wiki/Binary_search_tree" title="Binary search tree"&gt;Binary Search Tree&lt;/a&gt;' is a data-structure from which data can be added, removed or queried.&lt;/p&gt;
&lt;p&gt;In order to know more on what a btree is and the concept behind it, read :&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Binary_search_tree" title="Binary Search Tree"&gt;http://en.wikipedia.org/wiki/Binary_search_tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/B-tree" title="B-Tree"&gt;http://en.wikipedia.org/wiki/B-tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Types of device-mapper targets :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Applications which use device-mapper actually use one or more of its target methods to achieve their purpose. Targets can be said as a method or type of mapping used by device-mapper. The general mapping targets are :&lt;/p&gt;
&lt;p&gt;a) Linear - Used by linear logical volumes, ie.. the default data layout method used by LVM2.&lt;/p&gt;
&lt;p&gt;b) Striped - Used by striped logical volumes as well as software &lt;a href="http://en.wikipedia.org/wiki/Standard_RAID_levels" title="Standard RAID levels"&gt;RAID0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;c) Mirror - Used by software RAID1 and LVM mirroring.&lt;/p&gt;
&lt;p&gt;d) Crypt - Used by disk encryption utilties.&lt;/p&gt;
&lt;p&gt;e) Snapshot - Used to take online snapshots of block devices, an example is LVM snapshot.&lt;/p&gt;
&lt;p&gt;f) &lt;a href="http://en.wikipedia.org/wiki/Multipath_I/O" title="Multipath I/O"&gt;Multipath&lt;/a&gt; - Used by device-mapper-multipath.&lt;/p&gt;
&lt;p&gt;g) RAID45 - &lt;a href="http://en.wikipedia.org/wiki/RAID" title="RAID"&gt;Software raid&lt;/a&gt; using device-mapper, ie.. dmraid&lt;/p&gt;
&lt;p&gt;h) Error - Sectors of the pseudo device mapped with this target causes the I/O to fail.&lt;/p&gt;
&lt;p&gt;There are a few more mappings such as 'flaky' which is not used much.&lt;/p&gt;
&lt;p&gt;I'll write on how device-mapper works in LVM, in the next post...&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"lvcreate fails with the error \"Aborting. Failed to activate new LV to wipe the start of it.\". Why ??"</title><link href="https://arvimal.github.io/lvcreate-fails-with-the-error-aborting-failed-to-activate-new-lv-to-wipe-the-start-of-it-why.html" rel="alternate"></link><published>2009-11-02T00:00:00+01:00</published><updated>2009-11-02T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2009-11-02:/lvcreate-fails-with-the-error-aborting-failed-to-activate-new-lv-to-wipe-the-start-of-it-why.html</id><summary type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;In case anyone out there gets an error message like "Aborting. Failed to activate new LV to wipe the start of it." while doing an 'lvcreate', check (/etc/lvm/lvm.conf) once more.&lt;/p&gt;
&lt;p&gt;Most probably, a 'volume_list' would have been defined in there, which in turns want you to …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;In case anyone out there gets an error message like "Aborting. Failed to activate new LV to wipe the start of it." while doing an 'lvcreate', check (/etc/lvm/lvm.conf) once more.&lt;/p&gt;
&lt;p&gt;Most probably, a 'volume_list' would have been defined in there, which in turns want you to specify the 'volume_list' tag specified along with the lvcreate command.&lt;/p&gt;
&lt;p&gt;Excerpt from /etc/lvm/lvm.conf:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# If volume_list is defined, each LV is only activated if there is a # match against the list. #   vgname and vgname/lvname are matched exactly. #   @tag matches any tag set in the LV or VG. #   @* matches if any tag defined on the host is also set in the LV or VG # # volume_list = [ vg1, vg2/lvol1, @tag1, @* ] volume_list = [ VG01, @foo.com ]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, you will have to use the 'lvcreate' command as follows, which will create the logical volume properly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# lvcreate --addtag @foo.com    ... following-options&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"How to map PCI devices in Linux ?"</title><link href="https://arvimal.github.io/how-to-map-pci-devices-in-linux.html" rel="alternate"></link><published>2008-07-18T00:00:00+02:00</published><updated>2008-07-18T00:00:00+02:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-07-18:/how-to-map-pci-devices-in-linux.html</id><summary type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;From the output of the command 'lspci -n' (The number after the colon, here '1679' from the below snip)&lt;/p&gt;
&lt;p&gt;0a:04.0 0200: 14e4:1679 (rev a3) Subsystem: 103c:703c Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr+ Stepping- SERR+ FastB2B- Status: Cap+ 66MHz+ UDF- FastB2B+ ParErr- DEVSEL …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "techno"&lt;/h2&gt;
&lt;p&gt;From the output of the command 'lspci -n' (The number after the colon, here '1679' from the below snip)&lt;/p&gt;
&lt;p&gt;0a:04.0 0200: 14e4:1679 (rev a3) Subsystem: 103c:703c Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr+ Stepping- SERR+ FastB2B- Status: Cap+ 66MHz+ UDF- FastB2B+ ParErr- DEVSEL=medium Latency: 64 (16000ns min), Cache Line Size: 64 bytes Interrupt: pin A routed to IRQ 138 Region 0: Memory at fdef0000 (64-bit, non-prefetchable) [size=64K] Region 2: Memory at fdee0000 (64-bit, non-prefetchable) [size=64K]&lt;/p&gt;
&lt;p&gt;IMPORTANT: -------------------&lt;/p&gt;
&lt;p&gt;In the above line "14e4:1679", '14e4' is the UID of the manufacturer and '1679' is the card model or hardware ID.&lt;/p&gt;
&lt;p&gt;The actual way to proceed is to open the pci.ids file ('/usr/share/hwdata/pci.ids' and '/lib/modules/`uname -r`/modules.pcimap') and check for the manufacturer UID, like '14e4' which is the 'Broadcom Corporation'. The file /lib/modules/`uname -r`/modules.pcimap would be more reliable since it is from the modules of the loaded kernel.&lt;/p&gt;
&lt;p&gt;Under that, check the card model, like '1679' which is 'NetXtreme BCM5715S Gigabit Ethernet'.&lt;/p&gt;
&lt;p&gt;Under that you can also have subdivisions, so in order to pin-point a particular card you will have to use the 'Subsystem' value from 'lspci'.&lt;/p&gt;
&lt;p&gt;In this example, 'Subsystem' is 103c:703c, which turns out to be 'NC326i PCIe Dual Port Gigabit Server Adapter'&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Bootloader checker"</title><link href="https://arvimal.github.io/bootloader-checker.html" rel="alternate"></link><published>2008-02-15T00:00:00+01:00</published><updated>2008-02-15T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-15:/bootloader-checker.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"boot-loader-checker"&lt;/li&gt;
&lt;li&gt;"grub"&lt;/li&gt;
&lt;li&gt;"lilo"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;A bash code snippet that helps to check if the installed bootloader is Grub or LILO.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash&lt;/p&gt;
&lt;p&gt;A=`mount | awk '{print $1}' | grep -n /dev/ | grep "1:" | cut -f2 -d ":" | cut -c 1-8` B=`mount | awk '{print $1}' | grep -n /dev …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"boot-loader-checker"&lt;/li&gt;
&lt;li&gt;"grub"&lt;/li&gt;
&lt;li&gt;"lilo"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;A bash code snippet that helps to check if the installed bootloader is Grub or LILO.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash&lt;/p&gt;
&lt;p&gt;A=`mount | awk '{print $1}' | grep -n /dev/ | grep "1:" | cut -f2 -d ":" | cut -c 1-8` B=`mount | awk '{print $1}' | grep -n /dev/ | grep "1:" | cut -f2 -d ":"`&lt;/p&gt;
&lt;p&gt;echo ; echo -e " / mounted on $B \n"; dd if=$A bs=512 count=1 2&amp;gt;&amp;amp;1 | grep GRUB &amp;gt; /dev/null; if [ $? = 0 ] ; then echo -e "The installed bootloader is GRUB.\n" ; fi&lt;/p&gt;
&lt;p&gt;dd if=$A bs=512 count=1 2&amp;gt;&amp;amp;1 | grep LILO &amp;gt; /dev/null; if [ $? = 0 ] ; then echo -e "The installed bootloader is LILO.\n" ; fi [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Creating a SWAP space in Linux"</title><link href="https://arvimal.github.io/creating-a-swap-space-in-linux.html" rel="alternate"></link><published>2008-02-15T00:00:00+01:00</published><updated>2008-02-15T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-15:/creating-a-swap-space-in-linux.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"swap-space"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Adding Swap Space:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes it is necessary to add more swap space after installation. For example, you may upgrade the amount of RAM in your system from 64 MB to 128 MB, but there is only 128 MB of swap space. It might be advantageous to increase …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"swap-space"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Adding Swap Space:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes it is necessary to add more swap space after installation. For example, you may upgrade the amount of RAM in your system from 64 MB to 128 MB, but there is only 128 MB of swap space. It might be advantageous to increase the amount of swap space to 256 MB if you perform memory-intense operations or run applications that require a large amount of memory.&lt;/p&gt;
&lt;p&gt;You have two options: add a swap partition or add a swap file. It is recommended that you add a swap partition, but sometimes that is not easy if you do not have any free space available.&lt;/p&gt;
&lt;p&gt;To add a swap partition (assuming /dev/hdb2 is the swap partition you want to add):&lt;/p&gt;
&lt;p&gt;1)  The hard drive can not be in use (partitions can not be mounted, and swap space can not be enabled). The easiest way to achieve this it to boot your system in rescue mode. Refer to Chapter 8 for instructions on booting into rescue mode. When prompted to mount the filesystem, select Skip. Alternately, if the drive does not contain any partitions in use, you can unmount them and turn off all the swap space on the hard drive with the swapoff command.&lt;/p&gt;
&lt;p&gt;2)  Create the swap partition using parted or fdisk. Using parted is easier than fdisk; thus, only parted will be explained. To create a swap partition with 'parted:'. At a shell prompt as root, type the command parted /dev/hdb, where /dev/hdb is the device name for the hard drive with free space. At the (parted) prompt, type print to view the existing partitions and the amount of free space. The start and end values are in megabytes. Determine how much free space is on the hard drive and how much you want to allocate for a new swap partition. At the (parted) prompt, type mkpartfs part-type linux-swap start end, where part-type is one of primary, extended, or logical, start is the starting point of the partition, and end is the end point of the partition.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning     Warning _________________________&lt;/p&gt;
&lt;p&gt;Changes take place immediately; be careful when you type.&lt;/p&gt;
&lt;p&gt;Exit parted by typing quit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3) Now that you have the swap partition, use the command mkswap to setup the swap partition. At a shell prompt as root, type the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# mkswap /dev/hdb2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4) To enable the swap partition immediately, type the following command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# swapon /dev/hdb2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5) To enable it at boot time, edit /etc/fstab to include:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/dev/hdb2               swap                    swap    defaults        0 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next time the system boots, it will enable the new swap partition.&lt;/p&gt;
&lt;p&gt;6) After adding the new swap partition and enabling it, make sure it is enabled by viewing the output of the command cat /proc/swaps or free.&lt;/p&gt;
&lt;p&gt;To add a swap file: -------------------------- 1.  Determine the size of the new swap file and multiple by 1024 to determine the block size. For example, the block size of a 64 MB swap file is 65536.&lt;/p&gt;
&lt;p&gt;2.  At a shell prompt as root, type the following command with count being equal to the desired block size:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# dd if=/dev/zero of=/swapfile bs=1024 count=65536&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. Setup the swap file with the command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# mkswap /swapfile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4. To enable the swap file immediately but not automatically at boot time:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# swapon /swapfile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5. To enable it at boot time, edit /etc/fstab to include:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/swapfile               swap                    swap    defaults        0 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next time the system boots, it will enable the new swap file.&lt;/p&gt;
&lt;p&gt;6. After adding the new swap file and enabling it, make sure it is enabled by viewing the output of the command cat /proc/swaps or free.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Recursive file counter in bash"</title><link href="https://arvimal.github.io/recursive-file-counter-in-bash.html" rel="alternate"></link><published>2008-02-15T00:00:00+01:00</published><updated>2008-02-15T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-15:/recursive-file-counter-in-bash.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"file-counter"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Most of the scripts presented in this journal have been created while learning bash and having nothing much to do...&lt;/p&gt;
&lt;p&gt;I think its usual to get crazy ideas and work trying to implement them, especially while learning any type of coding.  This  'File Counter' script came as …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"file-counter"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Most of the scripts presented in this journal have been created while learning bash and having nothing much to do...&lt;/p&gt;
&lt;p&gt;I think its usual to get crazy ideas and work trying to implement them, especially while learning any type of coding.  This  'File Counter' script came as such a  crazy idea. It was working at the time of its creation, but have not checked it recently.. should work..&lt;/p&gt;
&lt;p&gt;This script counts the entire number of files irrespective the folders under the main directory you specify for this script to work on. ie.. It recursively  counts the files under a directory tree.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash&lt;/p&gt;
&lt;h1&gt;Counts the number of files recursively inside a directory    # # echo ; clear echo -e "Please enter the directory location where you want the files to be counted...\n" ; echo&lt;/h1&gt;
&lt;p&gt;read dir ; echo ;  if [ ! -d $dir ] ; then echo -e "The location you specified doesn't exist.\n" ; exit 0; else cd $dir ; echo -e "Please wait for the files to be counted.....\n" ; echo ; fi&lt;/p&gt;
&lt;p&gt;X=`ls -l | wc -l` Y=`ls -l | grep ^d | awk '{print $9}'` B=`ls -l $Y | awk '{print $9}' | grep . | wc -l ` A=`expr $X + $B`&lt;/p&gt;
&lt;p&gt;echo -e "There are a total of $A files inside the directory $dir...\n"&lt;/p&gt;
&lt;p&gt;C=`ls -Rl | grep -v ./ | grep -v total | grep . | awk '{print $8}'`&lt;/p&gt;
&lt;p&gt;echo -e "Do you want to scan the directory for the file types?\n" echo -e "Y/N\n" ; read choice; if [ $choice = Y ] ; then cd $dir ; file $C | awk '{print $1,"=======&amp;gt;&amp;gt;", $2}' &amp;gt; $HOME/Filetype.txt;echo -e "Output saved in file Filetype.txt.\n" elif [ $choice = N ] ; then echo -e "Thankyou $USER, Take care....\n" else echo ; echo -e "Invalid choice buddy...\n" ; echo -e "Exiting.....Bye..\n" ;  fi [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"CHKROOTKIT install script (with functions)"</title><link href="https://arvimal.github.io/chkrootkit-install-script-with-functions.html" rel="alternate"></link><published>2008-02-14T00:00:00+01:00</published><updated>2008-02-14T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-14:/chkrootkit-install-script-with-functions.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"functions"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This is an extension or a rebuild of the previous chkrootkit install script, just used functions so its somewhat simplified.... ( Or is it ..? :) )&lt;/p&gt;
&lt;p&gt;[code language="bash"]&lt;/p&gt;
&lt;h1&gt;!/bin/bash&lt;/h1&gt;
&lt;p&gt;DOWNLOAD_LOCATION='/root/Downloads' CHKROOTKIT_WGET='ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz' RESULT_FILE='/root/Server-Test.txt' …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"functions"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This is an extension or a rebuild of the previous chkrootkit install script, just used functions so its somewhat simplified.... ( Or is it ..? :) )&lt;/p&gt;
&lt;p&gt;[code language="bash"]&lt;/p&gt;
&lt;h1&gt;!/bin/bash&lt;/h1&gt;
&lt;p&gt;DOWNLOAD_LOCATION='/root/Downloads' CHKROOTKIT_WGET='ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz' RESULT_FILE='/root/Server-Test.txt'&lt;/p&gt;
&lt;p&gt;clear;echo chkrootkit-install () {&lt;/p&gt;
&lt;p&gt;while true; do echo -e "@@@@@@@@@@@@@@@@@@ CHK-ROOTKIT INSTALL/CHECK SCRIPT @@@@@@@@@@@@@@@@@@@@\n" echo -e "Do you want to download and compile CHK-ROOTKIT [yes/no] ? : \c" | tee -a $RESULT_FILE; read answer; echo $answer &amp;gt;&amp;gt; $RESULT_FILE;&lt;/p&gt;
&lt;p&gt;case $answer in yes|YES) echo if [ ! -e $DOWNLOAD_LOCATION ]; then echo -e "$DOWNLOAD_LOCATION does not exist, creating.......\n";sleep 1s mkdir -p $DOWNLOAD_LOCATION; fi rm -rf $DOWNLOAD_LOCATION/chkrootkit* &amp;gt; /dev/null; echo -e "Downloading CHK-ROOTKIT....\n" | tee -a $RESULT_FILE;sleep 1s cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; wget --progress=dot $CHKROOTKIT_WGET; if [ $? -eq 0 ] ; then echo -e "Download finished..\n"; else echo -e "Sorry...Download Failed..!!!\n";exit;fi;echo echo -e "Unpacking and compiling CHK-ROOTKIT..........\n";sleep 2s cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; tar -xvf chkrootkit*; mv $DOWNLOAD_LOCATION/chkrootkit*gz $DOWNLOAD_LOCATION/1-chkrootkit.tar.gz;sleep 2s cd $DOWNLOAD_LOCATION/chkrootki* &amp;amp;&amp;amp; make sense &amp;gt; /dev/null; if [ $? -eq 0 ] ; then echo -e "CHK-ROOTKIT compiled successfully..\n"| tee -a $RESULT_FILE; break else echo -e "CHK-ROOTKIT compilation failed, Quiting....\n" | tee -a $RESULT_FILE; exit fi ;; no|NO) echo echo -e "Ok..As you wish....Aborting.\n"|tee -a $RESULT_FILE; exit ;; *) echo echo -e "Please enter either 'yes' OR 'no'..: \c" ;; esac done }&lt;/p&gt;
&lt;p&gt;chkrootkit-run () { if [ -d $DOWNLOAD_LOCATION/chkrootki* ]; then while true; do echo -e "Do you want to run CHK-ROOTKIT now [yes/no] ? : \c" | tee -a $RESULT_FILE; read reply echo $reply &amp;gt;&amp;gt; $RESULT_FILE;&lt;/p&gt;
&lt;p&gt;case $reply in yes|YES) echo echo -e "Starting CHK-ROOTKIT....\n" | tee -a $RESULT_FILE;sleep 2s;echo echo -e "----------------CHK-ROOTKIT SCAN RESULT-----------------\n" $DOWNLOAD_LOCATION/chkrootk*/chkrootkit | tee -a $RESULT_FILE;sleep 1s echo;echo -e "CHK-ROOTKIT check finished......\n";echo exit ;; no|NO) echo echo -e "DON'T FORGET TO RUN CHK-ROOTKIT PERIODICALLY.\n" exit ;; *) echo echo -e "Please enter either 'yes' OR 'no'..: \c" ;; esac done&lt;/p&gt;
&lt;p&gt;else echo -e "Chkrootkit not found in $DOWNLOAD_LOCATION, exiting..\n" fi&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;chkrootkit-install &amp;amp;&amp;amp; chkrootkit-run; echo -e "The result is saved in $RESULT_FILE for reference.\n" [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"DNS Zone file sanity check"</title><link href="https://arvimal.github.io/dns-zone-file-sanity-check.html" rel="alternate"></link><published>2008-02-14T00:00:00+01:00</published><updated>2008-02-14T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-14:/dns-zone-file-sanity-check.html</id><summary type="html">&lt;h2&gt;- "programming"&lt;/h2&gt;
&lt;p&gt;This bash script does a sanity check for the DNS domains defined inside /var/named.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash A=`ls -l /var/named/*.db | awk '{print $9}' | cut -f4 -d "/" | sed 's/.db$//'` #domain names&lt;/p&gt;
&lt;p&gt;for i in $A; do named-checkzone $i /var/named/$i.db;done …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;- "programming"&lt;/h2&gt;
&lt;p&gt;This bash script does a sanity check for the DNS domains defined inside /var/named.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash A=`ls -l /var/named/*.db | awk '{print $9}' | cut -f4 -d "/" | sed 's/.db$//'` #domain names&lt;/p&gt;
&lt;p&gt;for i in $A; do named-checkzone $i /var/named/$i.db;done [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Nagios Installation Script"</title><link href="https://arvimal.github.io/nagios-installation-script.html" rel="alternate"></link><published>2008-02-14T00:00:00+01:00</published><updated>2008-02-14T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-14:/nagios-installation-script.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"nagios-installation"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This is a bash script which automates the installation of Nagios. There are more things to do such as setup of service monitoring, but that's for another time.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash DOWNLOAD_LOCATION='/root/Downloads/' NAGIOS_URL='http://jaist.dl.sourceforge.net/sourceforge/nagios/nagios-2.9.tar …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"nagios-installation"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This is a bash script which automates the installation of Nagios. There are more things to do such as setup of service monitoring, but that's for another time.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash DOWNLOAD_LOCATION='/root/Downloads/' NAGIOS_URL='http://jaist.dl.sourceforge.net/sourceforge/nagios/nagios-2.9.tar.gz' APACHE_CONF='/etc/httpd/conf/httpd.conf' NAGIOS_PLUGIN='http://nchc.dl.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.8.tar.gz' NAGIOSHOME='/usr/local/nagios' DATE=`date +%d-%b-%Y` FILE='/root/Nagios.txt'&lt;/p&gt;
&lt;h6&gt;########################### # [1]   Installing nagios       # ################################# nagios_download () { clear&lt;/h6&gt;
&lt;p&gt;if [ `id -u` -ne 0 ]; then echo -e "You are executing the script as $USER\n" echo -e "You must be root to execute this script..\n"; echo -e "Sorry...Exiting..\n";exit 111; else if [ ! -e /root/Nagios.txt ]; then touch /root/Nagios.txt; else mv /root/Nagios.txt /root/Nagios-$DATE.txt; touch /root/Nagios.txt; fi&lt;/p&gt;
&lt;p&gt;echo -e "            [@@@@@@@@@@@@@@@@@@@@@@@@@ NAGIOS INSTALL SCRIPT @@@@@@@@@@@@@@@@@@@@@@@@@]\n";sleep 1s echo -e "                                           ...Welcome...\n"|tee -a $FILE;sleep 1s echo "[Starting the Nagios Installation Process :-]"|tee -a $FILE; echo "---------------------------------------------"|tee -a $FILE;echo;sleep 1s fi&lt;/p&gt;
&lt;p&gt;if [ ! -e $DOWNLOAD_LOCATION ]; then echo "$DOWNLOAD_LOCATION does not exist, creating......."|tee -a $FILE;sleep 1s mkdir -pv $DOWNLOAD_LOCATION;echo fi&lt;/p&gt;
&lt;p&gt;echo "[Downloading the nagios tar-ball to $DOWNLOAD_LOCATION :-]"|tee -a $FILE; echo "--------------------------------------------------------"|tee -a $FILE;echo;sleep 1s&lt;/p&gt;
&lt;p&gt;cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; wget --progress=dot $NAGIOS_URL;echo echo -e "Extracting the archive....\n"|tee -a $FILE;sleep 1s cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; tar -zxf nagios*gz &amp;amp;&amp;amp; mv nagios*gz Nagios-$DATE.tar.gz;echo }&lt;/p&gt;
&lt;p&gt;nagios_usercheck () { echo "[Checking the existence of user/group 'nagios' :-]"|tee -a $FILE; echo "--------------------------------------------------"|tee -a $FILE;&lt;/p&gt;
&lt;p&gt;grep -q nagios /etc/group &amp;gt; /dev/null if [ $? = 0 ];then echo "Group 'nagios' exist"|tee -a $FILE; else echo "Adding group 'nagios'"|tee -a $FILE; /usr/sbin/groupadd nagios fi&lt;/p&gt;
&lt;p&gt;grep -q nagios /etc/passwd &amp;gt; /dev/null if [ $? = 0 ];then echo "User 'nagios' exists"|tee -a $FILE; else echo "Adding user 'nagios'"|tee -a $FILE; /usr/sbin/useradd -d $NAGIOSHOME -g nagios -s /bin/false -m nagios fi;echo&lt;/p&gt;
&lt;p&gt;echo "[Checking the existence of user/group 'nagcmd' :-]"|tee -a $FILE; echo "--------------------------------------------------"|tee -a $FILE;&lt;/p&gt;
&lt;p&gt;grep -q nagcmd /etc/group; if [ $? = 0 ];then echo "Group 'nagcmd' exists"|tee -a $FILE; else echo "Adding group 'nagcmd'"|tee -a $FILE; /usr/sbin/groupadd nagcmd; fi&lt;/p&gt;
&lt;p&gt;grep -q nagcmd /etc/passwd; if [ $? = 0 ];then echo "User 'nagcmd' exists"|tee -a $FILE; else echo "Adding user 'nagcmd'"|tee -a $FILE; /usr/sbin/useradd -g nagcmd -s /bin/false -m nagcmd; fi; echo }&lt;/p&gt;
&lt;p&gt;nagios_previouscheck () { echo "[Checking for previous installations :-]"|tee -a $FILE echo "----------------------------------------"|tee -a $FILE;sleep 1s&lt;/p&gt;
&lt;p&gt;if [ -d /usr/local/nagios ]; then echo "Installation directory '/usr/local/nagios/' already exist."|tee -a $FILE echo "Moving '/usr/local/nagios/' to '/usr/local/Nagios-$DATE.back'"|tee -a $FILE mv -v /usr/local/nagios /usr/local/Nagios-$DATE.back;echo echo "Creating the Installation Directory for Nagios [/usr/local/nagios/]"|tee -a $FILE mkdir -pv /usr/local/nagios;echo else echo "Nagios installation not found at the default location of $NAGIOSHOME"; echo "Creating the Installation Directory for Nagios [/usr/local/nagios/]"|tee -a $FILE mkdir -pv /usr/local/nagios;echo fi }&lt;/p&gt;
&lt;p&gt;nagios_ownership () { echo "[Setting appropriate ownership on the installation directory]"|tee -a $FILE echo "-------------------------------------------------------------" chown -v nagios.nagios /usr/local/nagios;echo;sleep 1s&lt;/p&gt;
&lt;p&gt;echo "[Checking the Web-Server user/group :-]"|tee -a $FILE echo "---------------------------------------"|tee -a $FILE;sleep 1s&lt;/p&gt;
&lt;p&gt;echo "Web-Server User  : `grep "^User" $APACHE_CONF|head -n1|awk '{print $2}'`"|tee -a $FILE echo "Web-Server Group : `grep "^Group" $APACHE_CONF|head -n1|awk '{print $2}'`"|tee -a $FILE;echo;sleep 1s&lt;/p&gt;
&lt;p&gt;echo "[Adding the Web-Server/Nagios user to the 'nagcmd' group]"|tee -a $FILE; echo "---------------------------------------------------------" /usr/sbin/usermod -G nagcmd `grep "^User" $APACHE_CONF|head -n1|awk '{print $2}'` &amp;amp;&amp;amp; \ echo "Added the user `grep "^User" $APACHE_CONF|head -n1|awk '{print $2}'` to the 'nagcmd' group."|tee -a $FILE sleep 1s /usr/sbin/usermod -G nagcmd nagios &amp;amp;&amp;amp; echo -e "Added the user 'nagios' to the 'nagcmd' group.\n"|tee -a $FILE;sleep 1s echo }&lt;/p&gt;
&lt;p&gt;nagios_configure () { echo "[Starting the Nagios 'configure' script :-]"|tee -a $FILE; echo "-------------------------------------------"|tee -a $FILE;sleep 4s&lt;/p&gt;
&lt;p&gt;cd $DOWNLOAD_LOCATION/nagios* &amp;amp;&amp;amp; ./configure --with-command-group=nagcmd &amp;amp;&amp;amp; make all &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; make install-config &amp;amp;&amp;amp; make install-init &amp;amp;&amp;amp; make install-commandmode echo }&lt;/p&gt;
&lt;h6&gt;########################### # [2] Installing Nagios Plugins #&lt;/h6&gt;
&lt;p&gt;nagios_plugins () { sleep 4s echo -e "           [@@@@@@@@@@@@@@@@@@@@@@@@@ NAGIOS PLUGIN SETUP @@@@@@@@@@@@@@@@@@@@@@@@@]\n"|tee -a $FILE;sleep 2s&lt;/p&gt;
&lt;p&gt;echo "[Downloading the 'nagios-plugins' tarball :-]"|tee -a $FILE; echo "---------------------------------------------";sleep 3s cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; wget --progress=dot $NAGIOS_PLUGIN;echo echo "[Extracting the plugins archive :-]"|tee -a $FILE; echo "-----------------------------------";sleep 1s cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; tar -zxf nagios-plugins*gz &amp;amp;&amp;amp; mv nagios-plugins*gz Nagios-plugins-$DATE.tar.gz;echo echo "[Configuring and compiling nagios-plugins :-]"|tee -a $FILE; echo "---------------------------------------------"|tee -a $FILE;sleep 1s cd $DOWNLOAD_LOCATION &amp;amp;&amp;amp; cd nagios-plugins* &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; echo &amp;amp;&amp;amp; echo -e "[Nagios Plugin Setup Finished.]\n" } echo;echo;sleep 3s&lt;/p&gt;
&lt;h6&gt;########################### # [3]  Configuring Nagios       # ################################# nagios_conf_files () { echo "[Creating the minimal configuration files :-]"; echo "---------------------------------------------";sleep 2s cp -apv $NAGIOSHOME/etc/nagios.cfg-sample $NAGIOSHOME/etc/nagios.cfg cp -apv $NAGIOSHOME/etc/commands.cfg-sample $NAGIOSHOME/etc/commands.cfg cp -apv $NAGIOSHOME/etc/resource.cfg-sample $NAGIOSHOME/etc/resource.cfg cp -apv $NAGIOSHOME/etc/localhost.cfg-sample $NAGIOSHOME/etc/localhost.cfg cp -apv $NAGIOSHOME/etc/cgi.cfg-sample $NAGIOSHOME/etc/cgi.cfg;echo&lt;/h6&gt;
&lt;p&gt;echo "[Setting administrative rights for 'nagiosadmin']" echo "-------------------------------------------------";sleep 2s;echo echo "" &amp;gt;&amp;gt; $NAGIOSHOME/etc/cgi.cfg echo -e "#Setting administrative rights for 'nagiosadmin'\n" &amp;gt;&amp;gt; $NAGIOSHOME/etc/cgi.cfg&lt;/p&gt;
&lt;p&gt;echo "authorized_for_system_information=nagiosadmin authorized_for_configuration_information=nagiosadmin authorized_for_system_commands=nagiosadmin authorized_for_all_services=nagiosadmin authorized_for_all_hosts=nagiosadmin authorized_for_all_service_commands=nagiosadmin authorized_for_all_host_commands=nagiosadmin" &amp;gt;&amp;gt; $NAGIOSHOME/etc/cgi.cfg&lt;/p&gt;
&lt;p&gt;echo "[Creating additional configuration files :-]"; echo "--------------------------------------------";sleep 2s touch $NAGIOSHOME/etc/hosts.cfg; if [ $? -eq 0 ];then echo "Created $NAGIOSHOME/etc/hosts.cfg";else echo "Failed creating $NAGIOSHOME/etc/hosts.cfg";fi touch $NAGIOSHOME/etc/hostgroups.cfg; if [ $? -eq 0 ];then echo "Created $NAGIOSHOME/etc/hostgroups.cfg";else echo "Failed creating $NAGIOSHOME/etc/hostgroups.cfg";fi touch $NAGIOSHOME/etc/contacts.cfg; if [ $? -eq 0 ];then echo "Created $NAGIOSHOME/etc/contacts.cfg";else echo "Failed creating $NAGIOSHOME/etc/contacts.cfg";fi touch $NAGIOSHOME/etc/contactgroups.cfg; if [ $? -eq 0 ];then echo "Created $NAGIOSHOME/etc/contactgroups.cfg";else echo "Failed creating $NAGIOSHOME/etc/contactgroups.cfg";fi touch $NAGIOSHOME/etc/services.cfg; if [ $? -eq 0 ];then echo "Created $NAGIOSHOME/etc/services.cfg";else echo "Failed creating $NAGIOSHOME/etc/services.cfg";fi touch $NAGIOSHOME/etc/timeperiods.cfg; if [ $? -eq 0 ];then echo "Created $NAGIOSHOME/etc/timeperiods.cfg";else echo "Failed creating $NAGIOSHOME/etc/timeperiods.cfg";fi; echo&lt;/p&gt;
&lt;p&gt;echo "[Changing the ownership of newly created files :-]"; echo "--------------------------------------------------";sleep 2s chown -Rv nagios.nagios $NAGIOSHOME/etc/* echo&lt;/p&gt;
&lt;p&gt;echo "" &amp;gt;&amp;gt; $NAGIOSHOME/etc/nagios.cfg echo "[Setting config: file paths in $NAGIOSHOME/etc/nagios.cfg :-]"; echo "------------------------------------------------------------------";echo;sleep 2s echo -e "#Setting configuration file paths.\n" &amp;gt;&amp;gt; $NAGIOSHOME/etc/nagios.cfg echo "cfg_file=/usr/local/nagios/etc/hosts.cfg cfg_file=/usr/local/nagios/etc/hostgroups.cfg cfg_file=/usr/local/nagios/etc/services.cfg cfg_file=/usr/local/nagios/etc/contacts.cfg cfg_file=/usr/local/nagios/etc/contactgroups.cfg cfg_file=/usr/local/nagios/etc/timeperiods.cfg" &amp;gt;&amp;gt; $NAGIOSHOME/etc/nagios.cfg&lt;/p&gt;
&lt;p&gt;echo echo "[Running the Nagios Syntax Check :-]"; echo "------------------------------------";sleep 1s $NAGIOSHOME/bin/nagios -v $NAGIOSHOME/etc/nagios.cfg;echo }&lt;/p&gt;
&lt;h6&gt;########################### # [4]   Setting Up Apache       #&lt;/h6&gt;
&lt;p&gt;nagios_apache () { echo "[Setting up Apache Web-Interface :-]" echo "------------------------------------"&lt;/p&gt;
&lt;p&gt;grep -q "### Nagios Script Alias ###" $APACHE_CONF;&lt;/p&gt;
&lt;p&gt;if [ $? -eq 0 ];then echo -e "ScriptAlias for nagios already exists in $APACHE_CONF\n" /etc/init.d/httpd restart &amp;gt; /dev/null else&lt;/p&gt;
&lt;p&gt;echo "" &amp;gt;&amp;gt; $APACHE_CONF echo -e "### Nagios Script Alias ###\n" &amp;gt;&amp;gt; $APACHE_CONF;&lt;/p&gt;
&lt;p&gt;echo -e "ScriptAlias /nagios/cgi-bin /usr/local/nagios/sbin \n&lt;/p&gt;
&lt;p&gt;Options ExecCGI AllowOverride None Order allow,deny Allow from all AuthName \"Nagios Access\" AuthType Basic AuthUserFile /usr/local/nagios/etc/htpasswd.users Require valid-user    \n" &amp;gt;&amp;gt; $APACHE_CONF&lt;/p&gt;
&lt;p&gt;echo -e "Alias /nagios /usr/local/nagios/share  \n&lt;/p&gt;
&lt;p&gt;Options None AllowOverride None Order allow,deny Allow from all AuthName \"Nagios Access\" AuthType Basic AuthUserFile /usr/local/nagios/etc/htpasswd.users Require valid-user    \n" &amp;gt;&amp;gt; $APACHE_CONF&lt;/p&gt;
&lt;p&gt;echo "Added the needed Alias configurations in $APACHE_CONF"&lt;/p&gt;
&lt;p&gt;echo -e "Restarting the Web-Server...please wait..\n" /etc/init.d/httpd restart; fi }&lt;/p&gt;
&lt;p&gt;nagios_htpasswd () { echo "[Creating the login credentials for the nagios URL :-]" echo "------------------------------------------------------"; echo "Username    : nagiosadmin" htpasswd -c $NAGIOSHOME/etc/htpasswd.users nagiosadmin;echo echo -e "Login to the Nagios Interface is now restricted to user 'nagiosadmin'.\n" }&lt;/p&gt;
&lt;p&gt;nagios_download &amp;amp;&amp;amp; nagios_usercheck &amp;amp;&amp;amp; nagios_previouscheck &amp;amp;&amp;amp; nagios_ownership &amp;amp;&amp;amp; nagios_configure &amp;amp;&amp;amp; nagios_plugins &amp;amp;&amp;amp; nagios_conf_files &amp;amp;&amp;amp; nagios_apache &amp;amp;&amp;amp; nagios_htpasswd [/code]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"A random number generator in Bash"</title><link href="https://arvimal.github.io/a-random-number-generator-in-bash.html" rel="alternate"></link><published>2008-02-13T00:00:00+01:00</published><updated>2008-02-13T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-13:/a-random-number-generator-in-bash.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"bash"&lt;/li&gt;
&lt;li&gt;"random-number-generator"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The bash environment variable 'RANDOM' is a pseudo-random number generator built in bash, and it can generate random numbers in the range of 0 - 32767.&lt;/p&gt;
&lt;p&gt;Using the command `echo $RANDOM`, we can generate a random number. Building a random number generator which emits a sequence of …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"bash"&lt;/li&gt;
&lt;li&gt;"random-number-generator"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The bash environment variable 'RANDOM' is a pseudo-random number generator built in bash, and it can generate random numbers in the range of 0 - 32767.&lt;/p&gt;
&lt;p&gt;Using the command `echo $RANDOM`, we can generate a random number. Building a random number generator which emits a sequence of random numbers is pretty easy.&lt;/p&gt;
&lt;p&gt;[code language="bash"] #!/bin/bash for i in `seq 1 10`: do echo $RANDOM; sleep 1s; done [/code]&lt;/p&gt;
&lt;p&gt;The 'seq' or the 'sequential' can be used to generate a sequence of numbers.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>"Password Encryptor in C"</title><link href="https://arvimal.github.io/password-encryptor-in-c.html" rel="alternate"></link><published>2008-02-13T00:00:00+01:00</published><updated>2008-02-13T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-02-13:/password-encryptor-in-c.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"password-encrypt"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Some time back, I had to implement a password encryption section in one of my bash programs. It seemed easy to use a C snippet rather than doing it in bash. This was something I got after searching a while.&lt;/p&gt;
&lt;p&gt;[code language="C"]&lt;/p&gt;
&lt;h1&gt;include stdlib.h #include …&lt;/h1&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"programming"
tags:&lt;/li&gt;
&lt;li&gt;"password-encrypt"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Some time back, I had to implement a password encryption section in one of my bash programs. It seemed easy to use a C snippet rather than doing it in bash. This was something I got after searching a while.&lt;/p&gt;
&lt;p&gt;[code language="C"]&lt;/p&gt;
&lt;h1&gt;include stdlib.h #include unistd.h #include stdio.h #include crack.h #define DICTIONARY /usr/lib/cracklib_dict&lt;/h1&gt;
&lt;p&gt;int main(int argc, char *argv[]) {&lt;/p&gt;
&lt;p&gt;char *password; char *problem;&lt;/p&gt;
&lt;p&gt;int status = 0; printf(\nEnter an empty password or Ctrl-D to quit.\n); while ((password = getpass(\nPassword: )) != NULL *password ) { if ((problem = FascistCheck(password, DICTIONARY)) != NULL) { printf(Bad password: %s.\n, problem); status = 1; } else { printf(Good password!\n); } } exit(status); } [/code]&lt;/p&gt;
&lt;p&gt;Compile the code using the GNU C compiler.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# gcc filename.c -lcrack -o cracktest'&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>"Zombie processes"</title><link href="https://arvimal.github.io/zombie-processes.html" rel="alternate"></link><published>2008-01-01T00:00:00+01:00</published><updated>2008-01-01T00:00:00+01:00</updated><author><name>Vimal A.R</name></author><id>tag:arvimal.github.io,2008-01-01:/zombie-processes.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"runaway-process"&lt;/li&gt;
&lt;li&gt;"zombie"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Why can't I kill a process with the signal 9?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A process can be sleeping in kernel code. Usually that's because of faulty hardware or a badly written driver- or maybe a little of both. A device that isn't set to the interrupt the driver thinks …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;"techno"
tags:&lt;/li&gt;
&lt;li&gt;"runaway-process"&lt;/li&gt;
&lt;li&gt;"zombie"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Why can't I kill a process with the signal 9?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A process can be sleeping in kernel code. Usually that's because of faulty hardware or a badly written driver- or maybe a little of both. A device that isn't set to the interrupt the driver thinks it is can cause this, for example- the driver is waiting for something its never going to get. The process doesn't ignore your signal- it just never gets it.&lt;/p&gt;
&lt;p&gt;A zombie process doesn't react to signals because it's not really a process at all- it's just what's left over after it died. What's supposed to happen is that its parent process was to issue a "wait()" to collect the information about its exit. If the parent doesn't (programming error or just bad programming), you get a zombie. The zombie will go away if its parent dies- it will be "adopted" by init which will do the wait()- so if you see one hanging about, check its parent; if it is init, it will be gone soon, if not the only recourse is to kill the parent..which you may or may not want to do.&lt;/p&gt;
&lt;p&gt;Finally, a process that is being traced (by a debugger, for example) won't react to the KILL either then you do a ps, processes that have a status of Z are called "zombies". When people see a zombie process, the first thing they try to do is to kill the zombie, using kill or (horrors!) kill -9. This won't work, however: you can't kill a zombie, it's already dead.&lt;/p&gt;
&lt;p&gt;When a process has already terminated ("died") by receiving a signal to do so, it can stick around for a bit to finish up a few last tasks. These include closing open files and shutting down any allocated resources (memory, swap space, that sort of thing). These "housekeeping" tasks are supposed to happen very quickly. Once they're completed, the final thing that a process has to do before dying is to report its exit status to its parent. This is generally where things go wrong.&lt;/p&gt;
&lt;p&gt;Each process is assigned a unique Process ID (PID). Each process also has an associated parent process ID (PPID), which identifies the process that spawned it (or PPID of 1, meaning that the process has been inherited bythe init process, if the parent has already terminated). While the parent is still running, it can remember the PID's of all the children it has spawned. These PID's can not be re-used by other (new) processes until the parent knows that the child process is done.&lt;/p&gt;
&lt;p&gt;When a child terminates and has completed its housekeeping tasks, it sends a one-byte status code to its parent. If this status code never gets sent, the PID is kept alive (in "zombie" status) in order to reserve its PID ... the parent is waiting for the status code, and until it gets it, it doesn't want any new processes to try and reuse that PID number for themselves.&lt;/p&gt;
&lt;p&gt;To get rid of a zombie, you can try killing its parent, which will temporarily orphan the zombie. The init process will inherent the zombie, and this might allow the process to finish terminating since the init process is always in a wait() state (ready to receive exit status reports of children).&lt;/p&gt;
&lt;p&gt;Generally, though, zombies clean themselves up. Whatever the process was waiting for eventually occurs and the process can report its exit status to its parent and all is well.&lt;/p&gt;
&lt;p&gt;If a zombie is already owned by init, though, and it's still sticking around (like zombies are wont to do), then the process is almost certainly stuck in a device driver close routine, and will likely remain that way forever. You can reboot to clear out the zombies, but fixing the device driver is the only permanent solution. Killing the parent (init in this case) is highly unrecommended, since init is an extremely important process to keeping your system running..&lt;/p&gt;</content><category term="misc"></category></entry></feed>