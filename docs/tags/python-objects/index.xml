<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python-objects - Tag - The Child is Father of the Man</title>
        <link>https://arvimal.github.io/tags/python-objects/</link>
        <description>python-objects - Tag - The Child is Father of the Man</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Aug 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://arvimal.github.io/tags/python-objects/" rel="self" type="application/rss+xml" /><item>
    <title>Callables in Python</title>
    <link>https://arvimal.github.io/posts/2017/08/2017-08-09-callables-in-python/</link>
    <pubDate>Wed, 09 Aug 2017 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://arvimal.github.io/posts/2017/08/2017-08-09-callables-in-python/</guid>
    <description><![CDATA[Introduction A callable is an object in Python that can be called / executed when called with parantheses ( ). Classes and functions are callable.
Callables can be a class, a function, or an instance of a class. In simple terms, a class/function/instance/builtin is callable if it gets executed when called with parantheses ().
Example 1: In [1]: help() Welcome to Python 3.6&#39;s help utility!  -- content omitted -- -------- In [2]: int() Out[2]: 0 In [3]: callable(int) Out [3]: True In [4]: callable(help) Out [4]: True In [5]: def hello(): print(&#34;Howdy!]]></description>
</item><item>
    <title>Python, Objects, and some more..</title>
    <link>https://arvimal.github.io/posts/2016/10/2016-10-20-python-objects-and-some-more/</link>
    <pubDate>Thu, 20 Oct 2016 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://arvimal.github.io/posts/2016/10/2016-10-20-python-objects-and-some-more/</guid>
    <description><![CDATA[_E_verything in Python is an object, what does that mean? This post tries to discuss some very basic concepts.
What does the following assignment do?
[code language=&ldquo;python&rdquo;]
a = 1 [/code] Of course, anyone dabbled in code knows this. The statement above creates a container `a` and stores the value `1` in it.
But it seem that&rsquo;s not exactly what&rsquo;s happening, at least from Python&rsquo;s view-point.
When a = 1 is entered or executed by the python interpreter, the following happens in the backend, seemingly unknown to the user.]]></description>
</item></channel>
</rss>
