<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>staticmethod - Tag - My New Hugo Site</title>
        <link>http://example.org/tags/staticmethod/</link>
        <description>staticmethod - Tag - My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 May 2016 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/staticmethod/" rel="self" type="application/rss+xml" /><item>
    <title>Decorators - Object Oriented Programming</title>
    <link>http://example.org/2016-05-30-decorators-object-oriented-programming/</link>
    <pubDate>Mon, 30 May 2016 00:00:00 &#43;0000</pubDate>
    <author>xxxx</author>
    <guid>http://example.org/2016-05-30-decorators-object-oriented-programming/</guid>
    <description><![CDATA[_D_ecorators are wrapper functions (or classes) that wrap and modify another function (or class), and change it&rsquo;s behavior as required. Decorators help to modify your code without actually modifying the working function/class itself.
There are several inbuilt Decorators in Python, such as @classmethodÂ and @staticmethod. Examples on these are due for another post.
Decorators are called to act upon a function or class, by mentioning the Decorator name just above the function/class.]]></description>
</item>
</channel>
</rss>
