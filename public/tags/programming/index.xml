<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>programming - Tag - The Child is Father of the Man</title>
        <link>https://arvimal.github.io/tags/programming/</link>
        <description>programming - Tag - The Child is Father of the Man</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>arvimal81@gmail.com (Vimal A.R)</managingEditor>
            <webMaster>arvimal81@gmail.com (Vimal A.R)</webMaster><lastBuildDate>Tue, 27 Jun 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://arvimal.github.io/tags/programming/" rel="self" type="application/rss+xml" /><item>
    <title>Recursion - Algorithm Study</title>
    <link>https://arvimal.github.io/2017-06-27-recursion-algorithm-study/</link>
    <pubDate>Tue, 27 Jun 2017 00:00:00 &#43;0000</pubDate>
    <author>Vimal A.R</author>
    <guid>https://arvimal.github.io/2017-06-27-recursion-algorithm-study/</guid>
    <description><![CDATA[_R_ecursion is a technique by which a function calls itself until a condition is met.
Introduction Loops or repetitive execution based on certain conditions are inevitable in programs. Usual loops include if, while and for loops. Recursion is an entirely different way to deal with such situations, and in many cases, easier.
Recursion is a when a function calls itself in each iteration till a condition is met. Ideally, the data set in each iteration gets smaller until it reach the required condition, after which the recursive function exists.]]></description>
</item>
<item>
    <title>Python, Objects, and some more..</title>
    <link>https://arvimal.github.io/2016-10-20-python-objects-and-some-more/</link>
    <pubDate>Thu, 20 Oct 2016 00:00:00 &#43;0000</pubDate>
    <author>Vimal A.R</author>
    <guid>https://arvimal.github.io/2016-10-20-python-objects-and-some-more/</guid>
    <description><![CDATA[_E_verything in Python is an object, what does that mean? This post tries to discuss some very basic concepts.
What does the following assignment do?
[code language=&ldquo;python&rdquo;]
a = 1 [/code] Of course, anyone dabbled in code knows this. The statement above creates a container `a` and stores the value `1` in it.
But it seem that&rsquo;s not exactly what&rsquo;s happening, at least from Python&rsquo;s view-point.
When a = 1 is entered or executed by the python interpreter, the following happens in the backend, seemingly unknown to the user.]]></description>
</item>
<item>
    <title>Abstract Base Classes/Methods - Object Oriented Programming</title>
    <link>https://arvimal.github.io/2016-06-14-abstract-base-classesmethods-object-oriented-programming/</link>
    <pubDate>Tue, 14 Jun 2016 00:00:00 &#43;0000</pubDate>
    <author>Vimal A.R</author>
    <guid>https://arvimal.github.io/2016-06-14-abstract-base-classesmethods-object-oriented-programming/</guid>
    <description><![CDATA[_A_bstract classes, in short, are classes that are supposed to be inherited or subclassed, rather than instantiated.
Through Abstract Classes, we can enforce a blueprint on the subclasses that inherit the Abstract Class. This means that Abstract classes can be used to define a set of methods that must be implemented by it subclasses.
Abstract classes are used when working on large projects where classes have to be inherited, and need to strictly follow certain blueprints.]]></description>
</item>
<item>
    <title>Magic methods and Syntactic sugar in Python</title>
    <link>https://arvimal.github.io/2016-06-02-magic-methods-in-python/</link>
    <pubDate>Thu, 02 Jun 2016 00:00:00 &#43;0000</pubDate>
    <author>Vimal A.R</author>
    <guid>https://arvimal.github.io/2016-06-02-magic-methods-in-python/</guid>
    <description><![CDATA[Magic methods _M_agic methods are special methods which can be defined (or already designed and available) to act on objects.
Magic methods start and end with underscores &quot;__&quot;, and are not implicitly called by the user even though they can be. Most magic methods are used as syntactic sugar by binding it to more clear/easy_to_understand keywords.
Python is mostly objects and method calls done on objects. Many available functions in Python are actually tied to magic methods_.]]></description>
</item>
<item>
    <title>Decorators - Object Oriented Programming</title>
    <link>https://arvimal.github.io/2016-05-30-decorators-object-oriented-programming/</link>
    <pubDate>Mon, 30 May 2016 00:00:00 &#43;0000</pubDate>
    <author>Vimal A.R</author>
    <guid>https://arvimal.github.io/2016-05-30-decorators-object-oriented-programming/</guid>
    <description><![CDATA[_D_ecorators are wrapper functions (or classes) that wrap and modify another function (or class), and change it&rsquo;s behavior as required. Decorators help to modify your code without actually modifying the working function/class itself.
There are several inbuilt Decorators in Python, such as @classmethod and @staticmethod. Examples on these are due for another post.
Decorators are called to act upon a function or class, by mentioning the Decorator name just above the function/class.]]></description>
</item>
<item>
    <title>range() and enumerate()</title>
    <link>https://arvimal.github.io/2015-10-12-range-and-enumerate-2/</link>
    <pubDate>Mon, 12 Oct 2015 00:00:00 &#43;0000</pubDate>
    <author>Vimal A.R</author>
    <guid>https://arvimal.github.io/2015-10-12-range-and-enumerate-2/</guid>
    <description><![CDATA[The usual way to iterate over a range of numbers or a list in python, is to use range().
Example 0:
[code language=&ldquo;python&rdquo;] colors = [&ldquo;yellow&rdquo;, &ldquo;red&rdquo;, &ldquo;blue&rdquo;, &ldquo;white&rdquo;, &ldquo;black&rdquo;]
for i in range(len(colors)): print(i, colors[i]) [/code]
This should output:
[code language=&ldquo;bash&rdquo;] (0, &lsquo;yellow&rsquo;) (1, &lsquo;red&rsquo;) (2, &lsquo;blue&rsquo;) (3, &lsquo;white&rsquo;) (4, &lsquo;black&rsquo;) [/code]
print(), by default, returns a tuple. If we want to print it in a more presentable way, we’ll need to find the indice at which each value is, and print that as well.]]></description>
</item>
</channel>
</rss>
